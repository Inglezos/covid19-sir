{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 64-bit ('covid19-sir': pipenv)",
   "metadata": {
    "interpreter": {
     "hash": "aa53c8c6e6798222a2084c11cc25017700a8d3ad495b587e3a634f357767115f"
    }
   },
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage: datasets\n",
      "Here, we will review the raw/cleaned datasets. `Scenario` class performs data cleaning internally using `JHUData` class and so on, but it is important to review the features and data types before analysing them."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Preparation\n",
      "Prepare the packages."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "'2.14.0-lambda'"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Dataset preparation\n",
      "Download the datasets to \"input\" directory and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` instance will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically and download the datasets to \"input\" directory and load them."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create DataLoader instance\n",
      "data_loader = cs.DataLoader(\"input\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# (Main) The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu()\n",
      "# (Main) Population in each country\n",
      "population_data = data_loader.population()\n",
      "# (Main) Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt()\n",
      "# Linelist of case reports\n",
      "linelist = data_loader.linelist()\n",
      "# The number of tests\n",
      "pcr_data = data_loader.pcr()\n",
      "# The number of vaccinations\n",
      "vaccine_data = data_loader.vaccine()\n",
      "# Population pyramid\n",
      "pyramid_data = data_loader.pyramid()\n",
      "# Japan-specific dataset\n",
      "japan_data = data_loader.japan()"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving linelist from Open COVID-19 Data Working Group repository: https://github.com/beoutbreakprepared/nCoV2019\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving COVID-19 vaccination dataset from https://covid.ourworldindata.org/data/\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of cases (JHU style)\n",
      "The main dataset is that of the number of cases and was saved as `jhu_data`, an instance of `JHUData` class. This includes \"Confirmed\", \"Infected\", \"Recovered\" and \"Fatal\". \"Infected\" was calculated as \"Confirmed - Recovered - Fatal\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(jhu_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "covsirphy.cleaning.jhu_data.JHUData"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The dataset will be retrieved from [COVID-19 Data Hub](https://covid19datahub.io/) and [Data folder of CovsirPhy project](https://github.com/lisphilar/covid19-sir/tree/master/data). Description of these projects will be shown as follows."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Detailed citation list of COVID-19 Data Hub\n",
      "# print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>...</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>392155</th>\n",
        "      <td>2021-01-10</td>\n",
        "      <td>5106</td>\n",
        "      <td>1168.0</td>\n",
        "      <td>1142</td>\n",
        "      <td>16</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>392156</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>5106</td>\n",
        "      <td>1171.0</td>\n",
        "      <td>1142</td>\n",
        "      <td>16</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>392157</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>5107</td>\n",
        "      <td>1173.0</td>\n",
        "      <td>1145</td>\n",
        "      <td>17</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>392158</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>5107</td>\n",
        "      <td>1173.0</td>\n",
        "      <td>1146</td>\n",
        "      <td>17</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>392159</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>5107</td>\n",
        "      <td>1173.0</td>\n",
        "      <td>1146</td>\n",
        "      <td>17</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 21 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "       ObservationDate  Tests  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "392155      2021-01-10   5106     1168.0       1142      16    107808.0  COL   \n",
        "392156      2021-01-11   5106     1171.0       1142      16    107808.0  COL   \n",
        "392157      2021-01-12   5107     1173.0       1145      17    107808.0  COL   \n",
        "392158      2021-01-13   5107     1173.0       1146      17    107808.0  COL   \n",
        "392159      2021-01-14   5107     1173.0       1146      17    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  ...  cancel_events  \\\n",
        "392155        Vichada       Colombia               3  ...              1   \n",
        "392156        Vichada       Colombia               3  ...              1   \n",
        "392157        Vichada       Colombia               3  ...              1   \n",
        "392158        Vichada       Colombia               3  ...              1   \n",
        "392159        Vichada       Colombia               3  ...              1   \n",
        "\n",
        "        gatherings_restrictions  transport_closing  stay_home_restrictions  \\\n",
        "392155                        3                  1                       1   \n",
        "392156                        3                  1                       1   \n",
        "392157                        3                  1                       1   \n",
        "392158                        3                  1                       1   \n",
        "392159                        3                  1                       1   \n",
        "\n",
        "        internal_movement_restrictions  international_movement_restrictions  \\\n",
        "392155                               1                                    4   \n",
        "392156                               1                                    4   \n",
        "392157                               1                                    4   \n",
        "392158                               1                                    4   \n",
        "392159                               1                                    4   \n",
        "\n",
        "        information_campaigns  testing_policy  contact_tracing  \\\n",
        "392155                      2               2                2   \n",
        "392156                      2               2                2   \n",
        "392157                      2               2                2   \n",
        "392158                      2               2                2   \n",
        "392159                      2               2                2   \n",
        "\n",
        "        stringency_index  \n",
        "392155             81.02  \n",
        "392156             81.02  \n",
        "392157             81.02  \n",
        "392158             81.02  \n",
        "392159             81.02  \n",
        "\n",
        "[5 rows x 21 columns]"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14926</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>286752</td>\n",
        "      <td>59745</td>\n",
        "      <td>4044</td>\n",
        "      <td>222963</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14927</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>292212</td>\n",
        "      <td>62722</td>\n",
        "      <td>4094</td>\n",
        "      <td>225396</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14928</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>297315</td>\n",
        "      <td>64097</td>\n",
        "      <td>4145</td>\n",
        "      <td>229073</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14929</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>302623</td>\n",
        "      <td>64725</td>\n",
        "      <td>4233</td>\n",
        "      <td>233665</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14930</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>309214</td>\n",
        "      <td>66432</td>\n",
        "      <td>4315</td>\n",
        "      <td>238467</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "            Date Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "14926 2021-01-11   Japan        -     286752     59745   4044     222963\n",
        "14927 2021-01-12   Japan        -     292212     62722   4094     225396\n",
        "14928 2021-01-13   Japan        -     297315     64097   4145     229073\n",
        "14929 2021-01-14   Japan        -     302623     64725   4233     233665\n",
        "14930 2021-01-15   Japan        -     309214     66432   4315     238467"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.cleaned().info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 376311 entries, 0 to 14930\n",
        "Data columns (total 7 columns):\n",
        " #   Column     Non-Null Count   Dtype         \n",
        "---  ------     --------------   -----         \n",
        " 0   Date       376311 non-null  datetime64[ns]\n",
        " 1   Country    376311 non-null  category      \n",
        " 2   Province   376311 non-null  category      \n",
        " 3   Confirmed  376311 non-null  int64         \n",
        " 4   Infected   376311 non-null  int64         \n",
        " 5   Fatal      376311 non-null  int64         \n",
        " 6   Recovered  376311 non-null  int64         \n",
        "dtypes: category(2), datetime64[ns](1), int64(4)\n",
        "memory usage: 18.7 MB\n"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Total number of cases in all countries with `JHUData.total()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Calculate total values\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2021-01-10</th>\n",
        "      <td>90351910</td>\n",
        "      <td>32064315</td>\n",
        "      <td>1939688</td>\n",
        "      <td>56347907</td>\n",
        "      <td>0.021468</td>\n",
        "      <td>0.623649</td>\n",
        "      <td>0.033278</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2021-01-11</th>\n",
        "      <td>90973985</td>\n",
        "      <td>32415746</td>\n",
        "      <td>1948851</td>\n",
        "      <td>56609388</td>\n",
        "      <td>0.021422</td>\n",
        "      <td>0.622259</td>\n",
        "      <td>0.033281</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2021-01-12</th>\n",
        "      <td>91663921</td>\n",
        "      <td>32776175</td>\n",
        "      <td>1964657</td>\n",
        "      <td>56923089</td>\n",
        "      <td>0.021433</td>\n",
        "      <td>0.620998</td>\n",
        "      <td>0.033363</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2021-01-13</th>\n",
        "      <td>92396671</td>\n",
        "      <td>33156318</td>\n",
        "      <td>1979198</td>\n",
        "      <td>57261155</td>\n",
        "      <td>0.021421</td>\n",
        "      <td>0.619732</td>\n",
        "      <td>0.033410</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2021-01-14</th>\n",
        "      <td>92558881</td>\n",
        "      <td>33239640</td>\n",
        "      <td>1982777</td>\n",
        "      <td>57336464</td>\n",
        "      <td>0.021422</td>\n",
        "      <td>0.619459</td>\n",
        "      <td>0.033426</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "            Confirmed  Infected    Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                       \n",
        "2021-01-10   90351910  32064315  1939688   56347907             0.021468   \n",
        "2021-01-11   90973985  32415746  1948851   56609388             0.021422   \n",
        "2021-01-12   91663921  32776175  1964657   56923089             0.021433   \n",
        "2021-01-13   92396671  33156318  1979198   57261155             0.021421   \n",
        "2021-01-14   92558881  33239640  1982777   57336464             0.021422   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2021-01-10                 0.623649                        0.033278  \n",
        "2021-01-11                 0.622259                        0.033281  \n",
        "2021-01-12                 0.620998                        0.033363  \n",
        "2021-01-13                 0.619732                        0.033410  \n",
        "2021-01-14                 0.619459                        0.033426  "
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Statistics of rate values in all countries\n",
      "total_df.loc[:, total_df.columns.str.contains(\"per\")].describe().T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>count</th>\n",
        "      <th>mean</th>\n",
        "      <th>std</th>\n",
        "      <th>min</th>\n",
        "      <th>25%</th>\n",
        "      <th>50%</th>\n",
        "      <th>75%</th>\n",
        "      <th>max</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <td>379.0</td>\n",
        "      <td>0.039240</td>\n",
        "      <td>0.017199</td>\n",
        "      <td>0.020428</td>\n",
        "      <td>0.025000</td>\n",
        "      <td>0.034062</td>\n",
        "      <td>0.049154</td>\n",
        "      <td>0.142857</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <td>379.0</td>\n",
        "      <td>0.526409</td>\n",
        "      <td>0.203933</td>\n",
        "      <td>0.022741</td>\n",
        "      <td>0.379748</td>\n",
        "      <td>0.586973</td>\n",
        "      <td>0.656819</td>\n",
        "      <td>0.962963</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "      <td>379.0</td>\n",
        "      <td>0.093589</td>\n",
        "      <td>0.080929</td>\n",
        "      <td>0.024390</td>\n",
        "      <td>0.038190</td>\n",
        "      <td>0.060288</td>\n",
        "      <td>0.124444</td>\n",
        "      <td>0.477778</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "                                count      mean       std       min       25%  \\\n",
        "Fatal per Confirmed             379.0  0.039240  0.017199  0.020428  0.025000   \n",
        "Recovered per Confirmed         379.0  0.526409  0.203933  0.022741  0.379748   \n",
        "Fatal per (Fatal or Recovered)  379.0  0.093589  0.080929  0.024390  0.038190   \n",
        "\n",
        "                                     50%       75%       max  \n",
        "Fatal per Confirmed             0.034062  0.049154  0.142857  \n",
        "Recovered per Confirmed         0.586973  0.656819  0.962963  \n",
        "Fatal per (Fatal or Recovered)  0.060288  0.124444  0.477778  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can create a subset for a country using `JHUData.subset()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "df, _ = jhu_data.records(\"Japan\")\n",
      "df.tail()\n",
      "# We can use ISO3 code etc.\n",
      "# df, _ = jhu_data.records(\"JPN\")\n",
      "# df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>340</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>286752</td>\n",
        "      <td>59745</td>\n",
        "      <td>4044</td>\n",
        "      <td>222963</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>341</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>292212</td>\n",
        "      <td>62722</td>\n",
        "      <td>4094</td>\n",
        "      <td>225396</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>342</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>297315</td>\n",
        "      <td>64097</td>\n",
        "      <td>4145</td>\n",
        "      <td>229073</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>343</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>302623</td>\n",
        "      <td>64725</td>\n",
        "      <td>4233</td>\n",
        "      <td>233665</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>344</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>309214</td>\n",
        "      <td>66432</td>\n",
        "      <td>4315</td>\n",
        "      <td>238467</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "340 2021-01-11     286752     59745   4044     222963\n",
        "341 2021-01-12     292212     62722   4094     225396\n",
        "342 2021-01-13     297315     64097   4145     229073\n",
        "343 2021-01-14     302623     64725   4233     233665\n",
        "344 2021-01-15     309214     66432   4315     238467"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Province (\"prefecture\" for Japan) name can be specified."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df, _ = jhu_data.records(\"Japan\", province=\"Tokyo\")\n",
      "df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>298</th>\n",
        "      <td>2021-01-10</td>\n",
        "      <td>74944</td>\n",
        "      <td>18213</td>\n",
        "      <td>685</td>\n",
        "      <td>56046</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>299</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>76163</td>\n",
        "      <td>18923</td>\n",
        "      <td>689</td>\n",
        "      <td>56551</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>300</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>77133</td>\n",
        "      <td>19029</td>\n",
        "      <td>691</td>\n",
        "      <td>57413</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>301</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>78566</td>\n",
        "      <td>19207</td>\n",
        "      <td>704</td>\n",
        "      <td>58655</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>302</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>80068</td>\n",
        "      <td>19453</td>\n",
        "      <td>707</td>\n",
        "      <td>59908</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "298 2021-01-10      74944     18213    685      56046\n",
        "299 2021-01-11      76163     18923    689      56551\n",
        "300 2021-01-12      77133     19029    691      57413\n",
        "301 2021-01-13      78566     19207    704      58655\n",
        "302 2021-01-14      80068     19453    707      59908"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Countries we can select\n",
      "pprint(jhu_data.countries(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola',\n",
        " 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria',\n",
        " 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus',\n",
        " 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia',\n",
        " 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei', 'Bulgaria',\n",
        " 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cape Verde',\n",
        " 'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros',\n",
        " 'Costa Atlantica', 'Costa Rica', \"Cote d'Ivoire\", 'Croatia', 'Cuba', 'Cyprus',\n",
        " 'Czech Republic', 'Democratic Republic of the Congo', 'Denmark', 'Djibouti',\n",
        " 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador',\n",
        " 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji', 'Finland',\n",
        " 'France', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Grand Princess',\n",
        " 'Greece', 'Grenada', 'Guam', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana',\n",
        " 'Haiti', 'Holy See', 'Honduras', 'Hungary', 'Iceland', 'India', 'Indonesia',\n",
        " 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan',\n",
        " 'Kazakhstan', 'Kenya', 'Kosovo', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia',\n",
        " 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania',\n",
        " 'Luxembourg', 'MS Zaandam', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives',\n",
        " 'Mali', 'Malta', 'Marshall Islands', 'Mauritania', 'Mauritius', 'Mexico',\n",
        " 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Morocco', 'Mozambique',\n",
        " 'Myanmar', 'Namibia', 'Nepal', 'Netherlands', 'New Zealand', 'Nicaragua',\n",
        " 'Niger', 'Nigeria', 'North Macedonia', 'Northern Mariana Islands', 'Norway',\n",
        " 'Oman', 'Pakistan', 'Palestine', 'Panama', 'Papua New Guinea', 'Paraguay',\n",
        " 'Peru', 'Philippines', 'Poland', 'Portugal', 'Puerto Rico', 'Qatar',\n",
        " 'Republic of the Congo', 'Romania', 'Russia', 'Rwanda',\n",
        " 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines',\n",
        " 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal',\n",
        " 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia',\n",
        " 'Solomon Islands', 'Somalia', 'South Africa', 'South Korea', 'South Sudan',\n",
        " 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Swaziland', 'Sweden',\n",
        " 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand',\n",
        " 'Timor-Leste', 'Togo', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Uganda',\n",
        " 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States',\n",
        " 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela', 'Vietnam',\n",
        " 'Virgin Islands, U.S.', 'Yemen', 'Zambia', 'Zimbabwe']\n"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Linelist of case reports\n",
      "The number of cases is important, but linelist of case reports will helpful to understand the situation deeply. Linelist data was saved as `linelist`, an instance of `LinelistData` class. This dataset is from [Open COVID-19 Data Working Group](https://github.com/beoutbreakprepared/nCoV2019)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(linelist)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "covsirphy.cleaning.linelist.LinelistData"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Citation\n",
      "print(linelist.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Xu, B., Gutierrez, B., Mekaru, S. et al. Epidemiological data from the COVID-19 outbreak, real-time case information. Sci Data 7, 106 (2020). https://doi.org/10.1038/s41597-020-0448-0\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw dataset\n",
      "linelist.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>age</th>\n",
        "      <th>sex</th>\n",
        "      <th>province</th>\n",
        "      <th>country</th>\n",
        "      <th>date_admission_hospital</th>\n",
        "      <th>date_confirmation</th>\n",
        "      <th>symptoms</th>\n",
        "      <th>chronic_disease</th>\n",
        "      <th>outcome</th>\n",
        "      <th>date_death_or_discharge</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Callao</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676311</th>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "         age     sex province country date_admission_hospital  \\\n",
        "2676307   52  female     Lima    Peru                     NaN   \n",
        "2676308   52  female     Lima    Peru                     NaN   \n",
        "2676309   52    male   Callao    Peru                     NaN   \n",
        "2676310   52    male     Lima    Peru                     NaN   \n",
        "2676311  NaN     NaN      NaN     NaN                     NaN   \n",
        "\n",
        "        date_confirmation symptoms chronic_disease outcome  \\\n",
        "2676307        17.05.2020      NaN             NaN     NaN   \n",
        "2676308        17.05.2020      NaN             NaN     NaN   \n",
        "2676309        17.05.2020      NaN             NaN     NaN   \n",
        "2676310        17.05.2020      NaN             NaN     NaN   \n",
        "2676311               NaN      NaN             NaN     NaN   \n",
        "\n",
        "        date_death_or_discharge  \n",
        "2676307                     NaN  \n",
        "2676308                     NaN  \n",
        "2676309                     NaN  \n",
        "2676310                     NaN  \n",
        "2676311                     NaN  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned dataset\n",
      "linelist.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676306</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Coronel Portillo</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Callao</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "        Country          Province Hospitalized_date Confirmation_date  \\\n",
        "2676306    Peru  Coronel Portillo               NaT        2020-05-17   \n",
        "2676307    Peru              Lima               NaT        2020-05-17   \n",
        "2676308    Peru              Lima               NaT        2020-05-17   \n",
        "2676309    Peru            Callao               NaT        2020-05-17   \n",
        "2676310    Peru              Lima               NaT        2020-05-17   \n",
        "\n",
        "        Outcome_date  Confirmed  Infected  Recovered  Fatal Symptoms  \\\n",
        "2676306          NaT       True     False      False  False      NaN   \n",
        "2676307          NaT       True     False      False  False      NaN   \n",
        "2676308          NaT       True     False      False  False      NaN   \n",
        "2676309          NaT       True     False      False  False      NaN   \n",
        "2676310          NaT       True     False      False  False      NaN   \n",
        "\n",
        "        Chronic_disease   Age     Sex  \n",
        "2676306             NaN  52.0  female  \n",
        "2676307             NaN  52.0  female  \n",
        "2676308             NaN  52.0  female  \n",
        "2676309             NaN  52.0    male  \n",
        "2676310             NaN  52.0    male  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for specified area\n",
      "linelist.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>107</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-30</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>108</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-24</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:pneumonia:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>109</th>\n",
        "      <td>2020-10-01</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>30.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>110</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>111</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-26</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:joint pain:pneumonia</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "    Hospitalized_date Confirmation_date Outcome_date  Confirmed  Infected  \\\n",
        "107               NaT        2020-01-30          NaT       True     False   \n",
        "108               NaT        2020-01-24          NaT       True     False   \n",
        "109        2020-10-01        2020-01-15   2020-01-15       True     False   \n",
        "110               NaT        2020-01-25          NaT       True     False   \n",
        "111               NaT        2020-01-26          NaT       True     False   \n",
        "\n",
        "     Recovered  Fatal                     Symptoms Chronic_disease   Age  \\\n",
        "107      False  False                          NaN             NaN   NaN   \n",
        "108       True  False  fever:pneumonia:sore throat             NaN  40.0   \n",
        "109       True  False      cough:fever:sore throat             NaN  30.0   \n",
        "110      False  False                  cough:fever             NaN   NaN   \n",
        "111      False  False   fever:joint pain:pneumonia             NaN  40.0   \n",
        "\n",
        "        Sex  \n",
        "107  female  \n",
        "108    male  \n",
        "109    male  \n",
        "110  female  \n",
        "111    male  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for outcome (\"Recovered\" or \"Fatal\")\n",
      "linelist.closed(outcome=\"Recovered\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Recovered_date</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>272</th>\n",
        "      <td>Singapore</td>\n",
        "      <td>-</td>\n",
        "      <td>2020-02-02</td>\n",
        "      <td>2020-02-06</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>39.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>273</th>\n",
        "      <td>Malaysia</td>\n",
        "      <td>Johor</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>274</th>\n",
        "      <td>China</td>\n",
        "      <td>Gansu</td>\n",
        "      <td>2020-07-02</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>diarrhea</td>\n",
        "      <td>NaN</td>\n",
        "      <td>1.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>275</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>NaN</td>\n",
        "      <td>hypertension</td>\n",
        "      <td>NaN</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>276</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>2020-02-19</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "       Country Province Hospitalized_date Confirmation_date Recovered_date  \\\n",
        "272  Singapore        -        2020-02-02        2020-02-06     2020-02-17   \n",
        "273   Malaysia    Johor               NaT        2020-01-25     2020-02-08   \n",
        "274      China    Gansu        2020-07-02        2020-02-08     2020-02-17   \n",
        "275     Canada  Ontario               NaT        2020-01-25     2020-01-31   \n",
        "276     Canada  Ontario               NaT        2020-01-31     2020-02-19   \n",
        "\n",
        "        Symptoms Chronic_disease   Age     Sex  \n",
        "272          NaN             NaN  39.0  female  \n",
        "273  cough:fever             NaN  40.0    male  \n",
        "274     diarrhea             NaN   1.0  female  \n",
        "275          NaN    hypertension   NaN    male  \n",
        "276          NaN             NaN   NaN  female  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "As the median value of the period from confirmation to recovery, we can calculate recovery period."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Recovery period (integer) [days]\n",
      "linelist.recovery_period()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "12"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Population in each country\n",
      "Population values are necessary to calculate the number of susceptible people. Susceptible is a variable of SIR-derived models. This dataset was saved as `population_data`, an instance of `PopulationData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(population_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "covsirphy.cleaning.population.PopulationData"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>331355</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-10</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>331356</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>331357</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>331358</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>331359</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "331355  COL  Colombia  Vichada 2021-01-10      107808\n",
        "331356  COL  Colombia  Vichada 2021-01-11      107808\n",
        "331357  COL  Colombia  Vichada 2021-01-12      107808\n",
        "331358  COL  Colombia  Vichada 2021-01-13      107808\n",
        "331359  COL  Colombia  Vichada 2021-01-14      107808"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We will get the population values with `PopulationData.value()`."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# In a country\n",
      "population_data.value(\"Japan\", province=None)\n",
      "# In a country with ISO3 code\n",
      "# population_data.value(\"JPN\", province=None)\n",
      "# In a province (prefecture)\n",
      "# population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 30,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can update the population values."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Before\n",
      "population_before = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\"Before: {population_before}\")\n",
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_after = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\" After: {population_after}\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Before: 13942856\n",
        " After: 14002973\n"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Government Response Tracker (OxCGRT)\n",
      "Government responses are tracked with [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker). Because government responses and activities of persons change the parameter values of SIR-derived models, this dataset is significant when we try to forcast the number of cases.  \n",
      "With `DataLoader` class, the dataset was retrieved via [COVID-19 Data Hub](https://covid19datahub.io/) and saved as `oxcgrt_data`, an instance of `OxCGRTData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(oxcgrt_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "covsirphy.cleaning.oxcgrt.OxCGRTData"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>392155</th>\n",
        "      <td>2021-01-10</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>392156</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>392157</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>392158</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>392159</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "392155 2021-01-10  Colombia  COL               3                  1   \n",
        "392156 2021-01-11  Colombia  COL               3                  1   \n",
        "392157 2021-01-12  Colombia  COL               3                  1   \n",
        "392158 2021-01-13  Colombia  COL               3                  1   \n",
        "392159 2021-01-14  Colombia  COL               3                  1   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "392155              1                        3                  1   \n",
        "392156              1                        3                  1   \n",
        "392157              1                        3                  1   \n",
        "392158              1                        3                  1   \n",
        "392159              1                        3                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "392155                       1                               1   \n",
        "392156                       1                               1   \n",
        "392157                       1                               1   \n",
        "392158                       1                               1   \n",
        "392159                       1                               1   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "392155                                    4                      2   \n",
        "392156                                    4                      2   \n",
        "392157                                    4                      2   \n",
        "392158                                    4                      2   \n",
        "392159                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "392155               2                2             81.02  \n",
        "392156               2                2             81.02  \n",
        "392157               2                2             81.02  \n",
        "392158               2                2             81.02  \n",
        "392159               2                2             81.02  "
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>375</th>\n",
        "      <td>2021-01-10</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>376</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>377</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>378</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>379</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "375 2021-01-10               1                  1              1   \n",
        "376 2021-01-11               1                  1              1   \n",
        "377 2021-01-12               1                  1              1   \n",
        "378 2021-01-13               1                  1              1   \n",
        "379 2021-01-14               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "375                        0                  1                       1   \n",
        "376                        0                  1                       1   \n",
        "377                        0                  1                       1   \n",
        "378                        0                  1                       1   \n",
        "379                        0                  1                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "375                               1                                    4   \n",
        "376                               1                                    4   \n",
        "377                               1                                    4   \n",
        "378                               1                                    4   \n",
        "379                               1                                    4   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "375                      2               3                2             55.09  \n",
        "376                      2               3                2             55.09  \n",
        "377                      2               3                2             55.09  \n",
        "378                      2               3                2             55.09  \n",
        "379                      2               3                2             55.09  "
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of tests\n",
      "The number of tests is also key information to understand the situation.\n",
      "This dataset was saved as `pcr_data`, an instance of `PCRData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(pcr_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 37,
       "text": [
        "covsirphy.cleaning.pcr_data.PCRData"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(pcr_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# pcr_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 39
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "pcr_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14926</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5419086</td>\n",
        "      <td>286752</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14927</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5442315</td>\n",
        "      <td>292212</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14928</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5531305</td>\n",
        "      <td>297315</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14929</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5615256</td>\n",
        "      <td>302623</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14930</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5718894</td>\n",
        "      <td>309214</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 40,
       "text": [
        "            Date Country Province    Tests  Confirmed\n",
        "14926 2021-01-11   Japan        -  5419086     286752\n",
        "14927 2021-01-12   Japan        -  5442315     292212\n",
        "14928 2021-01-13   Japan        -  5531305     297315\n",
        "14929 2021-01-14   Japan        -  5615256     302623\n",
        "14930 2021-01-15   Japan        -  5718894     309214"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "pcr_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# pcr_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 41,
       "text": [
        "Empty DataFrame\n",
        "Columns: [Date, Tests, Confirmed]\n",
        "Index: []"
       ]
      }
     ],
     "prompt_number": 41
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Under the assumption that all tests were PCR test, we can calculate the positive rate of PCR tests as \"the number of confirmed cases per the number of tests\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Positive rate in Japan\n",
      "_ = pcr_data.positive_rate(\"Japan\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 42
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of vaccinations\n",
      "The number of vaccinations is a key factor to end the outbreak as soon as possible. This dataset was saved as `vaccine_data`, an instance of `VaccineData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# The number of vaccinations\n",
      "type(vaccine_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 43,
       "text": [
        "covsirphy.cleaning.vaccine_data.VaccineData"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(vaccine_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n"
       ]
      }
     ],
     "prompt_number": 44
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "# vaccine_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 45
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "vaccine_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Product</th>\n",
        "      <th>Vaccinations</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>842</th>\n",
        "      <td>2021-01-09</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>49683</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>843</th>\n",
        "      <td>2021-01-10</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>86118</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>844</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>91336</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>845</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>101479</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>846</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>113094</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 46,
       "text": [
        "          Date Country                              Product  Vaccinations\n",
        "842 2021-01-09   Wales  Oxford/AstraZeneca, Pfizer/BioNTech         49683\n",
        "843 2021-01-10   Wales  Oxford/AstraZeneca, Pfizer/BioNTech         86118\n",
        "844 2021-01-11   Wales  Oxford/AstraZeneca, Pfizer/BioNTech         91336\n",
        "845 2021-01-12   Wales  Oxford/AstraZeneca, Pfizer/BioNTech        101479\n",
        "846 2021-01-13   Wales  Oxford/AstraZeneca, Pfizer/BioNTech        113094"
       ]
      }
     ],
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Registered countries\n",
      "vaccine_data.countries()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 47,
       "text": [
        "['Argentina',\n",
        " 'Austria',\n",
        " 'Bahrain',\n",
        " 'Belgium',\n",
        " 'Bulgaria',\n",
        " 'Canada',\n",
        " 'Chile',\n",
        " 'China',\n",
        " 'Costa Rica',\n",
        " 'Croatia',\n",
        " 'Cyprus',\n",
        " 'Czechia',\n",
        " 'Denmark',\n",
        " 'England',\n",
        " 'Estonia',\n",
        " 'Finland',\n",
        " 'France',\n",
        " 'Germany',\n",
        " 'Gibraltar',\n",
        " 'Greece',\n",
        " 'Guinea',\n",
        " 'Hungary',\n",
        " 'Iceland',\n",
        " 'Ireland',\n",
        " 'Israel',\n",
        " 'Italy',\n",
        " 'Kuwait',\n",
        " 'Latvia',\n",
        " 'Lithuania',\n",
        " 'Luxembourg',\n",
        " 'Malta',\n",
        " 'Mexico',\n",
        " 'Netherlands',\n",
        " 'Northern Ireland',\n",
        " 'Norway',\n",
        " 'Oman',\n",
        " 'Poland',\n",
        " 'Portugal',\n",
        " 'Romania',\n",
        " 'Russia',\n",
        " 'Saudi Arabia',\n",
        " 'Scotland',\n",
        " 'Serbia',\n",
        " 'Singapore',\n",
        " 'Slovakia',\n",
        " 'Slovenia',\n",
        " 'Spain',\n",
        " 'Sweden',\n",
        " 'Switzerland',\n",
        " 'Turkey',\n",
        " 'United Arab Emirates',\n",
        " 'United Kingdom',\n",
        " 'United States',\n",
        " 'Wales']"
       ]
      }
     ],
     "prompt_number": 47
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "vaccine_data.subset(\"United Kingdom\").tail()\n",
      "# We can use ISO3 codes\n",
      "# pcr_data.subset(\"GBR\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Vaccinations</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>20</th>\n",
        "      <td>2021-01-09</td>\n",
        "      <td>1365129</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>21</th>\n",
        "      <td>2021-01-10</td>\n",
        "      <td>2677971</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>22</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>2843815</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>23</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>3067541</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>24</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>3356229</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 48,
       "text": [
        "         Date  Vaccinations\n",
        "20 2021-01-09       1365129\n",
        "21 2021-01-10       2677971\n",
        "22 2021-01-11       2843815\n",
        "23 2021-01-12       3067541\n",
        "24 2021-01-13       3356229"
       ]
      }
     ],
     "prompt_number": 48
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Population pyramid\n",
      "With population pyramid, we can divide the population to sub-groups. This will be useful when we analyse the meaning of parameters. For example, how many days go out is different between the sub-groups.\n",
      "This dataset was saved as `pyramid_data`, an instance of `PopulationPyramidData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Population pyramid\n",
      "type(pyramid_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 49,
       "text": [
        "covsirphy.cleaning.pyramid.PopulationPyramidData"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(pyramid_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "World Bank Group (2020), World Bank Open Data, https://data.worldbank.org/\n"
       ]
      }
     ],
     "prompt_number": 50
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset will retrieved from the server when set\n",
      "pyramid_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving population pyramid dataset (Japan) from https://data.worldbank.org/\n"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Age</th>\n",
        "      <th>Population</th>\n",
        "      <th>Per_total</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>113</th>\n",
        "      <td>118</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>114</th>\n",
        "      <td>119</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>115</th>\n",
        "      <td>120</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>116</th>\n",
        "      <td>121</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>117</th>\n",
        "      <td>122</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 51,
       "text": [
        "     Age  Population  Per_total\n",
        "113  118      255035   0.002174\n",
        "114  119      255035   0.002174\n",
        "115  120      255035   0.002174\n",
        "116  121      255035   0.002174\n",
        "117  122      255035   0.002174"
       ]
      }
     ],
     "prompt_number": 51
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Japan-specific dataset\n",
      "This includes the number of confirmed/infected/fatal/recovered/tests/moderate/severe cases at country/prefecture level and metadata of each prefecture.\n",
      "This dataset was saved as `japan_data`, an instance of `JapanData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Japan-specific dataset\n",
      "type(japan_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 52,
       "text": [
        "covsirphy.cleaning.japan_data.JapanData"
       ]
      }
     ],
     "prompt_number": 52
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 53
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned dataset\n",
      "japan_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Moderate</th>\n",
        "      <th>Severe</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14926</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>286752</td>\n",
        "      <td>59745</td>\n",
        "      <td>4044</td>\n",
        "      <td>222963</td>\n",
        "      <td>5419086</td>\n",
        "      <td>57905</td>\n",
        "      <td>864</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14927</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>292212</td>\n",
        "      <td>62722</td>\n",
        "      <td>4094</td>\n",
        "      <td>225396</td>\n",
        "      <td>5442315</td>\n",
        "      <td>60717</td>\n",
        "      <td>881</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14928</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>297315</td>\n",
        "      <td>64097</td>\n",
        "      <td>4145</td>\n",
        "      <td>229073</td>\n",
        "      <td>5531305</td>\n",
        "      <td>62173</td>\n",
        "      <td>900</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14929</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>302623</td>\n",
        "      <td>64725</td>\n",
        "      <td>4233</td>\n",
        "      <td>233665</td>\n",
        "      <td>5615256</td>\n",
        "      <td>62859</td>\n",
        "      <td>920</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14930</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>309214</td>\n",
        "      <td>66432</td>\n",
        "      <td>4315</td>\n",
        "      <td>238467</td>\n",
        "      <td>5718894</td>\n",
        "      <td>64316</td>\n",
        "      <td>934</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 54,
       "text": [
        "            Date Country Province  Confirmed  Infected  Fatal  Recovered  \\\n",
        "14926 2021-01-11   Japan        -     286752     59745   4044     222963   \n",
        "14927 2021-01-12   Japan        -     292212     62722   4094     225396   \n",
        "14928 2021-01-13   Japan        -     297315     64097   4145     229073   \n",
        "14929 2021-01-14   Japan        -     302623     64725   4233     233665   \n",
        "14930 2021-01-15   Japan        -     309214     66432   4315     238467   \n",
        "\n",
        "         Tests  Moderate  Severe  \n",
        "14926  5419086     57905     864  \n",
        "14927  5442315     60717     881  \n",
        "14928  5531305     62173     900  \n",
        "14929  5615256     62859     920  \n",
        "14930  5718894     64316     934  "
       ]
      }
     ],
     "prompt_number": 54
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Metadata\n",
      "japan_data.meta().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving Metadata of Japan dataset from https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Prefecture</th>\n",
        "      <th>Admin_Capital</th>\n",
        "      <th>Admin_Region</th>\n",
        "      <th>Admin_Num</th>\n",
        "      <th>Area_Habitable</th>\n",
        "      <th>Area_Total</th>\n",
        "      <th>Clinic_bed_Care</th>\n",
        "      <th>Clinic_bed_Total</th>\n",
        "      <th>Hospital_bed_Care</th>\n",
        "      <th>Hospital_bed_Specific</th>\n",
        "      <th>Hospital_bed_Total</th>\n",
        "      <th>Hospital_bed_Tuberculosis</th>\n",
        "      <th>Hospital_bed_Type-I</th>\n",
        "      <th>Hospital_bed_Type-II</th>\n",
        "      <th>Population_Female</th>\n",
        "      <th>Population_Male</th>\n",
        "      <th>Population_Total</th>\n",
        "      <th>Location_Latitude</th>\n",
        "      <th>Location_Longitude</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>42</th>\n",
        "      <td>Kumamoto</td>\n",
        "      <td>Kumamoto</td>\n",
        "      <td>Kyushu</td>\n",
        "      <td>43</td>\n",
        "      <td>2796</td>\n",
        "      <td>7409</td>\n",
        "      <td>497</td>\n",
        "      <td>4628</td>\n",
        "      <td>8340</td>\n",
        "      <td>0</td>\n",
        "      <td>33710</td>\n",
        "      <td>95</td>\n",
        "      <td>2</td>\n",
        "      <td>46</td>\n",
        "      <td>933</td>\n",
        "      <td>833</td>\n",
        "      <td>1765</td>\n",
        "      <td>32.790513</td>\n",
        "      <td>130.742388</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>43</th>\n",
        "      <td>Oita</td>\n",
        "      <td>Oita</td>\n",
        "      <td>Kyushu</td>\n",
        "      <td>44</td>\n",
        "      <td>1799</td>\n",
        "      <td>6341</td>\n",
        "      <td>269</td>\n",
        "      <td>3561</td>\n",
        "      <td>2618</td>\n",
        "      <td>0</td>\n",
        "      <td>19834</td>\n",
        "      <td>50</td>\n",
        "      <td>2</td>\n",
        "      <td>38</td>\n",
        "      <td>607</td>\n",
        "      <td>546</td>\n",
        "      <td>1152</td>\n",
        "      <td>33.238391</td>\n",
        "      <td>131.612658</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>44</th>\n",
        "      <td>Miyazaki</td>\n",
        "      <td>Miyazaki</td>\n",
        "      <td>Kyushu</td>\n",
        "      <td>45</td>\n",
        "      <td>1850</td>\n",
        "      <td>7735</td>\n",
        "      <td>206</td>\n",
        "      <td>2357</td>\n",
        "      <td>3682</td>\n",
        "      <td>0</td>\n",
        "      <td>18769</td>\n",
        "      <td>33</td>\n",
        "      <td>1</td>\n",
        "      <td>30</td>\n",
        "      <td>577</td>\n",
        "      <td>512</td>\n",
        "      <td>1089</td>\n",
        "      <td>31.911188</td>\n",
        "      <td>131.423873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>45</th>\n",
        "      <td>Kagoshima</td>\n",
        "      <td>Kagoshima</td>\n",
        "      <td>Kyushu</td>\n",
        "      <td>46</td>\n",
        "      <td>3313</td>\n",
        "      <td>9187</td>\n",
        "      <td>652</td>\n",
        "      <td>4827</td>\n",
        "      <td>7750</td>\n",
        "      <td>0</td>\n",
        "      <td>32651</td>\n",
        "      <td>98</td>\n",
        "      <td>1</td>\n",
        "      <td>44</td>\n",
        "      <td>863</td>\n",
        "      <td>763</td>\n",
        "      <td>1626</td>\n",
        "      <td>31.560052</td>\n",
        "      <td>130.557745</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>46</th>\n",
        "      <td>Okinawa</td>\n",
        "      <td>Naha</td>\n",
        "      <td>Okinawa</td>\n",
        "      <td>47</td>\n",
        "      <td>1169</td>\n",
        "      <td>2281</td>\n",
        "      <td>83</td>\n",
        "      <td>914</td>\n",
        "      <td>3804</td>\n",
        "      <td>0</td>\n",
        "      <td>18710</td>\n",
        "      <td>47</td>\n",
        "      <td>4</td>\n",
        "      <td>20</td>\n",
        "      <td>734</td>\n",
        "      <td>709</td>\n",
        "      <td>1443</td>\n",
        "      <td>26.211761</td>\n",
        "      <td>127.681119</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 55,
       "text": [
        "   Prefecture Admin_Capital Admin_Region  Admin_Num  Area_Habitable  \\\n",
        "42   Kumamoto      Kumamoto       Kyushu         43            2796   \n",
        "43       Oita          Oita       Kyushu         44            1799   \n",
        "44   Miyazaki      Miyazaki       Kyushu         45            1850   \n",
        "45  Kagoshima     Kagoshima       Kyushu         46            3313   \n",
        "46    Okinawa          Naha      Okinawa         47            1169   \n",
        "\n",
        "    Area_Total  Clinic_bed_Care  Clinic_bed_Total  Hospital_bed_Care  \\\n",
        "42        7409              497              4628               8340   \n",
        "43        6341              269              3561               2618   \n",
        "44        7735              206              2357               3682   \n",
        "45        9187              652              4827               7750   \n",
        "46        2281               83               914               3804   \n",
        "\n",
        "    Hospital_bed_Specific  Hospital_bed_Total  Hospital_bed_Tuberculosis  \\\n",
        "42                      0               33710                         95   \n",
        "43                      0               19834                         50   \n",
        "44                      0               18769                         33   \n",
        "45                      0               32651                         98   \n",
        "46                      0               18710                         47   \n",
        "\n",
        "    Hospital_bed_Type-I  Hospital_bed_Type-II  Population_Female  \\\n",
        "42                    2                    46                933   \n",
        "43                    2                    38                607   \n",
        "44                    1                    30                577   \n",
        "45                    1                    44                863   \n",
        "46                    4                    20                734   \n",
        "\n",
        "    Population_Male  Population_Total  Location_Latitude  Location_Longitude  \n",
        "42              833              1765          32.790513          130.742388  \n",
        "43              546              1152          33.238391          131.612658  \n",
        "44              512              1089          31.911188          131.423873  \n",
        "45              763              1626          31.560052          130.557745  \n",
        "46              709              1443          26.211761          127.681119  "
       ]
      }
     ],
     "prompt_number": 55
    }
   ],
   "metadata": {}
  }
 ]
}
