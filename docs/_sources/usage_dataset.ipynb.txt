{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.1 64-bit ('.venv')",
   "metadata": {
    "interpreter": {
     "hash": "aa53c8c6e6798222a2084c11cc25017700a8d3ad495b587e3a634f357767115f"
    }
   },
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage: datasets\n",
      "Here, we will review the raw/cleaned datasets. `Scenario` class performs data cleaning internally using `JHUData` class and so on, but it is important to review the features and data types before analysing them."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Preparation\n",
      "Prepare the packages."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "'2.14.0-lambda'"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Dataset preparation\n",
      "Download the datasets to \"input\" directory and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` instance will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically and download the datasets to \"input\" directory and load them."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create DataLoader instance\n",
      "data_loader = cs.DataLoader(\"input\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# (Main) The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu()\n",
      "# (Main) Population in each country\n",
      "population_data = data_loader.population()\n",
      "# (Main) Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt()\n",
      "# Linelist of case reports\n",
      "linelist = data_loader.linelist()\n",
      "# The number of tests\n",
      "pcr_data = data_loader.pcr()\n",
      "# The number of vaccinations\n",
      "vaccine_data = data_loader.vaccine()\n",
      "# Population pyramid\n",
      "pyramid_data = data_loader.pyramid()\n",
      "# Japan-specific dataset\n",
      "japan_data = data_loader.japan()"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving linelist from Open COVID-19 Data Working Group repository: https://github.com/beoutbreakprepared/nCoV2019\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving COVID-19 vaccination dataset from https://covid.ourworldindata.org/data/\n"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of cases (JHU style)\n",
      "The main dataset is that of the number of cases and was saved as `jhu_data`, an instance of `JHUData` class. This includes \"Confirmed\", \"Infected\", \"Recovered\" and \"Fatal\". \"Infected\" was calculated as \"Confirmed - Recovered - Fatal\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(jhu_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 7,
       "text": [
        "covsirphy.cleaning.jhu_data.JHUData"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The dataset will be retrieved from [COVID-19 Data Hub](https://covid19datahub.io/) and [Data folder of CovsirPhy project](https://github.com/lisphilar/covid19-sir/tree/master/data). Description of these projects will be shown as follows."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Detailed citation list of COVID-19 Data Hub\n",
      "# print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>...</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>390655</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>5107</td>\n",
        "      <td>1174.0</td>\n",
        "      <td>1146</td>\n",
        "      <td>17</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>390656</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>5107</td>\n",
        "      <td>1175.0</td>\n",
        "      <td>1146</td>\n",
        "      <td>17</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>390657</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>5107</td>\n",
        "      <td>1176.0</td>\n",
        "      <td>1146</td>\n",
        "      <td>17</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>390658</th>\n",
        "      <td>2021-01-16</td>\n",
        "      <td>5107</td>\n",
        "      <td>1182.0</td>\n",
        "      <td>1147</td>\n",
        "      <td>17</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>390659</th>\n",
        "      <td>2021-01-17</td>\n",
        "      <td>5107</td>\n",
        "      <td>1182.0</td>\n",
        "      <td>1147</td>\n",
        "      <td>17</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 21 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "       ObservationDate  Tests  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "390655      2021-01-13   5107     1174.0       1146      17    107808.0  COL   \n",
        "390656      2021-01-14   5107     1175.0       1146      17    107808.0  COL   \n",
        "390657      2021-01-15   5107     1176.0       1146      17    107808.0  COL   \n",
        "390658      2021-01-16   5107     1182.0       1147      17    107808.0  COL   \n",
        "390659      2021-01-17   5107     1182.0       1147      17    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  ...  cancel_events  \\\n",
        "390655        Vichada       Colombia               3  ...              1   \n",
        "390656        Vichada       Colombia               3  ...              1   \n",
        "390657        Vichada       Colombia               3  ...              1   \n",
        "390658        Vichada       Colombia               3  ...              1   \n",
        "390659        Vichada       Colombia               3  ...              1   \n",
        "\n",
        "        gatherings_restrictions  transport_closing  stay_home_restrictions  \\\n",
        "390655                        3                  1                       1   \n",
        "390656                        3                  1                       1   \n",
        "390657                        3                  1                       1   \n",
        "390658                        3                  1                       1   \n",
        "390659                        3                  1                       1   \n",
        "\n",
        "        internal_movement_restrictions  international_movement_restrictions  \\\n",
        "390655                               1                                    4   \n",
        "390656                               1                                    4   \n",
        "390657                               1                                    4   \n",
        "390658                               1                                    4   \n",
        "390659                               1                                    4   \n",
        "\n",
        "        information_campaigns  testing_policy  contact_tracing  \\\n",
        "390655                      2               2                2   \n",
        "390656                      2               2                2   \n",
        "390657                      2               2                2   \n",
        "390658                      2               2                2   \n",
        "390659                      2               2                2   \n",
        "\n",
        "        stringency_index  \n",
        "390655             81.02  \n",
        "390656             81.02  \n",
        "390657             81.02  \n",
        "390658             81.02  \n",
        "390659             81.02  \n",
        "\n",
        "[5 rows x 21 columns]"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14975</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>292212</td>\n",
        "      <td>62722</td>\n",
        "      <td>4094</td>\n",
        "      <td>225396</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14976</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>297315</td>\n",
        "      <td>64097</td>\n",
        "      <td>4145</td>\n",
        "      <td>229073</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14977</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>302623</td>\n",
        "      <td>64725</td>\n",
        "      <td>4233</td>\n",
        "      <td>233665</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14978</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>309214</td>\n",
        "      <td>66432</td>\n",
        "      <td>4315</td>\n",
        "      <td>238467</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14979</th>\n",
        "      <td>2021-01-16</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>315910</td>\n",
        "      <td>67557</td>\n",
        "      <td>4380</td>\n",
        "      <td>243973</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "            Date Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "14975 2021-01-12   Japan        -     292212     62722   4094     225396\n",
        "14976 2021-01-13   Japan        -     297315     64097   4145     229073\n",
        "14977 2021-01-14   Japan        -     302623     64725   4233     233665\n",
        "14978 2021-01-15   Japan        -     309214     66432   4315     238467\n",
        "14979 2021-01-16   Japan        -     315910     67557   4380     243973"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.cleaned().info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 374617 entries, 0 to 14979\n",
        "Data columns (total 7 columns):\n",
        " #   Column     Non-Null Count   Dtype         \n",
        "---  ------     --------------   -----         \n",
        " 0   Date       374617 non-null  datetime64[ns]\n",
        " 1   Country    374617 non-null  category      \n",
        " 2   Province   374617 non-null  category      \n",
        " 3   Confirmed  374617 non-null  int64         \n",
        " 4   Infected   374617 non-null  int64         \n",
        " 5   Fatal      374617 non-null  int64         \n",
        " 6   Recovered  374617 non-null  int64         \n",
        "dtypes: category(2), datetime64[ns](1), int64(4)\n",
        "memory usage: 18.6 MB\n"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Total number of cases in all countries with `JHUData.total()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Calculate total values\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2021-01-13</th>\n",
        "      <td>92416334</td>\n",
        "      <td>33132912</td>\n",
        "      <td>1982191</td>\n",
        "      <td>57301231</td>\n",
        "      <td>0.021448</td>\n",
        "      <td>0.620034</td>\n",
        "      <td>0.033436</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2021-01-14</th>\n",
        "      <td>93164887</td>\n",
        "      <td>33526476</td>\n",
        "      <td>1996095</td>\n",
        "      <td>57642316</td>\n",
        "      <td>0.021425</td>\n",
        "      <td>0.618713</td>\n",
        "      <td>0.033470</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2021-01-15</th>\n",
        "      <td>93916633</td>\n",
        "      <td>33948503</td>\n",
        "      <td>2010002</td>\n",
        "      <td>57958128</td>\n",
        "      <td>0.021402</td>\n",
        "      <td>0.617123</td>\n",
        "      <td>0.033518</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2021-01-16</th>\n",
        "      <td>94070014</td>\n",
        "      <td>34001821</td>\n",
        "      <td>2013166</td>\n",
        "      <td>58055027</td>\n",
        "      <td>0.021401</td>\n",
        "      <td>0.617147</td>\n",
        "      <td>0.033515</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2021-01-17</th>\n",
        "      <td>93754478</td>\n",
        "      <td>33934528</td>\n",
        "      <td>2008787</td>\n",
        "      <td>57811163</td>\n",
        "      <td>0.021426</td>\n",
        "      <td>0.616623</td>\n",
        "      <td>0.033581</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "            Confirmed  Infected    Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                       \n",
        "2021-01-13   92416334  33132912  1982191   57301231             0.021448   \n",
        "2021-01-14   93164887  33526476  1996095   57642316             0.021425   \n",
        "2021-01-15   93916633  33948503  2010002   57958128             0.021402   \n",
        "2021-01-16   94070014  34001821  2013166   58055027             0.021401   \n",
        "2021-01-17   93754478  33934528  2008787   57811163             0.021426   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2021-01-13                 0.620034                        0.033436  \n",
        "2021-01-14                 0.618713                        0.033470  \n",
        "2021-01-15                 0.617123                        0.033518  \n",
        "2021-01-16                 0.617147                        0.033515  \n",
        "2021-01-17                 0.616623                        0.033581  "
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Statistics of rate values in all countries\n",
      "total_df.loc[:, total_df.columns.str.contains(\"per\")].describe().T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>count</th>\n",
        "      <th>mean</th>\n",
        "      <th>std</th>\n",
        "      <th>min</th>\n",
        "      <th>25%</th>\n",
        "      <th>50%</th>\n",
        "      <th>75%</th>\n",
        "      <th>max</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <td>382.0</td>\n",
        "      <td>0.036939</td>\n",
        "      <td>0.018172</td>\n",
        "      <td>0.000000</td>\n",
        "      <td>0.023988</td>\n",
        "      <td>0.033243</td>\n",
        "      <td>0.047798</td>\n",
        "      <td>0.074106</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <td>382.0</td>\n",
        "      <td>0.521883</td>\n",
        "      <td>0.193418</td>\n",
        "      <td>0.024019</td>\n",
        "      <td>0.381164</td>\n",
        "      <td>0.590543</td>\n",
        "      <td>0.656480</td>\n",
        "      <td>0.884615</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "      <td>382.0</td>\n",
        "      <td>0.090220</td>\n",
        "      <td>0.080285</td>\n",
        "      <td>0.000000</td>\n",
        "      <td>0.036948</td>\n",
        "      <td>0.058765</td>\n",
        "      <td>0.122707</td>\n",
        "      <td>0.462162</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "                                count      mean       std       min       25%  \\\n",
        "Fatal per Confirmed             382.0  0.036939  0.018172  0.000000  0.023988   \n",
        "Recovered per Confirmed         382.0  0.521883  0.193418  0.024019  0.381164   \n",
        "Fatal per (Fatal or Recovered)  382.0  0.090220  0.080285  0.000000  0.036948   \n",
        "\n",
        "                                     50%       75%       max  \n",
        "Fatal per Confirmed             0.033243  0.047798  0.074106  \n",
        "Recovered per Confirmed         0.590543  0.656480  0.884615  \n",
        "Fatal per (Fatal or Recovered)  0.058765  0.122707  0.462162  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can create a subset for a country using `JHUData.subset()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "df, _ = jhu_data.records(\"Japan\")\n",
      "df.tail()\n",
      "# We can use ISO3 code etc.\n",
      "# df, _ = jhu_data.records(\"JPN\")\n",
      "# df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>341</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>292212</td>\n",
        "      <td>62722</td>\n",
        "      <td>4094</td>\n",
        "      <td>225396</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>342</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>297315</td>\n",
        "      <td>64097</td>\n",
        "      <td>4145</td>\n",
        "      <td>229073</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>343</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>302623</td>\n",
        "      <td>64725</td>\n",
        "      <td>4233</td>\n",
        "      <td>233665</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>344</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>309214</td>\n",
        "      <td>66432</td>\n",
        "      <td>4315</td>\n",
        "      <td>238467</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>345</th>\n",
        "      <td>2021-01-16</td>\n",
        "      <td>315910</td>\n",
        "      <td>67557</td>\n",
        "      <td>4380</td>\n",
        "      <td>243973</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "341 2021-01-12     292212     62722   4094     225396\n",
        "342 2021-01-13     297315     64097   4145     229073\n",
        "343 2021-01-14     302623     64725   4233     233665\n",
        "344 2021-01-15     309214     66432   4315     238467\n",
        "345 2021-01-16     315910     67557   4380     243973"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Province (\"prefecture\" for Japan) name can be specified."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df, _ = jhu_data.records(\"Japan\", province=\"Tokyo\")\n",
      "df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>299</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>76163</td>\n",
        "      <td>18923</td>\n",
        "      <td>689</td>\n",
        "      <td>56551</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>300</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>77133</td>\n",
        "      <td>19029</td>\n",
        "      <td>691</td>\n",
        "      <td>57413</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>301</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>78566</td>\n",
        "      <td>19207</td>\n",
        "      <td>704</td>\n",
        "      <td>58655</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>302</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>80068</td>\n",
        "      <td>19453</td>\n",
        "      <td>707</td>\n",
        "      <td>59908</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>303</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>82069</td>\n",
        "      <td>19797</td>\n",
        "      <td>717</td>\n",
        "      <td>61555</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "299 2021-01-11      76163     18923    689      56551\n",
        "300 2021-01-12      77133     19029    691      57413\n",
        "301 2021-01-13      78566     19207    704      58655\n",
        "302 2021-01-14      80068     19453    707      59908\n",
        "303 2021-01-15      82069     19797    717      61555"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Countries we can select\n",
      "pprint(jhu_data.countries(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola',\n",
        " 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria',\n",
        " 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus',\n",
        " 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia',\n",
        " 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei', 'Bulgaria',\n",
        " 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cape Verde',\n",
        " 'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros',\n",
        " 'Costa Atlantica', 'Costa Rica', \"Cote d'Ivoire\", 'Croatia', 'Cuba', 'Cyprus',\n",
        " 'Czech Republic', 'Democratic Republic of the Congo', 'Denmark', 'Djibouti',\n",
        " 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador',\n",
        " 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji', 'Finland',\n",
        " 'France', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Grand Princess',\n",
        " 'Greece', 'Grenada', 'Guam', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana',\n",
        " 'Haiti', 'Holy See', 'Honduras', 'Hungary', 'Iceland', 'India', 'Indonesia',\n",
        " 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan',\n",
        " 'Kazakhstan', 'Kenya', 'Kosovo', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia',\n",
        " 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania',\n",
        " 'Luxembourg', 'MS Zaandam', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives',\n",
        " 'Mali', 'Malta', 'Marshall Islands', 'Mauritania', 'Mauritius', 'Mexico',\n",
        " 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Morocco', 'Mozambique',\n",
        " 'Myanmar', 'Namibia', 'Nepal', 'Netherlands', 'New Zealand', 'Nicaragua',\n",
        " 'Niger', 'Nigeria', 'North Macedonia', 'Northern Mariana Islands', 'Norway',\n",
        " 'Oman', 'Pakistan', 'Palestine', 'Panama', 'Papua New Guinea', 'Paraguay',\n",
        " 'Peru', 'Philippines', 'Poland', 'Portugal', 'Puerto Rico', 'Qatar',\n",
        " 'Republic of the Congo', 'Romania', 'Russia', 'Rwanda',\n",
        " 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines',\n",
        " 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal',\n",
        " 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia',\n",
        " 'Solomon Islands', 'Somalia', 'South Africa', 'South Korea', 'South Sudan',\n",
        " 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Swaziland', 'Sweden',\n",
        " 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand',\n",
        " 'Timor-Leste', 'Togo', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Uganda',\n",
        " 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States',\n",
        " 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela', 'Vietnam',\n",
        " 'Virgin Islands, U.S.', 'Yemen', 'Zambia', 'Zimbabwe']\n"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "`JHUData.records()` automatically complement the records, if necesssary and `auto_complement=True` (default). Each country can have either none or one or multiple complements, depending on the records and their preprocessing analysis."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can show the specific kind of complements that were applied to the records of each country with `JHUData.show_complement()` method. The possible kinds of complement for each country are the following:  \n",
      "\n",
      "1. \"Monotonic_confirmed/fatal/recovered\" (monotonic increasing complement)  \n",
      "Force the variable show monotonic increasing.\n",
      "\n",
      "2. \"Full_recovered\" (full complement of recovered data)  \n",
      "Estimate the number of recovered cases using the value of estimated average recovery period.\n",
      "\n",
      "3. \"Partial_recovered\" (partial complement of recovered data)  \n",
      "When recovered values are not updated for some days, extrapolate the values."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the details of complement for all countries\n",
      "jhu_data.show_complement().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Monotonic_confirmed</th>\n",
        "      <th>Monotonic_fatal</th>\n",
        "      <th>Monotonic_recovered</th>\n",
        "      <th>Full_recovered</th>\n",
        "      <th>Partial_recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>193</th>\n",
        "      <td>South Africa</td>\n",
        "      <td>-</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>194</th>\n",
        "      <td>Zambia</td>\n",
        "      <td>-</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>195</th>\n",
        "      <td>Zimbabwe</td>\n",
        "      <td>-</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>196</th>\n",
        "      <td>China</td>\n",
        "      <td>-</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>197</th>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 19,
       "text": [
        "          Country Province Monotonic_confirmed Monotonic_fatal  \\\n",
        "193  South Africa        -               False           False   \n",
        "194        Zambia        -               False           False   \n",
        "195      Zimbabwe        -                True           False   \n",
        "196         China        -                True           False   \n",
        "197         Japan        -               False           False   \n",
        "\n",
        "    Monotonic_recovered Full_recovered Partial_recovered  \n",
        "193               False          False              True  \n",
        "194               False          False              True  \n",
        "195               False          False              True  \n",
        "196                True          False              True  \n",
        "197                True          False              True  "
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# For selected country\n",
      "# jhu_data.show_complement(country=\"Japan\")\n",
      "# For selected province\n",
      "# jhu_data.show_complement(country=\"Japan\", province=\"Tokyo\")\n",
      "# For selected countries\n",
      "# jhu_data.show_complement(country=[\"Greece\", \"Japan\"])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 20
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Note for recovery period:  \n",
      "With the global cases records, we estimate the average recovery period using `JHUData.calculate_recovery_period()`.  \n",
      "\n",
      "What we currently do is to calculate the difference between confirmed cases and fatal cases and try to match it to some recovered cases value in the future. We apply this method for every country that has valid recovery data and average the partial recovery periods in order to obtain a single (average) recovery period. During the calculations, we ignore time intervals that lead to very short (<7 days) or very long (>90 days) partial recovery periods, if these exist with high frequency (>50%) in the records. We have to assume temporarily invariable compartments for this analysis to extract an approximation of the average recovery period.\n",
      "\n",
      "Alternatively, we had tried to use linelist data to get precise value of recovery period (average of recovery date minus confirmation date for cases), but the number of records was too small."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "recovery_period = jhu_data.calculate_recovery_period()\n",
      "print(f\"Average recovery period: {recovery_period} [days]\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Average recovery period: 17 [days]\n"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Linelist of case reports\n",
      "The number of cases is important, but linelist of case reports will helpful to understand the situation deeply. Linelist data was saved as `linelist`, an instance of `LinelistData` class. This dataset is from [Open COVID-19 Data Working Group](https://github.com/beoutbreakprepared/nCoV2019)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(linelist)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "covsirphy.cleaning.linelist.LinelistData"
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Citation\n",
      "print(linelist.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Xu, B., Gutierrez, B., Mekaru, S. et al. Epidemiological data from the COVID-19 outbreak, real-time case information. Sci Data 7, 106 (2020). https://doi.org/10.1038/s41597-020-0448-0\n"
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw dataset\n",
      "linelist.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>age</th>\n",
        "      <th>sex</th>\n",
        "      <th>province</th>\n",
        "      <th>country</th>\n",
        "      <th>date_admission_hospital</th>\n",
        "      <th>date_confirmation</th>\n",
        "      <th>symptoms</th>\n",
        "      <th>chronic_disease</th>\n",
        "      <th>outcome</th>\n",
        "      <th>date_death_or_discharge</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Callao</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676311</th>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "         age     sex province country date_admission_hospital  \\\n",
        "2676307   52  female     Lima    Peru                     NaN   \n",
        "2676308   52  female     Lima    Peru                     NaN   \n",
        "2676309   52    male   Callao    Peru                     NaN   \n",
        "2676310   52    male     Lima    Peru                     NaN   \n",
        "2676311  NaN     NaN      NaN     NaN                     NaN   \n",
        "\n",
        "        date_confirmation symptoms chronic_disease outcome  \\\n",
        "2676307        17.05.2020      NaN             NaN     NaN   \n",
        "2676308        17.05.2020      NaN             NaN     NaN   \n",
        "2676309        17.05.2020      NaN             NaN     NaN   \n",
        "2676310        17.05.2020      NaN             NaN     NaN   \n",
        "2676311               NaN      NaN             NaN     NaN   \n",
        "\n",
        "        date_death_or_discharge  \n",
        "2676307                     NaN  \n",
        "2676308                     NaN  \n",
        "2676309                     NaN  \n",
        "2676310                     NaN  \n",
        "2676311                     NaN  "
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned dataset\n",
      "linelist.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676306</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Coronel Portillo</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Callao</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "        Country          Province Hospitalized_date Confirmation_date  \\\n",
        "2676306    Peru  Coronel Portillo               NaT        2020-05-17   \n",
        "2676307    Peru              Lima               NaT        2020-05-17   \n",
        "2676308    Peru              Lima               NaT        2020-05-17   \n",
        "2676309    Peru            Callao               NaT        2020-05-17   \n",
        "2676310    Peru              Lima               NaT        2020-05-17   \n",
        "\n",
        "        Outcome_date  Confirmed  Infected  Recovered  Fatal Symptoms  \\\n",
        "2676306          NaT       True     False      False  False      NaN   \n",
        "2676307          NaT       True     False      False  False      NaN   \n",
        "2676308          NaT       True     False      False  False      NaN   \n",
        "2676309          NaT       True     False      False  False      NaN   \n",
        "2676310          NaT       True     False      False  False      NaN   \n",
        "\n",
        "        Chronic_disease   Age     Sex  \n",
        "2676306             NaN  52.0  female  \n",
        "2676307             NaN  52.0  female  \n",
        "2676308             NaN  52.0  female  \n",
        "2676309             NaN  52.0    male  \n",
        "2676310             NaN  52.0    male  "
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for specified area\n",
      "linelist.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>107</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-30</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>108</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-24</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:pneumonia:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>109</th>\n",
        "      <td>2020-10-01</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>30.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>110</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>111</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-26</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:joint pain:pneumonia</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "    Hospitalized_date Confirmation_date Outcome_date  Confirmed  Infected  \\\n",
        "107               NaT        2020-01-30          NaT       True     False   \n",
        "108               NaT        2020-01-24          NaT       True     False   \n",
        "109        2020-10-01        2020-01-15   2020-01-15       True     False   \n",
        "110               NaT        2020-01-25          NaT       True     False   \n",
        "111               NaT        2020-01-26          NaT       True     False   \n",
        "\n",
        "     Recovered  Fatal                     Symptoms Chronic_disease   Age  \\\n",
        "107      False  False                          NaN             NaN   NaN   \n",
        "108       True  False  fever:pneumonia:sore throat             NaN  40.0   \n",
        "109       True  False      cough:fever:sore throat             NaN  30.0   \n",
        "110      False  False                  cough:fever             NaN   NaN   \n",
        "111      False  False   fever:joint pain:pneumonia             NaN  40.0   \n",
        "\n",
        "        Sex  \n",
        "107  female  \n",
        "108    male  \n",
        "109    male  \n",
        "110  female  \n",
        "111    male  "
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for outcome (\"Recovered\" or \"Fatal\")\n",
      "linelist.closed(outcome=\"Recovered\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Recovered_date</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>272</th>\n",
        "      <td>Singapore</td>\n",
        "      <td>-</td>\n",
        "      <td>2020-02-02</td>\n",
        "      <td>2020-02-06</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>39.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>273</th>\n",
        "      <td>Malaysia</td>\n",
        "      <td>Johor</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>274</th>\n",
        "      <td>China</td>\n",
        "      <td>Gansu</td>\n",
        "      <td>2020-07-02</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>diarrhea</td>\n",
        "      <td>NaN</td>\n",
        "      <td>1.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>275</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>NaN</td>\n",
        "      <td>hypertension</td>\n",
        "      <td>NaN</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>276</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>2020-02-19</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "       Country Province Hospitalized_date Confirmation_date Recovered_date  \\\n",
        "272  Singapore        -        2020-02-02        2020-02-06     2020-02-17   \n",
        "273   Malaysia    Johor               NaT        2020-01-25     2020-02-08   \n",
        "274      China    Gansu        2020-07-02        2020-02-08     2020-02-17   \n",
        "275     Canada  Ontario               NaT        2020-01-25     2020-01-31   \n",
        "276     Canada  Ontario               NaT        2020-01-31     2020-02-19   \n",
        "\n",
        "        Symptoms Chronic_disease   Age     Sex  \n",
        "272          NaN             NaN  39.0  female  \n",
        "273  cough:fever             NaN  40.0    male  \n",
        "274     diarrhea             NaN   1.0  female  \n",
        "275          NaN    hypertension   NaN    male  \n",
        "276          NaN             NaN   NaN  female  "
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "As the median value of the period from confirmation to recovery, we can calculate recovery period."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Recovery period (integer) [days]\n",
      "linelist.recovery_period()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 28,
       "text": [
        "12"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Population in each country\n",
      "Population values are necessary to calculate the number of susceptible people. Susceptible is a variable of SIR-derived models. This dataset was saved as `population_data`, an instance of `PopulationData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(population_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "covsirphy.cleaning.population.PopulationData"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>329375</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>329376</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>329377</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>329378</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-16</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>329379</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2021-01-17</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "329375  COL  Colombia  Vichada 2021-01-13      107808\n",
        "329376  COL  Colombia  Vichada 2021-01-14      107808\n",
        "329377  COL  Colombia  Vichada 2021-01-15      107808\n",
        "329378  COL  Colombia  Vichada 2021-01-16      107808\n",
        "329379  COL  Colombia  Vichada 2021-01-17      107808"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We will get the population values with `PopulationData.value()`."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# In a country\n",
      "population_data.value(\"Japan\", province=None)\n",
      "# In a country with ISO3 code\n",
      "# population_data.value(\"JPN\", province=None)\n",
      "# In a province (prefecture)\n",
      "# population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 33,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 33
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can update the population values."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Before\n",
      "population_before = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\"Before: {population_before}\")\n",
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_after = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\" After: {population_after}\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Before: 13942856\n",
        " After: 14002973\n"
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Government Response Tracker (OxCGRT)\n",
      "Government responses are tracked with [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker). Because government responses and activities of persons change the parameter values of SIR-derived models, this dataset is significant when we try to forcast the number of cases.  \n",
      "With `DataLoader` class, the dataset was retrieved via [COVID-19 Data Hub](https://covid19datahub.io/) and saved as `oxcgrt_data`, an instance of `OxCGRTData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(oxcgrt_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "covsirphy.cleaning.oxcgrt.OxCGRTData"
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>390655</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>390656</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>390657</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>390658</th>\n",
        "      <td>2021-01-16</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>390659</th>\n",
        "      <td>2021-01-17</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>81.02</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 38,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "390655 2021-01-13  Colombia  COL               3                  1   \n",
        "390656 2021-01-14  Colombia  COL               3                  1   \n",
        "390657 2021-01-15  Colombia  COL               3                  1   \n",
        "390658 2021-01-16  Colombia  COL               3                  1   \n",
        "390659 2021-01-17  Colombia  COL               3                  1   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "390655              1                        3                  1   \n",
        "390656              1                        3                  1   \n",
        "390657              1                        3                  1   \n",
        "390658              1                        3                  1   \n",
        "390659              1                        3                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "390655                       1                               1   \n",
        "390656                       1                               1   \n",
        "390657                       1                               1   \n",
        "390658                       1                               1   \n",
        "390659                       1                               1   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "390655                                    4                      2   \n",
        "390656                                    4                      2   \n",
        "390657                                    4                      2   \n",
        "390658                                    4                      2   \n",
        "390659                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "390655               2                2             81.02  \n",
        "390656               2                2             81.02  \n",
        "390657               2                2             81.02  \n",
        "390658               2                2             81.02  \n",
        "390659               2                2             81.02  "
       ]
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>378</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>379</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>380</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>381</th>\n",
        "      <td>2021-01-16</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>382</th>\n",
        "      <td>2021-01-17</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>55.09</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "378 2021-01-13               1                  1              1   \n",
        "379 2021-01-14               1                  1              1   \n",
        "380 2021-01-15               1                  1              1   \n",
        "381 2021-01-16               1                  1              1   \n",
        "382 2021-01-17               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "378                        0                  1                       1   \n",
        "379                        0                  1                       1   \n",
        "380                        0                  1                       1   \n",
        "381                        0                  1                       1   \n",
        "382                        0                  1                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "378                               1                                    4   \n",
        "379                               1                                    4   \n",
        "380                               1                                    4   \n",
        "381                               1                                    4   \n",
        "382                               1                                    4   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "378                      2               3                2             55.09  \n",
        "379                      2               3                2             55.09  \n",
        "380                      2               3                2             55.09  \n",
        "381                      2               3                2             55.09  \n",
        "382                      2               3                2             55.09  "
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of tests\n",
      "The number of tests is also key information to understand the situation.\n",
      "This dataset was saved as `pcr_data`, an instance of `PCRData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(pcr_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 40,
       "text": [
        "covsirphy.cleaning.pcr_data.PCRData"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(pcr_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 41
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# pcr_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 42
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "pcr_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14975</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5442315</td>\n",
        "      <td>292212</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14976</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5531305</td>\n",
        "      <td>297315</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14977</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5615256</td>\n",
        "      <td>302623</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14978</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5718894</td>\n",
        "      <td>309214</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14979</th>\n",
        "      <td>2021-01-16</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>5792647</td>\n",
        "      <td>315910</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 43,
       "text": [
        "            Date Country Province    Tests  Confirmed\n",
        "14975 2021-01-12   Japan        -  5442315     292212\n",
        "14976 2021-01-13   Japan        -  5531305     297315\n",
        "14977 2021-01-14   Japan        -  5615256     302623\n",
        "14978 2021-01-15   Japan        -  5718894     309214\n",
        "14979 2021-01-16   Japan        -  5792647     315910"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "pcr_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# pcr_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 44,
       "text": [
        "Empty DataFrame\n",
        "Columns: [Date, Tests, Confirmed]\n",
        "Index: []"
       ]
      }
     ],
     "prompt_number": 44
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Under the assumption that all tests were PCR test, we can calculate the positive rate of PCR tests as \"the number of confirmed cases per the number of tests\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Positive rate in Japan\n",
      "_ = pcr_data.positive_rate(\"Japan\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 45
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of vaccinations\n",
      "The number of vaccinations is a key factor to end the outbreak as soon as possible. This dataset was saved as `vaccine_data`, an instance of `VaccineData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# The number of vaccinations\n",
      "type(vaccine_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 46,
       "text": [
        "covsirphy.cleaning.vaccine_data.VaccineData"
       ]
      }
     ],
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(vaccine_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n"
       ]
      }
     ],
     "prompt_number": 47
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "# vaccine_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "vaccine_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Product</th>\n",
        "      <th>Vaccinations</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>927</th>\n",
        "      <td>2021-01-10</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>86118</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>928</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>91336</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>929</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>101479</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>930</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>113094</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>931</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Oxford/AstraZeneca, Pfizer/BioNTech</td>\n",
        "      <td>126504</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 49,
       "text": [
        "          Date Country                              Product  Vaccinations\n",
        "927 2021-01-10   Wales  Oxford/AstraZeneca, Pfizer/BioNTech         86118\n",
        "928 2021-01-11   Wales  Oxford/AstraZeneca, Pfizer/BioNTech         91336\n",
        "929 2021-01-12   Wales  Oxford/AstraZeneca, Pfizer/BioNTech        101479\n",
        "930 2021-01-13   Wales  Oxford/AstraZeneca, Pfizer/BioNTech        113094\n",
        "931 2021-01-14   Wales  Oxford/AstraZeneca, Pfizer/BioNTech        126504"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Registered countries\n",
      "vaccine_data.countries()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 50,
       "text": [
        "['Argentina',\n",
        " 'Austria',\n",
        " 'Bahrain',\n",
        " 'Belgium',\n",
        " 'Bulgaria',\n",
        " 'Canada',\n",
        " 'Chile',\n",
        " 'China',\n",
        " 'Costa Rica',\n",
        " 'Croatia',\n",
        " 'Cyprus',\n",
        " 'Czechia',\n",
        " 'Denmark',\n",
        " 'England',\n",
        " 'Estonia',\n",
        " 'Finland',\n",
        " 'France',\n",
        " 'Germany',\n",
        " 'Gibraltar',\n",
        " 'Greece',\n",
        " 'Guinea',\n",
        " 'Hungary',\n",
        " 'Iceland',\n",
        " 'India',\n",
        " 'Ireland',\n",
        " 'Israel',\n",
        " 'Italy',\n",
        " 'Kuwait',\n",
        " 'Latvia',\n",
        " 'Lithuania',\n",
        " 'Luxembourg',\n",
        " 'Malta',\n",
        " 'Mexico',\n",
        " 'Netherlands',\n",
        " 'Northern Ireland',\n",
        " 'Norway',\n",
        " 'Oman',\n",
        " 'Poland',\n",
        " 'Portugal',\n",
        " 'Romania',\n",
        " 'Russia',\n",
        " 'Saudi Arabia',\n",
        " 'Scotland',\n",
        " 'Serbia',\n",
        " 'Singapore',\n",
        " 'Slovakia',\n",
        " 'Slovenia',\n",
        " 'Spain',\n",
        " 'Sweden',\n",
        " 'Switzerland',\n",
        " 'Turkey',\n",
        " 'United Arab Emirates',\n",
        " 'United Kingdom',\n",
        " 'United States',\n",
        " 'Wales']"
       ]
      }
     ],
     "prompt_number": 50
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "vaccine_data.subset(\"United Kingdom\").tail()\n",
      "# We can use ISO3 codes\n",
      "# pcr_data.subset(\"GBR\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Vaccinations</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>22</th>\n",
        "      <td>2021-01-11</td>\n",
        "      <td>2843815</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>23</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>3067541</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>24</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>3356229</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>3678180</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>26</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>4006440</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 51,
       "text": [
        "         Date  Vaccinations\n",
        "22 2021-01-11       2843815\n",
        "23 2021-01-12       3067541\n",
        "24 2021-01-13       3356229\n",
        "25 2021-01-14       3678180\n",
        "26 2021-01-15       4006440"
       ]
      }
     ],
     "prompt_number": 51
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Population pyramid\n",
      "With population pyramid, we can divide the population to sub-groups. This will be useful when we analyse the meaning of parameters. For example, how many days go out is different between the sub-groups.\n",
      "This dataset was saved as `pyramid_data`, an instance of `PopulationPyramidData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Population pyramid\n",
      "type(pyramid_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 52,
       "text": [
        "covsirphy.cleaning.pyramid.PopulationPyramidData"
       ]
      }
     ],
     "prompt_number": 52
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(pyramid_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "World Bank Group (2020), World Bank Open Data, https://data.worldbank.org/\n"
       ]
      }
     ],
     "prompt_number": 53
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset will retrieved from the server when set\n",
      "pyramid_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving population pyramid dataset (Japan) from https://data.worldbank.org/\n"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Age</th>\n",
        "      <th>Population</th>\n",
        "      <th>Per_total</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>113</th>\n",
        "      <td>118</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>114</th>\n",
        "      <td>119</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>115</th>\n",
        "      <td>120</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>116</th>\n",
        "      <td>121</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>117</th>\n",
        "      <td>122</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 54,
       "text": [
        "     Age  Population  Per_total\n",
        "113  118      255035   0.002174\n",
        "114  119      255035   0.002174\n",
        "115  120      255035   0.002174\n",
        "116  121      255035   0.002174\n",
        "117  122      255035   0.002174"
       ]
      }
     ],
     "prompt_number": 54
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Japan-specific dataset\n",
      "This includes the number of confirmed/infected/fatal/recovered/tests/moderate/severe cases at country/prefecture level and metadata of each prefecture.\n",
      "This dataset was saved as `japan_data`, an instance of `JapanData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Japan-specific dataset\n",
      "type(japan_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 55,
       "text": [
        "covsirphy.cleaning.japan_data.JapanData"
       ]
      }
     ],
     "prompt_number": 55
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(japan_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 56
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned dataset\n",
      "japan_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Moderate</th>\n",
        "      <th>Severe</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14975</th>\n",
        "      <td>2021-01-12</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>292212</td>\n",
        "      <td>62722</td>\n",
        "      <td>4094</td>\n",
        "      <td>225396</td>\n",
        "      <td>5442315</td>\n",
        "      <td>60717</td>\n",
        "      <td>881</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14976</th>\n",
        "      <td>2021-01-13</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>297315</td>\n",
        "      <td>64097</td>\n",
        "      <td>4145</td>\n",
        "      <td>229073</td>\n",
        "      <td>5531305</td>\n",
        "      <td>62173</td>\n",
        "      <td>900</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14977</th>\n",
        "      <td>2021-01-14</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>302623</td>\n",
        "      <td>64725</td>\n",
        "      <td>4233</td>\n",
        "      <td>233665</td>\n",
        "      <td>5615256</td>\n",
        "      <td>62859</td>\n",
        "      <td>920</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14978</th>\n",
        "      <td>2021-01-15</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>309214</td>\n",
        "      <td>66432</td>\n",
        "      <td>4315</td>\n",
        "      <td>238467</td>\n",
        "      <td>5718894</td>\n",
        "      <td>64316</td>\n",
        "      <td>934</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14979</th>\n",
        "      <td>2021-01-16</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>315910</td>\n",
        "      <td>67557</td>\n",
        "      <td>4380</td>\n",
        "      <td>243973</td>\n",
        "      <td>5792647</td>\n",
        "      <td>65796</td>\n",
        "      <td>965</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 57,
       "text": [
        "            Date Country Province  Confirmed  Infected  Fatal  Recovered  \\\n",
        "14975 2021-01-12   Japan        -     292212     62722   4094     225396   \n",
        "14976 2021-01-13   Japan        -     297315     64097   4145     229073   \n",
        "14977 2021-01-14   Japan        -     302623     64725   4233     233665   \n",
        "14978 2021-01-15   Japan        -     309214     66432   4315     238467   \n",
        "14979 2021-01-16   Japan        -     315910     67557   4380     243973   \n",
        "\n",
        "         Tests  Moderate  Severe  \n",
        "14975  5442315     60717     881  \n",
        "14976  5531305     62173     900  \n",
        "14977  5615256     62859     920  \n",
        "14978  5718894     64316     934  \n",
        "14979  5792647     65796     965  "
       ]
      }
     ],
     "prompt_number": 57
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Metadata\n",
      "japan_data.meta().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving Metadata of Japan dataset from https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Prefecture</th>\n",
        "      <th>Admin_Capital</th>\n",
        "      <th>Admin_Region</th>\n",
        "      <th>Admin_Num</th>\n",
        "      <th>Area_Habitable</th>\n",
        "      <th>Area_Total</th>\n",
        "      <th>Clinic_bed_Care</th>\n",
        "      <th>Clinic_bed_Total</th>\n",
        "      <th>Hospital_bed_Care</th>\n",
        "      <th>Hospital_bed_Specific</th>\n",
        "      <th>Hospital_bed_Total</th>\n",
        "      <th>Hospital_bed_Tuberculosis</th>\n",
        "      <th>Hospital_bed_Type-I</th>\n",
        "      <th>Hospital_bed_Type-II</th>\n",
        "      <th>Population_Female</th>\n",
        "      <th>Population_Male</th>\n",
        "      <th>Population_Total</th>\n",
        "      <th>Location_Latitude</th>\n",
        "      <th>Location_Longitude</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>42</th>\n",
        "      <td>Kumamoto</td>\n",
        "      <td>Kumamoto</td>\n",
        "      <td>Kyushu</td>\n",
        "      <td>43</td>\n",
        "      <td>2796</td>\n",
        "      <td>7409</td>\n",
        "      <td>497</td>\n",
        "      <td>4628</td>\n",
        "      <td>8340</td>\n",
        "      <td>0</td>\n",
        "      <td>33710</td>\n",
        "      <td>95</td>\n",
        "      <td>2</td>\n",
        "      <td>46</td>\n",
        "      <td>933</td>\n",
        "      <td>833</td>\n",
        "      <td>1765</td>\n",
        "      <td>32.790513</td>\n",
        "      <td>130.742388</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>43</th>\n",
        "      <td>Oita</td>\n",
        "      <td>Oita</td>\n",
        "      <td>Kyushu</td>\n",
        "      <td>44</td>\n",
        "      <td>1799</td>\n",
        "      <td>6341</td>\n",
        "      <td>269</td>\n",
        "      <td>3561</td>\n",
        "      <td>2618</td>\n",
        "      <td>0</td>\n",
        "      <td>19834</td>\n",
        "      <td>50</td>\n",
        "      <td>2</td>\n",
        "      <td>38</td>\n",
        "      <td>607</td>\n",
        "      <td>546</td>\n",
        "      <td>1152</td>\n",
        "      <td>33.238391</td>\n",
        "      <td>131.612658</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>44</th>\n",
        "      <td>Miyazaki</td>\n",
        "      <td>Miyazaki</td>\n",
        "      <td>Kyushu</td>\n",
        "      <td>45</td>\n",
        "      <td>1850</td>\n",
        "      <td>7735</td>\n",
        "      <td>206</td>\n",
        "      <td>2357</td>\n",
        "      <td>3682</td>\n",
        "      <td>0</td>\n",
        "      <td>18769</td>\n",
        "      <td>33</td>\n",
        "      <td>1</td>\n",
        "      <td>30</td>\n",
        "      <td>577</td>\n",
        "      <td>512</td>\n",
        "      <td>1089</td>\n",
        "      <td>31.911188</td>\n",
        "      <td>131.423873</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>45</th>\n",
        "      <td>Kagoshima</td>\n",
        "      <td>Kagoshima</td>\n",
        "      <td>Kyushu</td>\n",
        "      <td>46</td>\n",
        "      <td>3313</td>\n",
        "      <td>9187</td>\n",
        "      <td>652</td>\n",
        "      <td>4827</td>\n",
        "      <td>7750</td>\n",
        "      <td>0</td>\n",
        "      <td>32651</td>\n",
        "      <td>98</td>\n",
        "      <td>1</td>\n",
        "      <td>44</td>\n",
        "      <td>863</td>\n",
        "      <td>763</td>\n",
        "      <td>1626</td>\n",
        "      <td>31.560052</td>\n",
        "      <td>130.557745</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>46</th>\n",
        "      <td>Okinawa</td>\n",
        "      <td>Naha</td>\n",
        "      <td>Okinawa</td>\n",
        "      <td>47</td>\n",
        "      <td>1169</td>\n",
        "      <td>2281</td>\n",
        "      <td>83</td>\n",
        "      <td>914</td>\n",
        "      <td>3804</td>\n",
        "      <td>0</td>\n",
        "      <td>18710</td>\n",
        "      <td>47</td>\n",
        "      <td>4</td>\n",
        "      <td>20</td>\n",
        "      <td>734</td>\n",
        "      <td>709</td>\n",
        "      <td>1443</td>\n",
        "      <td>26.211761</td>\n",
        "      <td>127.681119</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 58,
       "text": [
        "   Prefecture Admin_Capital Admin_Region  Admin_Num  Area_Habitable  \\\n",
        "42   Kumamoto      Kumamoto       Kyushu         43            2796   \n",
        "43       Oita          Oita       Kyushu         44            1799   \n",
        "44   Miyazaki      Miyazaki       Kyushu         45            1850   \n",
        "45  Kagoshima     Kagoshima       Kyushu         46            3313   \n",
        "46    Okinawa          Naha      Okinawa         47            1169   \n",
        "\n",
        "    Area_Total  Clinic_bed_Care  Clinic_bed_Total  Hospital_bed_Care  \\\n",
        "42        7409              497              4628               8340   \n",
        "43        6341              269              3561               2618   \n",
        "44        7735              206              2357               3682   \n",
        "45        9187              652              4827               7750   \n",
        "46        2281               83               914               3804   \n",
        "\n",
        "    Hospital_bed_Specific  Hospital_bed_Total  Hospital_bed_Tuberculosis  \\\n",
        "42                      0               33710                         95   \n",
        "43                      0               19834                         50   \n",
        "44                      0               18769                         33   \n",
        "45                      0               32651                         98   \n",
        "46                      0               18710                         47   \n",
        "\n",
        "    Hospital_bed_Type-I  Hospital_bed_Type-II  Population_Female  \\\n",
        "42                    2                    46                933   \n",
        "43                    2                    38                607   \n",
        "44                    1                    30                577   \n",
        "45                    1                    44                863   \n",
        "46                    4                    20                734   \n",
        "\n",
        "    Population_Male  Population_Total  Location_Latitude  Location_Longitude  \n",
        "42              833              1765          32.790513          130.742388  \n",
        "43              546              1152          33.238391          131.612658  \n",
        "44              512              1089          31.911188          131.423873  \n",
        "45              763              1626          31.560052          130.557745  \n",
        "46              709              1443          26.211761          127.681119  "
       ]
      }
     ],
     "prompt_number": 58
    }
   ],
   "metadata": {}
  }
 ]
}
