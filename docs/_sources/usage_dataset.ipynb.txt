{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 64-bit ('covid19-sir': pipenv)",
   "metadata": {
    "interpreter": {
     "hash": "aa53c8c6e6798222a2084c11cc25017700a8d3ad495b587e3a634f357767115f"
    }
   },
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage: datasets\n",
      "Here, we will review the raw/cleaned datasets. `Scenario` class performs data cleaning internally using `JHUData` class and so on, but it is important to review the features and data types before analysing them."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Preparation\n",
      "Prepare the packages."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "'2.13.3-theta-fu1.new.56.420.422.429.449.fix.438.441.450'"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" directory and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` instance will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically and download the datasets to \"input\" directory and load them."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu()\n",
      "# Linelist of case reports\n",
      "linelist = data_loader.linelist()\n",
      "# Population in each country\n",
      "population_data = data_loader.population()\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt()\n",
      "# The number of tests\n",
      "pcr_data = data_loader.pcr()\n",
      "# The number of vaccines (will be prepared in 2.14.0)\n",
      "vaccine_data = data_loader.vaccine()\n",
      "# Population pyramid (will be prepared in 2.14.0)\n",
      "pyramid_data = data_loader.pyramid()"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Please set verbose=2 to see the detailed citation list.\n",
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving COVID-19 dataset in Japan from https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving linelist from Open COVID-19 Data Working Group repository: https://github.com/beoutbreakprepared/nCoV2019\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving COVID-19 vaccination dataset from https://covid.ourworldindata.org/data/\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of cases (JHU style)\n",
      "The main dataset is that of the number of cases and was saved as `jhu_data`, an instance of `JHUData` class. This includes \"Confirmed\", \"Infected\", \"Recovered\" and \"Fatal\". \"Infected\" was calculated as \"Confirmed - Recovered - Fatal\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(jhu_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.cleaning.jhu_data.JHUData"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The dataset will be retrieved from [COVID-19 Data Hub](https://covid19datahub.io/) and [Data folder of CovsirPhy project](https://github.com/lisphilar/covid19-sir/tree/master/data). Description of these projects will be shown as follows."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Detailed citation list of COVID-19 Data Hub\n",
      "# print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>...</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>374974</th>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>4978</td>\n",
        "      <td>1133.0</td>\n",
        "      <td>1104</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>374975</th>\n",
        "      <td>2020-12-25</td>\n",
        "      <td>4983</td>\n",
        "      <td>1137.0</td>\n",
        "      <td>1104</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>374976</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>4983</td>\n",
        "      <td>1137.0</td>\n",
        "      <td>1108</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>374977</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>4984</td>\n",
        "      <td>1137.0</td>\n",
        "      <td>1109</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>374978</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>4984</td>\n",
        "      <td>1137.0</td>\n",
        "      <td>1109</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 21 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "       ObservationDate  Tests  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "374974      2020-12-24   4978     1133.0       1104      14    107808.0  COL   \n",
        "374975      2020-12-25   4983     1137.0       1104      14    107808.0  COL   \n",
        "374976      2020-12-26   4983     1137.0       1108      14    107808.0  COL   \n",
        "374977      2020-12-27   4984     1137.0       1109      14    107808.0  COL   \n",
        "374978      2020-12-28   4984     1137.0       1109      14    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  ...  cancel_events  \\\n",
        "374974        Vichada       Colombia               3  ...              1   \n",
        "374975        Vichada       Colombia               3  ...              1   \n",
        "374976        Vichada       Colombia               3  ...              1   \n",
        "374977        Vichada       Colombia               3  ...              1   \n",
        "374978        Vichada       Colombia               3  ...              1   \n",
        "\n",
        "        gatherings_restrictions  transport_closing  stay_home_restrictions  \\\n",
        "374974                        3                  1                       1   \n",
        "374975                        3                  1                       1   \n",
        "374976                        3                  1                       1   \n",
        "374977                        3                  1                       1   \n",
        "374978                        3                  1                       1   \n",
        "\n",
        "        internal_movement_restrictions  international_movement_restrictions  \\\n",
        "374974                               1                                    4   \n",
        "374975                               1                                    4   \n",
        "374976                               1                                    4   \n",
        "374977                               1                                    4   \n",
        "374978                               1                                    4   \n",
        "\n",
        "        information_campaigns  testing_policy  contact_tracing  \\\n",
        "374974                      2               2                2   \n",
        "374975                      2               2                2   \n",
        "374976                      2               2                2   \n",
        "374977                      2               2                2   \n",
        "374978                      2               2                2   \n",
        "\n",
        "        stringency_index  \n",
        "374974             60.19  \n",
        "374975             60.19  \n",
        "374976             60.19  \n",
        "374977             60.19  \n",
        "374978             60.19  \n",
        "\n",
        "[5 rows x 21 columns]"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14044</th>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>206139</td>\n",
        "      <td>28210</td>\n",
        "      <td>3050</td>\n",
        "      <td>174879</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14045</th>\n",
        "      <td>2020-12-25</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>209980</td>\n",
        "      <td>29082</td>\n",
        "      <td>3105</td>\n",
        "      <td>177793</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14046</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>213547</td>\n",
        "      <td>30204</td>\n",
        "      <td>3155</td>\n",
        "      <td>180188</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14047</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>217312</td>\n",
        "      <td>31503</td>\n",
        "      <td>3213</td>\n",
        "      <td>182596</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14048</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>220236</td>\n",
        "      <td>32322</td>\n",
        "      <td>3252</td>\n",
        "      <td>184662</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Date Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "14044 2020-12-24   Japan        -     206139     28210   3050     174879\n",
        "14045 2020-12-25   Japan        -     209980     29082   3105     177793\n",
        "14046 2020-12-26   Japan        -     213547     30204   3155     180188\n",
        "14047 2020-12-27   Japan        -     217312     31503   3213     182596\n",
        "14048 2020-12-28   Japan        -     220236     32322   3252     184662"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.cleaned().info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 371604 entries, 0 to 14048\n",
        "Data columns (total 7 columns):\n",
        " #   Column     Non-Null Count   Dtype         \n",
        "---  ------     --------------   -----         \n",
        " 0   Date       371604 non-null  datetime64[ns]\n",
        " 1   Country    371604 non-null  category      \n",
        " 2   Province   371604 non-null  category      \n",
        " 3   Confirmed  371604 non-null  int64         \n",
        " 4   Infected   371604 non-null  int64         \n",
        " 5   Fatal      371604 non-null  int64         \n",
        " 6   Recovered  371604 non-null  int64         \n",
        "dtypes: category(2), datetime64[ns](1), int64(4)\n",
        "memory usage: 18.5 MB\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Total number of cases in all countries with `JHUData.total()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Calculate total values\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-24</th>\n",
        "      <td>79419196</td>\n",
        "      <td>26698221</td>\n",
        "      <td>1743881</td>\n",
        "      <td>50977094</td>\n",
        "      <td>0.021958</td>\n",
        "      <td>0.641874</td>\n",
        "      <td>0.033078</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-25</th>\n",
        "      <td>79889917</td>\n",
        "      <td>26886199</td>\n",
        "      <td>1751826</td>\n",
        "      <td>51251892</td>\n",
        "      <td>0.021928</td>\n",
        "      <td>0.641531</td>\n",
        "      <td>0.033051</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-26</th>\n",
        "      <td>80400220</td>\n",
        "      <td>26999300</td>\n",
        "      <td>1758514</td>\n",
        "      <td>51642406</td>\n",
        "      <td>0.021872</td>\n",
        "      <td>0.642317</td>\n",
        "      <td>0.032930</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-27</th>\n",
        "      <td>80829510</td>\n",
        "      <td>27156312</td>\n",
        "      <td>1765144</td>\n",
        "      <td>51908054</td>\n",
        "      <td>0.021838</td>\n",
        "      <td>0.642192</td>\n",
        "      <td>0.032887</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-28</th>\n",
        "      <td>80842611</td>\n",
        "      <td>27164970</td>\n",
        "      <td>1765253</td>\n",
        "      <td>51912388</td>\n",
        "      <td>0.021836</td>\n",
        "      <td>0.642141</td>\n",
        "      <td>0.032886</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "            Confirmed  Infected    Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                       \n",
        "2020-12-24   79419196  26698221  1743881   50977094             0.021958   \n",
        "2020-12-25   79889917  26886199  1751826   51251892             0.021928   \n",
        "2020-12-26   80400220  26999300  1758514   51642406             0.021872   \n",
        "2020-12-27   80829510  27156312  1765144   51908054             0.021838   \n",
        "2020-12-28   80842611  27164970  1765253   51912388             0.021836   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-12-24                 0.641874                        0.033078  \n",
        "2020-12-25                 0.641531                        0.033051  \n",
        "2020-12-26                 0.642317                        0.032930  \n",
        "2020-12-27                 0.642192                        0.032887  \n",
        "2020-12-28                 0.642141                        0.032886  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Statistics of rate values in all countries\n",
      "total_df.loc[:, total_df.columns.str.contains(\"per\")].describe().T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>count</th>\n",
        "      <th>mean</th>\n",
        "      <th>std</th>\n",
        "      <th>min</th>\n",
        "      <th>25%</th>\n",
        "      <th>50%</th>\n",
        "      <th>75%</th>\n",
        "      <th>max</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <td>362.0</td>\n",
        "      <td>0.038472</td>\n",
        "      <td>0.017360</td>\n",
        "      <td>0.00000</td>\n",
        "      <td>0.025017</td>\n",
        "      <td>0.034097</td>\n",
        "      <td>0.049154</td>\n",
        "      <td>0.074286</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <td>362.0</td>\n",
        "      <td>0.430553</td>\n",
        "      <td>0.251900</td>\n",
        "      <td>0.00132</td>\n",
        "      <td>0.200554</td>\n",
        "      <td>0.524408</td>\n",
        "      <td>0.647403</td>\n",
        "      <td>1.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "      <td>362.0</td>\n",
        "      <td>0.202719</td>\n",
        "      <td>0.269083</td>\n",
        "      <td>0.00000</td>\n",
        "      <td>0.040159</td>\n",
        "      <td>0.076141</td>\n",
        "      <td>0.222122</td>\n",
        "      <td>0.942029</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "                                count      mean       std      min       25%  \\\n",
        "Fatal per Confirmed             362.0  0.038472  0.017360  0.00000  0.025017   \n",
        "Recovered per Confirmed         362.0  0.430553  0.251900  0.00132  0.200554   \n",
        "Fatal per (Fatal or Recovered)  362.0  0.202719  0.269083  0.00000  0.040159   \n",
        "\n",
        "                                     50%       75%       max  \n",
        "Fatal per Confirmed             0.034097  0.049154  0.074286  \n",
        "Recovered per Confirmed         0.524408  0.647403  1.000000  \n",
        "Fatal per (Fatal or Recovered)  0.076141  0.222122  0.942029  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can create a subset for a country using `JHUData.subset()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "df, _ = jhu_data.records(\"Japan\")\n",
      "df.tail()\n",
      "# We can use ISO3 code etc.\n",
      "# df, _ = jhu_data.records(\"JPN\")\n",
      "# df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>322</th>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>206139</td>\n",
        "      <td>28210</td>\n",
        "      <td>3050</td>\n",
        "      <td>174879</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>323</th>\n",
        "      <td>2020-12-25</td>\n",
        "      <td>209980</td>\n",
        "      <td>29082</td>\n",
        "      <td>3105</td>\n",
        "      <td>177793</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>324</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>213547</td>\n",
        "      <td>30204</td>\n",
        "      <td>3155</td>\n",
        "      <td>180188</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>325</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>217312</td>\n",
        "      <td>31503</td>\n",
        "      <td>3213</td>\n",
        "      <td>182596</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>326</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>220236</td>\n",
        "      <td>32322</td>\n",
        "      <td>3252</td>\n",
        "      <td>184662</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "322 2020-12-24     206139     28210   3050     174879\n",
        "323 2020-12-25     209980     29082   3105     177793\n",
        "324 2020-12-26     213547     30204   3155     180188\n",
        "325 2020-12-27     217312     31503   3213     182596\n",
        "326 2020-12-28     220236     32322   3252     184662"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Province (\"prefecture\" for Japan) name can be specified."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df, _ = jhu_data.records(\"Japan\", province=\"Tokyo\")\n",
      "df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>263</th>\n",
        "      <td>2020-12-23</td>\n",
        "      <td>53130</td>\n",
        "      <td>9359</td>\n",
        "      <td>578</td>\n",
        "      <td>43193</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>264</th>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>54018</td>\n",
        "      <td>9945</td>\n",
        "      <td>587</td>\n",
        "      <td>43486</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>265</th>\n",
        "      <td>2020-12-25</td>\n",
        "      <td>54902</td>\n",
        "      <td>10473</td>\n",
        "      <td>597</td>\n",
        "      <td>43832</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>266</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>55851</td>\n",
        "      <td>10845</td>\n",
        "      <td>607</td>\n",
        "      <td>44399</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>267</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>56559</td>\n",
        "      <td>10953</td>\n",
        "      <td>607</td>\n",
        "      <td>44999</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "263 2020-12-23      53130      9359    578      43193\n",
        "264 2020-12-24      54018      9945    587      43486\n",
        "265 2020-12-25      54902     10473    597      43832\n",
        "266 2020-12-26      55851     10845    607      44399\n",
        "267 2020-12-27      56559     10953    607      44999"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Countries we can select\n",
      "pprint(jhu_data.countries(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola',\n",
        " 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria',\n",
        " 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus',\n",
        " 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia',\n",
        " 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei', 'Bulgaria',\n",
        " 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cape Verde',\n",
        " 'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros',\n",
        " 'Costa Atlantica', 'Costa Rica', \"Cote d'Ivoire\", 'Croatia', 'Cuba', 'Cyprus',\n",
        " 'Czech Republic', 'Democratic Republic of the Congo', 'Denmark', 'Djibouti',\n",
        " 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador',\n",
        " 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji', 'Finland',\n",
        " 'France', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Grand Princess',\n",
        " 'Greece', 'Grenada', 'Guam', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana',\n",
        " 'Haiti', 'Holy See', 'Honduras', 'Hungary', 'Iceland', 'India', 'Indonesia',\n",
        " 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan',\n",
        " 'Kazakhstan', 'Kenya', 'Kosovo', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia',\n",
        " 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania',\n",
        " 'Luxembourg', 'MS Zaandam', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives',\n",
        " 'Mali', 'Malta', 'Marshall Islands', 'Mauritania', 'Mauritius', 'Mexico',\n",
        " 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Morocco', 'Mozambique',\n",
        " 'Myanmar', 'Namibia', 'Nepal', 'Netherlands', 'New Zealand', 'Nicaragua',\n",
        " 'Niger', 'Nigeria', 'North Macedonia', 'Northern Mariana Islands', 'Norway',\n",
        " 'Oman', 'Pakistan', 'Palestine', 'Panama', 'Papua New Guinea', 'Paraguay',\n",
        " 'Peru', 'Philippines', 'Poland', 'Portugal', 'Puerto Rico', 'Qatar',\n",
        " 'Republic of the Congo', 'Romania', 'Russia', 'Rwanda',\n",
        " 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines',\n",
        " 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal',\n",
        " 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia',\n",
        " 'Solomon Islands', 'Somalia', 'South Africa', 'South Korea', 'South Sudan',\n",
        " 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Swaziland', 'Sweden',\n",
        " 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand',\n",
        " 'Timor-Leste', 'Togo', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Uganda',\n",
        " 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States',\n",
        " 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela', 'Vietnam',\n",
        " 'Virgin Islands, U.S.', 'Yemen', 'Zambia', 'Zimbabwe']\n"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Linelist of case reports\n",
      "The number of cases is important, but linelist of case reports will helpful to understand the situation deeply. Linelist data was saved as `linelist`, an instance of `LinelistData` class. This dataset is from [Open COVID-19 Data Working Group](https://github.com/beoutbreakprepared/nCoV2019)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(linelist)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "covsirphy.cleaning.linelist.LinelistData"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Citation\n",
      "print(linelist.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Xu, B., Gutierrez, B., Mekaru, S. et al. Epidemiological data from the COVID-19 outbreak, real-time case information. Sci Data 7, 106 (2020). https://doi.org/10.1038/s41597-020-0448-0\n"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw dataset\n",
      "linelist.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>age</th>\n",
        "      <th>sex</th>\n",
        "      <th>province</th>\n",
        "      <th>country</th>\n",
        "      <th>date_admission_hospital</th>\n",
        "      <th>date_confirmation</th>\n",
        "      <th>symptoms</th>\n",
        "      <th>chronic_disease</th>\n",
        "      <th>outcome</th>\n",
        "      <th>date_death_or_discharge</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Callao</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676311</th>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "         age     sex province country date_admission_hospital  \\\n",
        "2676307   52  female     Lima    Peru                     NaN   \n",
        "2676308   52  female     Lima    Peru                     NaN   \n",
        "2676309   52    male   Callao    Peru                     NaN   \n",
        "2676310   52    male     Lima    Peru                     NaN   \n",
        "2676311  NaN     NaN      NaN     NaN                     NaN   \n",
        "\n",
        "        date_confirmation symptoms chronic_disease outcome  \\\n",
        "2676307        17.05.2020      NaN             NaN     NaN   \n",
        "2676308        17.05.2020      NaN             NaN     NaN   \n",
        "2676309        17.05.2020      NaN             NaN     NaN   \n",
        "2676310        17.05.2020      NaN             NaN     NaN   \n",
        "2676311               NaN      NaN             NaN     NaN   \n",
        "\n",
        "        date_death_or_discharge  \n",
        "2676307                     NaN  \n",
        "2676308                     NaN  \n",
        "2676309                     NaN  \n",
        "2676310                     NaN  \n",
        "2676311                     NaN  "
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned dataset\n",
      "linelist.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676306</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Coronel Portillo</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Callao</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "        Country          Province Hospitalized_date Confirmation_date  \\\n",
        "2676306    Peru  Coronel Portillo               NaT        2020-05-17   \n",
        "2676307    Peru              Lima               NaT        2020-05-17   \n",
        "2676308    Peru              Lima               NaT        2020-05-17   \n",
        "2676309    Peru            Callao               NaT        2020-05-17   \n",
        "2676310    Peru              Lima               NaT        2020-05-17   \n",
        "\n",
        "        Outcome_date  Confirmed  Infected  Recovered  Fatal Symptoms  \\\n",
        "2676306          NaT       True     False      False  False      NaN   \n",
        "2676307          NaT       True     False      False  False      NaN   \n",
        "2676308          NaT       True     False      False  False      NaN   \n",
        "2676309          NaT       True     False      False  False      NaN   \n",
        "2676310          NaT       True     False      False  False      NaN   \n",
        "\n",
        "        Chronic_disease   Age     Sex  \n",
        "2676306             NaN  52.0  female  \n",
        "2676307             NaN  52.0  female  \n",
        "2676308             NaN  52.0  female  \n",
        "2676309             NaN  52.0    male  \n",
        "2676310             NaN  52.0    male  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for specified area\n",
      "linelist.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>107</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-30</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>108</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-24</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:pneumonia:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>109</th>\n",
        "      <td>2020-10-01</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>30.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>110</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>111</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-26</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:joint pain:pneumonia</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "    Hospitalized_date Confirmation_date Outcome_date  Confirmed  Infected  \\\n",
        "107               NaT        2020-01-30          NaT       True     False   \n",
        "108               NaT        2020-01-24          NaT       True     False   \n",
        "109        2020-10-01        2020-01-15   2020-01-15       True     False   \n",
        "110               NaT        2020-01-25          NaT       True     False   \n",
        "111               NaT        2020-01-26          NaT       True     False   \n",
        "\n",
        "     Recovered  Fatal                     Symptoms Chronic_disease   Age  \\\n",
        "107      False  False                          NaN             NaN   NaN   \n",
        "108       True  False  fever:pneumonia:sore throat             NaN  40.0   \n",
        "109       True  False      cough:fever:sore throat             NaN  30.0   \n",
        "110      False  False                  cough:fever             NaN   NaN   \n",
        "111      False  False   fever:joint pain:pneumonia             NaN  40.0   \n",
        "\n",
        "        Sex  \n",
        "107  female  \n",
        "108    male  \n",
        "109    male  \n",
        "110  female  \n",
        "111    male  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for outcome (\"Recovered\" or \"Fatal\")\n",
      "linelist.closed(outcome=\"Recovered\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Recovered_date</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>272</th>\n",
        "      <td>Singapore</td>\n",
        "      <td>-</td>\n",
        "      <td>2020-02-02</td>\n",
        "      <td>2020-02-06</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>39.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>273</th>\n",
        "      <td>Malaysia</td>\n",
        "      <td>Johor</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>274</th>\n",
        "      <td>China</td>\n",
        "      <td>Gansu</td>\n",
        "      <td>2020-07-02</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>diarrhea</td>\n",
        "      <td>NaN</td>\n",
        "      <td>1.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>275</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>NaN</td>\n",
        "      <td>hypertension</td>\n",
        "      <td>NaN</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>276</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>2020-02-19</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "       Country Province Hospitalized_date Confirmation_date Recovered_date  \\\n",
        "272  Singapore        -        2020-02-02        2020-02-06     2020-02-17   \n",
        "273   Malaysia    Johor               NaT        2020-01-25     2020-02-08   \n",
        "274      China    Gansu        2020-07-02        2020-02-08     2020-02-17   \n",
        "275     Canada  Ontario               NaT        2020-01-25     2020-01-31   \n",
        "276     Canada  Ontario               NaT        2020-01-31     2020-02-19   \n",
        "\n",
        "        Symptoms Chronic_disease   Age     Sex  \n",
        "272          NaN             NaN  39.0  female  \n",
        "273  cough:fever             NaN  40.0    male  \n",
        "274     diarrhea             NaN   1.0  female  \n",
        "275          NaN    hypertension   NaN    male  \n",
        "276          NaN             NaN   NaN  female  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "As the median value of the period from confirmation to recovery, we can calculate recovery period."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Recovery period (integer) [days]\n",
      "linelist.recovery_period()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "12"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Population in each country\n",
      "Population values are necessary to calculate the number of susceptible people. Susceptible is a variable of SIR-derived models. This dataset was saved as `population_data`, an instance of `PopulationData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(population_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "covsirphy.cleaning.population.PopulationData"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>316168</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>316169</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-25</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>316170</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>316171</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>316172</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 28,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "316168  COL  Colombia  Vichada 2020-12-24      107808\n",
        "316169  COL  Colombia  Vichada 2020-12-25      107808\n",
        "316170  COL  Colombia  Vichada 2020-12-26      107808\n",
        "316171  COL  Colombia  Vichada 2020-12-27      107808\n",
        "316172  COL  Colombia  Vichada 2020-12-28      107808"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We will get the population values with `PopulationData.value()`."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# In a country\n",
      "population_data.value(\"Japan\", province=None)\n",
      "# In a country with ISO3 code\n",
      "# population_data.value(\"JPN\", province=None)\n",
      "# In a province (prefecture)\n",
      "# population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can update the population values."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Before\n",
      "population_before = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\"Before: {population_before}\")\n",
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_after = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\" After: {population_after}\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Before: 13942856\n",
        " After: 14002973\n"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Government Response Tracker (OxCGRT)\n",
      "Government responses are tracked with [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker). Because government responses and activities of persons change the parameter values of SIR-derived models, this dataset is significant when we try to forcast the number of cases.  \n",
      "With `DataLoader` class, the dataset was retrieved via [COVID-19 Data Hub](https://covid19datahub.io/) and saved as `oxcgrt_data`, an instance of `OxCGRTData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(oxcgrt_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "covsirphy.cleaning.oxcgrt.OxCGRTData"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>374974</th>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>374975</th>\n",
        "      <td>2020-12-25</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>374976</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>374977</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>374978</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "374974 2020-12-24  Colombia  COL               3                  1   \n",
        "374975 2020-12-25  Colombia  COL               3                  1   \n",
        "374976 2020-12-26  Colombia  COL               3                  1   \n",
        "374977 2020-12-27  Colombia  COL               3                  1   \n",
        "374978 2020-12-28  Colombia  COL               3                  1   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "374974              1                        3                  1   \n",
        "374975              1                        3                  1   \n",
        "374976              1                        3                  1   \n",
        "374977              1                        3                  1   \n",
        "374978              1                        3                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "374974                       1                               1   \n",
        "374975                       1                               1   \n",
        "374976                       1                               1   \n",
        "374977                       1                               1   \n",
        "374978                       1                               1   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "374974                                    4                      2   \n",
        "374975                                    4                      2   \n",
        "374976                                    4                      2   \n",
        "374977                                    4                      2   \n",
        "374978                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "374974               2                2             60.19  \n",
        "374975               2                2             60.19  \n",
        "374976               2                2             60.19  \n",
        "374977               2                2             60.19  \n",
        "374978               2                2             60.19  "
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>358</th>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>359</th>\n",
        "      <td>2020-12-25</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>360</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>361</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>362</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "358 2020-12-24               1                  1              1   \n",
        "359 2020-12-25               1                  1              1   \n",
        "360 2020-12-26               1                  1              1   \n",
        "361 2020-12-27               1                  1              1   \n",
        "362 2020-12-28               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "358                        0                  1                       1   \n",
        "359                        0                  1                       1   \n",
        "360                        0                  1                       1   \n",
        "361                        0                  1                       1   \n",
        "362                        0                  1                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "358                               1                                    3   \n",
        "359                               1                                    3   \n",
        "360                               1                                    3   \n",
        "361                               1                                    3   \n",
        "362                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "358                      2               3                2              53.7  \n",
        "359                      2               3                2              53.7  \n",
        "360                      2               3                2              53.7  \n",
        "361                      2               3                2              53.7  \n",
        "362                      2               3                2              53.7  "
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of tests\n",
      "The number of tests is also key information to understand the situation.\n",
      "This dataset was saved as `pcr_data`, an instance of `PCRData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(pcr_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "covsirphy.cleaning.pcr_data.PCRData"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(pcr_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# pcr_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 38
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "pcr_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14044</th>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4547779</td>\n",
        "      <td>206139</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14045</th>\n",
        "      <td>2020-12-25</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4613939</td>\n",
        "      <td>209980</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14046</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4676504</td>\n",
        "      <td>213547</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14047</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4711851</td>\n",
        "      <td>217312</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14048</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4725966</td>\n",
        "      <td>220236</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "            Date Country Province    Tests  Confirmed\n",
        "14044 2020-12-24   Japan        -  4547779     206139\n",
        "14045 2020-12-25   Japan        -  4613939     209980\n",
        "14046 2020-12-26   Japan        -  4676504     213547\n",
        "14047 2020-12-27   Japan        -  4711851     217312\n",
        "14048 2020-12-28   Japan        -  4725966     220236"
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "pcr_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# pcr_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 40,
       "text": [
        "Empty DataFrame\n",
        "Columns: [Date, Tests, Confirmed]\n",
        "Index: []"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Under the assumption that all tests were PCR test, we can calculate the positive rate of PCR tests as \"the number of confirmed cases per the number of tests\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Positive rate in Japan\n",
      "_ = pcr_data.positive_rate(\"Japan\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 41
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of vaccines\n",
      "The number of vaccinations is a key factor to end the outbreak as soon as possible. This dataset was saved as `vaccine_data`, an instance of `VaccineData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# The number of vaccines (will be prepared in 2.14.0)\n",
      "type(vaccine_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 42,
       "text": [
        "covsirphy.cleaning.vaccine_data.VaccineData"
       ]
      }
     ],
     "prompt_number": 42
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(vaccine_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "# vaccine_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 44
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "vaccine_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Product</th>\n",
        "      <th>Vaccinations</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>47</th>\n",
        "      <td>2020-12-21</td>\n",
        "      <td>United States</td>\n",
        "      <td>Moderna, Pfizer/BioNTech</td>\n",
        "      <td>614117</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>48</th>\n",
        "      <td>2020-12-23</td>\n",
        "      <td>United States</td>\n",
        "      <td>Moderna, Pfizer/BioNTech</td>\n",
        "      <td>1008025</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>49</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>United States</td>\n",
        "      <td>Moderna, Pfizer/BioNTech</td>\n",
        "      <td>1944585</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50</th>\n",
        "      <td>2020-12-13</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Pfizer/BioNTech</td>\n",
        "      <td>7852</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>51</th>\n",
        "      <td>2020-12-20</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Pfizer/BioNTech</td>\n",
        "      <td>22595</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 45,
       "text": [
        "         Date        Country                   Product  Vaccinations\n",
        "47 2020-12-21  United States  Moderna, Pfizer/BioNTech        614117\n",
        "48 2020-12-23  United States  Moderna, Pfizer/BioNTech       1008025\n",
        "49 2020-12-26  United States  Moderna, Pfizer/BioNTech       1944585\n",
        "50 2020-12-13          Wales           Pfizer/BioNTech          7852\n",
        "51 2020-12-20          Wales           Pfizer/BioNTech         22595"
       ]
      }
     ],
     "prompt_number": 45
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Registered countries\n",
      "vaccine_data.countries()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 46,
       "text": [
        "['Bahrain',\n",
        " 'Canada',\n",
        " 'Chile',\n",
        " 'China',\n",
        " 'Costa Rica',\n",
        " 'Denmark',\n",
        " 'England',\n",
        " 'Germany',\n",
        " 'Israel',\n",
        " 'Mexico',\n",
        " 'Northern Ireland',\n",
        " 'Russia',\n",
        " 'Scotland',\n",
        " 'United Kingdom',\n",
        " 'United States',\n",
        " 'Wales']"
       ]
      }
     ],
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "vaccine_data.subset(\"United Kingdom\").tail()\n",
      "# We can use ISO3 codes\n",
      "# pcr_data.subset(\"GBR\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Vaccinations</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-12-20</td>\n",
        "      <td>616933</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-12-21</td>\n",
        "      <td>616933</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-12-22</td>\n",
        "      <td>616933</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-12-23</td>\n",
        "      <td>616933</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>800000</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 47,
       "text": [
        "        Date  Vaccinations\n",
        "0 2020-12-20        616933\n",
        "1 2020-12-21        616933\n",
        "2 2020-12-22        616933\n",
        "3 2020-12-23        616933\n",
        "4 2020-12-24        800000"
       ]
      }
     ],
     "prompt_number": 47
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Population pyramid\n",
      "With population pyramid, we can divide the population to sub-groups. This will be useful when we analyse the meaning of parameters. For example, how many days go out is different between the sub-groups.\n",
      "This dataset was saved as `pyramid_data`, an instance of `PopulationPyramidData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Population pyramid (will be prepared in 2.14.0)\n",
      "type(pyramid_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 48,
       "text": [
        "covsirphy.cleaning.pyramid.PopulationPyramidData"
       ]
      }
     ],
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(pyramid_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "World Bank Group (2020), World Bank Open Data, https://data.worldbank.org/\n"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset will retrieved from the server when set\n",
      "pyramid_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving population pyramid dataset (Japan) from https://data.worldbank.org/\n"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Age</th>\n",
        "      <th>Population</th>\n",
        "      <th>Per_total</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>113</th>\n",
        "      <td>118</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>114</th>\n",
        "      <td>119</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>115</th>\n",
        "      <td>120</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>116</th>\n",
        "      <td>121</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>117</th>\n",
        "      <td>122</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 50,
       "text": [
        "     Age  Population  Per_total\n",
        "113  118      255035   0.002174\n",
        "114  119      255035   0.002174\n",
        "115  120      255035   0.002174\n",
        "116  121      255035   0.002174\n",
        "117  122      255035   0.002174"
       ]
      }
     ],
     "prompt_number": 50
    }
   ],
   "metadata": {}
  }
 ]
}
