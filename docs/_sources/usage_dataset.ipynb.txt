{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.5 64-bit ('covid19-sir': pipenv)",
   "metadata": {
    "interpreter": {
     "hash": "aa53c8c6e6798222a2084c11cc25017700a8d3ad495b587e3a634f357767115f"
    }
   },
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage: datasets\n",
      "Here, we will review the raw/cleaned datasets. `Scenario` class performs data cleaning internally using `JHUData` class and so on, but it is important to review the features and data types before analysing them."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Preparation\n",
      "Prepare the packages."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "'2.13.3-iota.new.56.280.420.422.429.449.fix.438.441.450'"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Dataset preparation\n",
      "Download the datasets to \"input\" directory and load them.\n",
      "\n",
      "If \"input\" directory has the datasets, `DataLoader` instance will load the local files. If the datasets were updated in remote servers, `DataLoader` will update the local files automatically and download the datasets to \"input\" directory and load them."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu()\n",
      "# Linelist of case reports\n",
      "linelist = data_loader.linelist()\n",
      "# Population in each country\n",
      "population_data = data_loader.population()\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt()\n",
      "# The number of tests\n",
      "pcr_data = data_loader.pcr()\n",
      "# The number of vaccinations (will be prepared in 2.14.0)\n",
      "vaccine_data = data_loader.vaccine()\n",
      "# Population pyramid (will be prepared in 2.14.0)\n",
      "pyramid_data = data_loader.pyramid()"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving datasets from COVID-19 Data Hub: https://covid19datahub.io/\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "Please set verbose=2 to see the detailed citation list.\n",
        "\n",
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving COVID-19 dataset in Japan from https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving linelist from Open COVID-19 Data Working Group repository: https://github.com/beoutbreakprepared/nCoV2019\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving COVID-19 vaccination dataset from https://covid.ourworldindata.org/data/\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of cases (JHU style)\n",
      "The main dataset is that of the number of cases and was saved as `jhu_data`, an instance of `JHUData` class. This includes \"Confirmed\", \"Infected\", \"Recovered\" and \"Fatal\". \"Infected\" was calculated as \"Confirmed - Recovered - Fatal\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(jhu_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.cleaning.jhu_data.JHUData"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The dataset will be retrieved from [COVID-19 Data Hub](https://covid19datahub.io/) and [Data folder of CovsirPhy project](https://github.com/lisphilar/covid19-sir/tree/master/data). Description of these projects will be shown as follows."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(jhu_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Detailed citation list of COVID-19 Data Hub\n",
      "# print(data_loader.covid19dh_citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "jhu_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ObservationDate</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Deaths</th>\n",
        "      <th>Population</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Province/State</th>\n",
        "      <th>Country/Region</th>\n",
        "      <th>school_closing</th>\n",
        "      <th>...</th>\n",
        "      <th>cancel_events</th>\n",
        "      <th>gatherings_restrictions</th>\n",
        "      <th>transport_closing</th>\n",
        "      <th>stay_home_restrictions</th>\n",
        "      <th>internal_movement_restrictions</th>\n",
        "      <th>international_movement_restrictions</th>\n",
        "      <th>information_campaigns</th>\n",
        "      <th>testing_policy</th>\n",
        "      <th>contact_tracing</th>\n",
        "      <th>stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>369290</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>4983</td>\n",
        "      <td>1137.0</td>\n",
        "      <td>1106</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>369291</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>4984</td>\n",
        "      <td>1137.0</td>\n",
        "      <td>1107</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>369292</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>4997</td>\n",
        "      <td>1141.0</td>\n",
        "      <td>1111</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>369293</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>5026</td>\n",
        "      <td>1148.0</td>\n",
        "      <td>1115</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>369294</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>5026</td>\n",
        "      <td>1148.0</td>\n",
        "      <td>1115</td>\n",
        "      <td>14</td>\n",
        "      <td>107808.0</td>\n",
        "      <td>COL</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>3</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 21 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "       ObservationDate  Tests  Confirmed  Recovered  Deaths  Population ISO3  \\\n",
        "369290      2020-12-26   4983     1137.0       1106      14    107808.0  COL   \n",
        "369291      2020-12-27   4984     1137.0       1107      14    107808.0  COL   \n",
        "369292      2020-12-28   4997     1141.0       1111      14    107808.0  COL   \n",
        "369293      2020-12-29   5026     1148.0       1115      14    107808.0  COL   \n",
        "369294      2020-12-30   5026     1148.0       1115      14    107808.0  COL   \n",
        "\n",
        "       Province/State Country/Region  school_closing  ...  cancel_events  \\\n",
        "369290        Vichada       Colombia               3  ...              1   \n",
        "369291        Vichada       Colombia               3  ...              1   \n",
        "369292        Vichada       Colombia               3  ...              1   \n",
        "369293        Vichada       Colombia               3  ...              1   \n",
        "369294        Vichada       Colombia               3  ...              1   \n",
        "\n",
        "        gatherings_restrictions  transport_closing  stay_home_restrictions  \\\n",
        "369290                        3                  1                       1   \n",
        "369291                        3                  1                       1   \n",
        "369292                        3                  1                       1   \n",
        "369293                        3                  1                       1   \n",
        "369294                        3                  1                       1   \n",
        "\n",
        "        internal_movement_restrictions  international_movement_restrictions  \\\n",
        "369290                               1                                    4   \n",
        "369291                               1                                    4   \n",
        "369292                               1                                    4   \n",
        "369293                               1                                    4   \n",
        "369294                               1                                    4   \n",
        "\n",
        "        information_campaigns  testing_policy  contact_tracing  \\\n",
        "369290                      2               2                2   \n",
        "369291                      2               2                2   \n",
        "369292                      2               2                2   \n",
        "369293                      2               2                2   \n",
        "369294                      2               2                2   \n",
        "\n",
        "        stringency_index  \n",
        "369290             60.19  \n",
        "369291             60.19  \n",
        "369292             60.19  \n",
        "369293             60.19  \n",
        "369294             60.19  \n",
        "\n",
        "[5 rows x 21 columns]"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "jhu_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14142</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>213547</td>\n",
        "      <td>30204</td>\n",
        "      <td>3155</td>\n",
        "      <td>180188</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14143</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>217312</td>\n",
        "      <td>31503</td>\n",
        "      <td>3213</td>\n",
        "      <td>182596</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14144</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>220236</td>\n",
        "      <td>32322</td>\n",
        "      <td>3252</td>\n",
        "      <td>184662</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14145</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>223120</td>\n",
        "      <td>32868</td>\n",
        "      <td>3306</td>\n",
        "      <td>186946</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14146</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>226596</td>\n",
        "      <td>33781</td>\n",
        "      <td>3349</td>\n",
        "      <td>189466</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "            Date Country Province  Confirmed  Infected  Fatal  Recovered\n",
        "14142 2020-12-26   Japan        -     213547     30204   3155     180188\n",
        "14143 2020-12-27   Japan        -     217312     31503   3213     182596\n",
        "14144 2020-12-28   Japan        -     220236     32322   3252     184662\n",
        "14145 2020-12-29   Japan        -     223120     32868   3306     186946\n",
        "14146 2020-12-30   Japan        -     226596     33781   3349     189466"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "jhu_data.cleaned().info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 365969 entries, 0 to 14146\n",
        "Data columns (total 7 columns):\n",
        " #   Column     Non-Null Count   Dtype         \n",
        "---  ------     --------------   -----         \n",
        " 0   Date       365969 non-null  datetime64[ns]\n",
        " 1   Country    365969 non-null  category      \n",
        " 2   Province   365969 non-null  category      \n",
        " 3   Confirmed  365969 non-null  int64         \n",
        " 4   Infected   365969 non-null  int64         \n",
        " 5   Fatal      365969 non-null  int64         \n",
        " 6   Recovered  365969 non-null  int64         \n",
        "dtypes: category(2), datetime64[ns](1), int64(4)\n",
        "memory usage: 18.2 MB\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Total number of cases in all countries with `JHUData.total()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Calculate total values\n",
      "total_df = jhu_data.total()\n",
      "total_df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-26</th>\n",
        "      <td>80440404</td>\n",
        "      <td>26985226</td>\n",
        "      <td>1760869</td>\n",
        "      <td>51694309</td>\n",
        "      <td>0.021890</td>\n",
        "      <td>0.642641</td>\n",
        "      <td>0.032941</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-27</th>\n",
        "      <td>80877754</td>\n",
        "      <td>27146649</td>\n",
        "      <td>1767874</td>\n",
        "      <td>51963231</td>\n",
        "      <td>0.021859</td>\n",
        "      <td>0.642491</td>\n",
        "      <td>0.032902</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-28</th>\n",
        "      <td>81375903</td>\n",
        "      <td>27368958</td>\n",
        "      <td>1776324</td>\n",
        "      <td>52230621</td>\n",
        "      <td>0.021829</td>\n",
        "      <td>0.641844</td>\n",
        "      <td>0.032891</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-29</th>\n",
        "      <td>81999831</td>\n",
        "      <td>27660033</td>\n",
        "      <td>1789958</td>\n",
        "      <td>52549840</td>\n",
        "      <td>0.021829</td>\n",
        "      <td>0.640853</td>\n",
        "      <td>0.032940</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-30</th>\n",
        "      <td>82003636</td>\n",
        "      <td>27661245</td>\n",
        "      <td>1790003</td>\n",
        "      <td>52552388</td>\n",
        "      <td>0.021828</td>\n",
        "      <td>0.640854</td>\n",
        "      <td>0.032939</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "            Confirmed  Infected    Fatal  Recovered  Fatal per Confirmed  \\\n",
        "Date                                                                       \n",
        "2020-12-26   80440404  26985226  1760869   51694309             0.021890   \n",
        "2020-12-27   80877754  27146649  1767874   51963231             0.021859   \n",
        "2020-12-28   81375903  27368958  1776324   52230621             0.021829   \n",
        "2020-12-29   81999831  27660033  1789958   52549840             0.021829   \n",
        "2020-12-30   82003636  27661245  1790003   52552388             0.021828   \n",
        "\n",
        "            Recovered per Confirmed  Fatal per (Fatal or Recovered)  \n",
        "Date                                                                 \n",
        "2020-12-26                 0.642641                        0.032941  \n",
        "2020-12-27                 0.642491                        0.032902  \n",
        "2020-12-28                 0.641844                        0.032891  \n",
        "2020-12-29                 0.640853                        0.032940  \n",
        "2020-12-30                 0.640854                        0.032939  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Plot the total values\n",
      "cs.line_plot(total_df[[\"Infected\", \"Fatal\", \"Recovered\"]], \"Total number of cases over time\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Statistics of rate values in all countries\n",
      "total_df.loc[:, total_df.columns.str.contains(\"per\")].describe().T"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>count</th>\n",
        "      <th>mean</th>\n",
        "      <th>std</th>\n",
        "      <th>min</th>\n",
        "      <th>25%</th>\n",
        "      <th>50%</th>\n",
        "      <th>75%</th>\n",
        "      <th>max</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>Fatal per Confirmed</th>\n",
        "      <td>364.0</td>\n",
        "      <td>0.038349</td>\n",
        "      <td>0.017303</td>\n",
        "      <td>0.00000</td>\n",
        "      <td>0.024935</td>\n",
        "      <td>0.034078</td>\n",
        "      <td>0.049128</td>\n",
        "      <td>0.074103</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Recovered per Confirmed</th>\n",
        "      <td>364.0</td>\n",
        "      <td>0.431568</td>\n",
        "      <td>0.251753</td>\n",
        "      <td>0.00132</td>\n",
        "      <td>0.200450</td>\n",
        "      <td>0.528685</td>\n",
        "      <td>0.647271</td>\n",
        "      <td>1.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Fatal per (Fatal or Recovered)</th>\n",
        "      <td>364.0</td>\n",
        "      <td>0.201804</td>\n",
        "      <td>0.268669</td>\n",
        "      <td>0.00000</td>\n",
        "      <td>0.040002</td>\n",
        "      <td>0.075403</td>\n",
        "      <td>0.221830</td>\n",
        "      <td>0.942029</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "                                count      mean       std      min       25%  \\\n",
        "Fatal per Confirmed             364.0  0.038349  0.017303  0.00000  0.024935   \n",
        "Recovered per Confirmed         364.0  0.431568  0.251753  0.00132  0.200450   \n",
        "Fatal per (Fatal or Recovered)  364.0  0.201804  0.268669  0.00000  0.040002   \n",
        "\n",
        "                                     50%       75%       max  \n",
        "Fatal per Confirmed             0.034078  0.049128  0.074103  \n",
        "Recovered per Confirmed         0.528685  0.647271  1.000000  \n",
        "Fatal per (Fatal or Recovered)  0.075403  0.221830  0.942029  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can create a subset for a country using `JHUData.subset()` method."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "df, _ = jhu_data.records(\"Japan\")\n",
      "df.tail()\n",
      "# We can use ISO3 code etc.\n",
      "# df, _ = jhu_data.records(\"JPN\")\n",
      "# df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>324</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>213547</td>\n",
        "      <td>30204</td>\n",
        "      <td>3155</td>\n",
        "      <td>180188</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>325</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>217312</td>\n",
        "      <td>31503</td>\n",
        "      <td>3213</td>\n",
        "      <td>182596</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>326</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>220236</td>\n",
        "      <td>32322</td>\n",
        "      <td>3252</td>\n",
        "      <td>184662</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>327</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>223120</td>\n",
        "      <td>32868</td>\n",
        "      <td>3306</td>\n",
        "      <td>186946</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>328</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>226596</td>\n",
        "      <td>33781</td>\n",
        "      <td>3349</td>\n",
        "      <td>189466</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "324 2020-12-26     213547     30204   3155     180188\n",
        "325 2020-12-27     217312     31503   3213     182596\n",
        "326 2020-12-28     220236     32322   3252     184662\n",
        "327 2020-12-29     223120     32868   3306     186946\n",
        "328 2020-12-30     226596     33781   3349     189466"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Province (\"prefecture\" for Japan) name can be specified."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df, _ = jhu_data.records(\"Japan\", province=\"Tokyo\")\n",
      "df.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Recovered</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>265</th>\n",
        "      <td>2020-12-25</td>\n",
        "      <td>54902</td>\n",
        "      <td>10473</td>\n",
        "      <td>597</td>\n",
        "      <td>43832</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>266</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>55851</td>\n",
        "      <td>10845</td>\n",
        "      <td>607</td>\n",
        "      <td>44399</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>267</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>56559</td>\n",
        "      <td>10953</td>\n",
        "      <td>607</td>\n",
        "      <td>44999</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>268</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>57040</td>\n",
        "      <td>10838</td>\n",
        "      <td>613</td>\n",
        "      <td>45589</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>269</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>57896</td>\n",
        "      <td>11068</td>\n",
        "      <td>618</td>\n",
        "      <td>46210</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "          Date  Confirmed  Infected  Fatal  Recovered\n",
        "265 2020-12-25      54902     10473    597      43832\n",
        "266 2020-12-26      55851     10845    607      44399\n",
        "267 2020-12-27      56559     10953    607      44999\n",
        "268 2020-12-28      57040     10838    613      45589\n",
        "269 2020-12-29      57896     11068    618      46210"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Countries we can select\n",
      "pprint(jhu_data.countries(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola',\n",
        " 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Australia', 'Austria',\n",
        " 'Azerbaijan', 'Bahamas', 'Bahrain', 'Bangladesh', 'Barbados', 'Belarus',\n",
        " 'Belgium', 'Belize', 'Benin', 'Bermuda', 'Bhutan', 'Bolivia',\n",
        " 'Bosnia and Herzegovina', 'Botswana', 'Brazil', 'Brunei', 'Bulgaria',\n",
        " 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Canada', 'Cape Verde',\n",
        " 'Central African Republic', 'Chad', 'Chile', 'China', 'Colombia', 'Comoros',\n",
        " 'Costa Atlantica', 'Costa Rica', \"Cote d'Ivoire\", 'Croatia', 'Cuba', 'Cyprus',\n",
        " 'Czech Republic', 'Democratic Republic of the Congo', 'Denmark', 'Djibouti',\n",
        " 'Dominica', 'Dominican Republic', 'Ecuador', 'Egypt', 'El Salvador',\n",
        " 'Equatorial Guinea', 'Eritrea', 'Estonia', 'Ethiopia', 'Fiji', 'Finland',\n",
        " 'France', 'Gabon', 'Gambia', 'Georgia', 'Germany', 'Ghana', 'Grand Princess',\n",
        " 'Greece', 'Grenada', 'Guam', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana',\n",
        " 'Haiti', 'Holy See', 'Honduras', 'Hungary', 'Iceland', 'India', 'Indonesia',\n",
        " 'Iran', 'Iraq', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan',\n",
        " 'Kazakhstan', 'Kenya', 'Kosovo', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Latvia',\n",
        " 'Lebanon', 'Lesotho', 'Liberia', 'Libya', 'Liechtenstein', 'Lithuania',\n",
        " 'Luxembourg', 'MS Zaandam', 'Madagascar', 'Malawi', 'Malaysia', 'Maldives',\n",
        " 'Mali', 'Malta', 'Marshall Islands', 'Mauritania', 'Mauritius', 'Mexico',\n",
        " 'Moldova', 'Monaco', 'Mongolia', 'Montenegro', 'Morocco', 'Mozambique',\n",
        " 'Myanmar', 'Namibia', 'Nepal', 'Netherlands', 'New Zealand', 'Nicaragua',\n",
        " 'Niger', 'Nigeria', 'North Macedonia', 'Northern Mariana Islands', 'Norway',\n",
        " 'Oman', 'Pakistan', 'Palestine', 'Panama', 'Papua New Guinea', 'Paraguay',\n",
        " 'Peru', 'Philippines', 'Poland', 'Portugal', 'Puerto Rico', 'Qatar',\n",
        " 'Republic of the Congo', 'Romania', 'Russia', 'Rwanda',\n",
        " 'Saint Kitts and Nevis', 'Saint Lucia', 'Saint Vincent and the Grenadines',\n",
        " 'Samoa', 'San Marino', 'Sao Tome and Principe', 'Saudi Arabia', 'Senegal',\n",
        " 'Serbia', 'Seychelles', 'Sierra Leone', 'Singapore', 'Slovakia', 'Slovenia',\n",
        " 'Solomon Islands', 'Somalia', 'South Africa', 'South Korea', 'South Sudan',\n",
        " 'Spain', 'Sri Lanka', 'Sudan', 'Suriname', 'Swaziland', 'Sweden',\n",
        " 'Switzerland', 'Syria', 'Taiwan', 'Tajikistan', 'Tanzania', 'Thailand',\n",
        " 'Timor-Leste', 'Togo', 'Trinidad and Tobago', 'Tunisia', 'Turkey', 'Uganda',\n",
        " 'Ukraine', 'United Arab Emirates', 'United Kingdom', 'United States',\n",
        " 'Uruguay', 'Uzbekistan', 'Vanuatu', 'Venezuela', 'Vietnam',\n",
        " 'Virgin Islands, U.S.', 'Yemen', 'Zambia', 'Zimbabwe']\n"
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Linelist of case reports\n",
      "The number of cases is important, but linelist of case reports will helpful to understand the situation deeply. Linelist data was saved as `linelist`, an instance of `LinelistData` class. This dataset is from [Open COVID-19 Data Working Group](https://github.com/beoutbreakprepared/nCoV2019)."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(linelist)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "covsirphy.cleaning.linelist.LinelistData"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Citation\n",
      "print(linelist.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Xu, B., Gutierrez, B., Mekaru, S. et al. Epidemiological data from the COVID-19 outbreak, real-time case information. Sci Data 7, 106 (2020). https://doi.org/10.1038/s41597-020-0448-0\n"
       ]
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw dataset\n",
      "linelist.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>age</th>\n",
        "      <th>sex</th>\n",
        "      <th>province</th>\n",
        "      <th>country</th>\n",
        "      <th>date_admission_hospital</th>\n",
        "      <th>date_confirmation</th>\n",
        "      <th>symptoms</th>\n",
        "      <th>chronic_disease</th>\n",
        "      <th>outcome</th>\n",
        "      <th>date_death_or_discharge</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>52</td>\n",
        "      <td>female</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Callao</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>52</td>\n",
        "      <td>male</td>\n",
        "      <td>Lima</td>\n",
        "      <td>Peru</td>\n",
        "      <td>NaN</td>\n",
        "      <td>17.05.2020</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676311</th>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "         age     sex province country date_admission_hospital  \\\n",
        "2676307   52  female     Lima    Peru                     NaN   \n",
        "2676308   52  female     Lima    Peru                     NaN   \n",
        "2676309   52    male   Callao    Peru                     NaN   \n",
        "2676310   52    male     Lima    Peru                     NaN   \n",
        "2676311  NaN     NaN      NaN     NaN                     NaN   \n",
        "\n",
        "        date_confirmation symptoms chronic_disease outcome  \\\n",
        "2676307        17.05.2020      NaN             NaN     NaN   \n",
        "2676308        17.05.2020      NaN             NaN     NaN   \n",
        "2676309        17.05.2020      NaN             NaN     NaN   \n",
        "2676310        17.05.2020      NaN             NaN     NaN   \n",
        "2676311               NaN      NaN             NaN     NaN   \n",
        "\n",
        "        date_death_or_discharge  \n",
        "2676307                     NaN  \n",
        "2676308                     NaN  \n",
        "2676309                     NaN  \n",
        "2676310                     NaN  \n",
        "2676311                     NaN  "
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned dataset\n",
      "linelist.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2676306</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Coronel Portillo</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676307</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676308</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676309</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Callao</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2676310</th>\n",
        "      <td>Peru</td>\n",
        "      <td>Lima</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-05-17</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>52.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "        Country          Province Hospitalized_date Confirmation_date  \\\n",
        "2676306    Peru  Coronel Portillo               NaT        2020-05-17   \n",
        "2676307    Peru              Lima               NaT        2020-05-17   \n",
        "2676308    Peru              Lima               NaT        2020-05-17   \n",
        "2676309    Peru            Callao               NaT        2020-05-17   \n",
        "2676310    Peru              Lima               NaT        2020-05-17   \n",
        "\n",
        "        Outcome_date  Confirmed  Infected  Recovered  Fatal Symptoms  \\\n",
        "2676306          NaT       True     False      False  False      NaN   \n",
        "2676307          NaT       True     False      False  False      NaN   \n",
        "2676308          NaT       True     False      False  False      NaN   \n",
        "2676309          NaT       True     False      False  False      NaN   \n",
        "2676310          NaT       True     False      False  False      NaN   \n",
        "\n",
        "        Chronic_disease   Age     Sex  \n",
        "2676306             NaN  52.0  female  \n",
        "2676307             NaN  52.0  female  \n",
        "2676308             NaN  52.0  female  \n",
        "2676309             NaN  52.0    male  \n",
        "2676310             NaN  52.0    male  "
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for specified area\n",
      "linelist.subset(\"Japan\", province=\"Tokyo\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Outcome_date</th>\n",
        "      <th>Confirmed</th>\n",
        "      <th>Infected</th>\n",
        "      <th>Recovered</th>\n",
        "      <th>Fatal</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>107</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-30</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>108</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-24</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:pneumonia:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>109</th>\n",
        "      <td>2020-10-01</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>2020-01-15</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever:sore throat</td>\n",
        "      <td>NaN</td>\n",
        "      <td>30.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>110</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>111</th>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-26</td>\n",
        "      <td>NaT</td>\n",
        "      <td>True</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>False</td>\n",
        "      <td>fever:joint pain:pneumonia</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 22,
       "text": [
        "    Hospitalized_date Confirmation_date Outcome_date  Confirmed  Infected  \\\n",
        "107               NaT        2020-01-30          NaT       True     False   \n",
        "108               NaT        2020-01-24          NaT       True     False   \n",
        "109        2020-10-01        2020-01-15   2020-01-15       True     False   \n",
        "110               NaT        2020-01-25          NaT       True     False   \n",
        "111               NaT        2020-01-26          NaT       True     False   \n",
        "\n",
        "     Recovered  Fatal                     Symptoms Chronic_disease   Age  \\\n",
        "107      False  False                          NaN             NaN   NaN   \n",
        "108       True  False  fever:pneumonia:sore throat             NaN  40.0   \n",
        "109       True  False      cough:fever:sore throat             NaN  30.0   \n",
        "110      False  False                  cough:fever             NaN   NaN   \n",
        "111      False  False   fever:joint pain:pneumonia             NaN  40.0   \n",
        "\n",
        "        Sex  \n",
        "107  female  \n",
        "108    male  \n",
        "109    male  \n",
        "110  female  \n",
        "111    male  "
       ]
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for outcome (\"Recovered\" or \"Fatal\")\n",
      "linelist.closed(outcome=\"Recovered\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Hospitalized_date</th>\n",
        "      <th>Confirmation_date</th>\n",
        "      <th>Recovered_date</th>\n",
        "      <th>Symptoms</th>\n",
        "      <th>Chronic_disease</th>\n",
        "      <th>Age</th>\n",
        "      <th>Sex</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>272</th>\n",
        "      <td>Singapore</td>\n",
        "      <td>-</td>\n",
        "      <td>2020-02-02</td>\n",
        "      <td>2020-02-06</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>39.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>273</th>\n",
        "      <td>Malaysia</td>\n",
        "      <td>Johor</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>cough:fever</td>\n",
        "      <td>NaN</td>\n",
        "      <td>40.0</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>274</th>\n",
        "      <td>China</td>\n",
        "      <td>Gansu</td>\n",
        "      <td>2020-07-02</td>\n",
        "      <td>2020-02-08</td>\n",
        "      <td>2020-02-17</td>\n",
        "      <td>diarrhea</td>\n",
        "      <td>NaN</td>\n",
        "      <td>1.0</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>275</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-25</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>NaN</td>\n",
        "      <td>hypertension</td>\n",
        "      <td>NaN</td>\n",
        "      <td>male</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>276</th>\n",
        "      <td>Canada</td>\n",
        "      <td>Ontario</td>\n",
        "      <td>NaT</td>\n",
        "      <td>2020-01-31</td>\n",
        "      <td>2020-02-19</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "      <td>female</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "       Country Province Hospitalized_date Confirmation_date Recovered_date  \\\n",
        "272  Singapore        -        2020-02-02        2020-02-06     2020-02-17   \n",
        "273   Malaysia    Johor               NaT        2020-01-25     2020-02-08   \n",
        "274      China    Gansu        2020-07-02        2020-02-08     2020-02-17   \n",
        "275     Canada  Ontario               NaT        2020-01-25     2020-01-31   \n",
        "276     Canada  Ontario               NaT        2020-01-31     2020-02-19   \n",
        "\n",
        "        Symptoms Chronic_disease   Age     Sex  \n",
        "272          NaN             NaN  39.0  female  \n",
        "273  cough:fever             NaN  40.0    male  \n",
        "274     diarrhea             NaN   1.0  female  \n",
        "275          NaN    hypertension   NaN    male  \n",
        "276          NaN             NaN   NaN  female  "
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "As the median value of the period from confirmation to recovery, we can calculate recovery period."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Recovery period (integer) [days]\n",
      "linelist.recovery_period()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "12"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Population in each country\n",
      "Population values are necessary to calculate the number of susceptible people. Susceptible is a variable of SIR-derived models. This dataset was saved as `population_data`, an instance of `PopulationData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(population_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "covsirphy.cleaning.population.PopulationData"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(population_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# population_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "population_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>ISO3</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Date</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>317238</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>317239</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>317240</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>317241</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>317242</th>\n",
        "      <td>COL</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>Vichada</td>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>107808</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 28,
       "text": [
        "       ISO3   Country Province       Date  Population\n",
        "317238  COL  Colombia  Vichada 2020-12-26      107808\n",
        "317239  COL  Colombia  Vichada 2020-12-27      107808\n",
        "317240  COL  Colombia  Vichada 2020-12-28      107808\n",
        "317241  COL  Colombia  Vichada 2020-12-29      107808\n",
        "317242  COL  Colombia  Vichada 2020-12-30      107808"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We will get the population values with `PopulationData.value()`."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# In a country\n",
      "population_data.value(\"Japan\", province=None)\n",
      "# In a country with ISO3 code\n",
      "# population_data.value(\"JPN\", province=None)\n",
      "# In a province (prefecture)\n",
      "# population_data.value(\"Japan\", province=\"Tokyo\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 29,
       "text": [
        "126529100"
       ]
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "We can update the population values."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Before\n",
      "population_before = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\"Before: {population_before}\")\n",
      "# Register population value of Tokyo in Japan\n",
      "# https://www.metro.tokyo.lg.jp/tosei/hodohappyo/press/2020/06/11/07.html\n",
      "population_data.update(14_002_973, \"Japan\", province=\"Tokyo\")\n",
      "population_after = population_data.value(\"Japan\", province=\"Tokyo\")\n",
      "print(f\" After: {population_after}\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Before: 13942856\n",
        " After: 14002973\n"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Government Response Tracker (OxCGRT)\n",
      "Government responses are tracked with [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker). Because government responses and activities of persons change the parameter values of SIR-derived models, this dataset is significant when we try to forcast the number of cases.  \n",
      "With `DataLoader` class, the dataset was retrieved via [COVID-19 Data Hub](https://covid19datahub.io/) and saved as `oxcgrt_data`, an instance of `OxCGRTData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(oxcgrt_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "covsirphy.cleaning.oxcgrt.OxCGRTData"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# oxcgrt_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 33
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "oxcgrt_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>ISO3</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>369290</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>369291</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>369292</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>369293</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>369294</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>Colombia</td>\n",
        "      <td>COL</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>4</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>2</td>\n",
        "      <td>60.19</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 34,
       "text": [
        "             Date   Country ISO3  School_closing  Workplace_closing  \\\n",
        "369290 2020-12-26  Colombia  COL               3                  1   \n",
        "369291 2020-12-27  Colombia  COL               3                  1   \n",
        "369292 2020-12-28  Colombia  COL               3                  1   \n",
        "369293 2020-12-29  Colombia  COL               3                  1   \n",
        "369294 2020-12-30  Colombia  COL               3                  1   \n",
        "\n",
        "        Cancel_events  Gatherings_restrictions  Transport_closing  \\\n",
        "369290              1                        3                  1   \n",
        "369291              1                        3                  1   \n",
        "369292              1                        3                  1   \n",
        "369293              1                        3                  1   \n",
        "369294              1                        3                  1   \n",
        "\n",
        "        Stay_home_restrictions  Internal_movement_restrictions  \\\n",
        "369290                       1                               1   \n",
        "369291                       1                               1   \n",
        "369292                       1                               1   \n",
        "369293                       1                               1   \n",
        "369294                       1                               1   \n",
        "\n",
        "        International_movement_restrictions  Information_campaigns  \\\n",
        "369290                                    4                      2   \n",
        "369291                                    4                      2   \n",
        "369292                                    4                      2   \n",
        "369293                                    4                      2   \n",
        "369294                                    4                      2   \n",
        "\n",
        "        Testing_policy  Contact_tracing  Stringency_index  \n",
        "369290               2                2             60.19  \n",
        "369291               2                2             60.19  \n",
        "369292               2                2             60.19  \n",
        "369293               2                2             60.19  \n",
        "369294               2                2             60.19  "
       ]
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "oxcgrt_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# oxcgrt_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>School_closing</th>\n",
        "      <th>Workplace_closing</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>360</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>361</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>362</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>363</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>364</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>3</td>\n",
        "      <td>2</td>\n",
        "      <td>53.7</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 35,
       "text": [
        "          Date  School_closing  Workplace_closing  Cancel_events  \\\n",
        "360 2020-12-26               1                  1              1   \n",
        "361 2020-12-27               1                  1              1   \n",
        "362 2020-12-28               1                  1              1   \n",
        "363 2020-12-29               1                  1              1   \n",
        "364 2020-12-30               1                  1              1   \n",
        "\n",
        "     Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "360                        0                  1                       1   \n",
        "361                        0                  1                       1   \n",
        "362                        0                  1                       1   \n",
        "363                        0                  1                       1   \n",
        "364                        0                  1                       1   \n",
        "\n",
        "     Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "360                               1                                    3   \n",
        "361                               1                                    3   \n",
        "362                               1                                    3   \n",
        "363                               1                                    3   \n",
        "364                               1                                    3   \n",
        "\n",
        "     Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "360                      2               3                2              53.7  \n",
        "361                      2               3                2              53.7  \n",
        "362                      2               3                2              53.7  \n",
        "363                      2               3                2              53.7  \n",
        "364                      2               3                2              53.7  "
       ]
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of tests\n",
      "The number of tests is also key information to understand the situation.\n",
      "This dataset was saved as `pcr_data`, an instance of `PCRData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(pcr_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 36,
       "text": [
        "covsirphy.cleaning.pcr_data.PCRData"
       ]
      }
     ],
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(pcr_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n",
        "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n",
        "Lisphilar (2020), COVID-19 dataset in Japan, GitHub repository, https://github.com/lisphilar/covid19-sir/data/japan\n"
       ]
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data (the same as jhu_data)\n",
      "# pcr_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 38
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "pcr_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Province</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>14142</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4676504</td>\n",
        "      <td>213547</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14143</th>\n",
        "      <td>2020-12-27</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4711851</td>\n",
        "      <td>217312</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14144</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4725966</td>\n",
        "      <td>220236</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14145</th>\n",
        "      <td>2020-12-29</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4802239</td>\n",
        "      <td>223120</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14146</th>\n",
        "      <td>2020-12-30</td>\n",
        "      <td>Japan</td>\n",
        "      <td>-</td>\n",
        "      <td>4829069</td>\n",
        "      <td>226596</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 39,
       "text": [
        "            Date Country Province    Tests  Confirmed\n",
        "14142 2020-12-26   Japan        -  4676504     213547\n",
        "14143 2020-12-27   Japan        -  4711851     217312\n",
        "14144 2020-12-28   Japan        -  4725966     220236\n",
        "14145 2020-12-29   Japan        -  4802239     223120\n",
        "14146 2020-12-30   Japan        -  4829069     226596"
       ]
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "pcr_data.subset(\"Japan\").tail()\n",
      "# We can use ISO3 codes\n",
      "# pcr_data.subset(\"JPN\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Tests</th>\n",
        "      <th>Confirmed</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 40,
       "text": [
        "Empty DataFrame\n",
        "Columns: [Date, Tests, Confirmed]\n",
        "Index: []"
       ]
      }
     ],
     "prompt_number": 40
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Under the assumption that all tests were PCR test, we can calculate the positive rate of PCR tests as \"the number of confirmed cases per the number of tests\"."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Positive rate in Japan\n",
      "_ = pcr_data.positive_rate(\"Japan\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 41
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### The number of vaccinations\n",
      "The number of vaccinations is a key factor to end the outbreak as soon as possible. This dataset was saved as `vaccine_data`, an instance of `VaccineData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# The number of vaccinations (will be prepared in 2.14.0)\n",
      "type(vaccine_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 42,
       "text": [
        "covsirphy.cleaning.vaccine_data.VaccineData"
       ]
      }
     ],
     "prompt_number": 42
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(vaccine_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Hasell, J., Mathieu, E., Beltekian, D. et al. A cross-country database of COVID-19 testing. Sci Data 7, 345 (2020). https://doi.org/10.1038/s41597-020-00688-8\n"
       ]
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Raw data\n",
      "# vaccine_data.raw.tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 44
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Cleaned data\n",
      "vaccine_data.cleaned().tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>Product</th>\n",
        "      <th>Vaccinations</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>73</th>\n",
        "      <td>2020-12-23</td>\n",
        "      <td>United States</td>\n",
        "      <td>Moderna, Pfizer/BioNTech</td>\n",
        "      <td>1008025</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>74</th>\n",
        "      <td>2020-12-26</td>\n",
        "      <td>United States</td>\n",
        "      <td>Moderna, Pfizer/BioNTech</td>\n",
        "      <td>1944585</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75</th>\n",
        "      <td>2020-12-28</td>\n",
        "      <td>United States</td>\n",
        "      <td>Moderna, Pfizer/BioNTech</td>\n",
        "      <td>2127143</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>76</th>\n",
        "      <td>2020-12-13</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Pfizer/BioNTech</td>\n",
        "      <td>7852</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>77</th>\n",
        "      <td>2020-12-20</td>\n",
        "      <td>Wales</td>\n",
        "      <td>Pfizer/BioNTech</td>\n",
        "      <td>22595</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 45,
       "text": [
        "         Date        Country                   Product  Vaccinations\n",
        "73 2020-12-23  United States  Moderna, Pfizer/BioNTech       1008025\n",
        "74 2020-12-26  United States  Moderna, Pfizer/BioNTech       1944585\n",
        "75 2020-12-28  United States  Moderna, Pfizer/BioNTech       2127143\n",
        "76 2020-12-13          Wales           Pfizer/BioNTech          7852\n",
        "77 2020-12-20          Wales           Pfizer/BioNTech         22595"
       ]
      }
     ],
     "prompt_number": 45
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Registered countries\n",
      "vaccine_data.countries()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 46,
       "text": [
        "['Bahrain',\n",
        " 'Bulgaria',\n",
        " 'Canada',\n",
        " 'Chile',\n",
        " 'China',\n",
        " 'Costa Rica',\n",
        " 'Denmark',\n",
        " 'England',\n",
        " 'Estonia',\n",
        " 'Germany',\n",
        " 'Hungary',\n",
        " 'Israel',\n",
        " 'Italy',\n",
        " 'Kuwait',\n",
        " 'Latvia',\n",
        " 'Lithuania',\n",
        " 'Mexico',\n",
        " 'Northern Ireland',\n",
        " 'Oman',\n",
        " 'Poland',\n",
        " 'Portugal',\n",
        " 'Romania',\n",
        " 'Russia',\n",
        " 'Scotland',\n",
        " 'United Kingdom',\n",
        " 'United States',\n",
        " 'Wales']"
       ]
      }
     ],
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset for a country\n",
      "vaccine_data.subset(\"United Kingdom\").tail()\n",
      "# We can use ISO3 codes\n",
      "# pcr_data.subset(\"GBR\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Vaccinations</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-12-20</td>\n",
        "      <td>616933</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-12-21</td>\n",
        "      <td>616933</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-12-22</td>\n",
        "      <td>616933</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-12-23</td>\n",
        "      <td>616933</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-12-24</td>\n",
        "      <td>800000</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 47,
       "text": [
        "        Date  Vaccinations\n",
        "0 2020-12-20        616933\n",
        "1 2020-12-21        616933\n",
        "2 2020-12-22        616933\n",
        "3 2020-12-23        616933\n",
        "4 2020-12-24        800000"
       ]
      }
     ],
     "prompt_number": 47
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "### Population pyramid\n",
      "With population pyramid, we can divide the population to sub-groups. This will be useful when we analyse the meaning of parameters. For example, how many days go out is different between the sub-groups.\n",
      "This dataset was saved as `pyramid_data`, an instance of `PopulationPyramidData` class."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Population pyramid (will be prepared in 2.14.0)\n",
      "type(pyramid_data)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 48,
       "text": [
        "covsirphy.cleaning.pyramid.PopulationPyramidData"
       ]
      }
     ],
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Description/citation\n",
      "print(pyramid_data.citation)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "World Bank Group (2020), World Bank Open Data, https://data.worldbank.org/\n"
       ]
      }
     ],
     "prompt_number": 49
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Subset will retrieved from the server when set\n",
      "pyramid_data.subset(\"Japan\").tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Retrieving population pyramid dataset (Japan) from https://data.worldbank.org/\n"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Age</th>\n",
        "      <th>Population</th>\n",
        "      <th>Per_total</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>113</th>\n",
        "      <td>118</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>114</th>\n",
        "      <td>119</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>115</th>\n",
        "      <td>120</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>116</th>\n",
        "      <td>121</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>117</th>\n",
        "      <td>122</td>\n",
        "      <td>255035</td>\n",
        "      <td>0.002174</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 50,
       "text": [
        "     Age  Population  Per_total\n",
        "113  118      255035   0.002174\n",
        "114  119      255035   0.002174\n",
        "115  120      255035   0.002174\n",
        "116  121      255035   0.002174\n",
        "117  122      255035   0.002174"
       ]
      }
     ],
     "prompt_number": 50
    }
   ],
   "metadata": {}
  }
 ]
}
