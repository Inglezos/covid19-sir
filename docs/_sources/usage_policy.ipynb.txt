{
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.2 64-bit ('.venv': venv)",
   "name": "python_defaultSpec_1597669925034"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2-final"
  },
  "name": ""
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "# Usage (details: policy measures)\n",
      "Here, we will analyse the relationship of policy measures and parameter values of SIR-derived ODE models. Policy measures are tracked by [Oxford Covid-19 Government Response Tracker (OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker)."
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Preparation"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users\n",
      "# !pip install covsirphy\n",
      "# Developers (Note: this notebook is in example directory)\n",
      "import os\n",
      "os.chdir(\"../\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from pprint import pprint"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import covsirphy as cs\n",
      "cs.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "'2.13.0-alpha.fix.417'"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Standard users and developers\n",
      "data_loader = cs.DataLoader(\"input\")\n",
      "# The number of cases (JHU style)\n",
      "jhu_data = data_loader.jhu(verbose=False)\n",
      "# Population in each country\n",
      "population_data = data_loader.population(verbose=False)\n",
      "# Government Response Tracker (OxCGRT)\n",
      "oxcgrt_data = data_loader.oxcgrt(verbose=False)\n",
      "# Description/citation\n",
      "print(oxcgrt_data.citation)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "(Secondary source) Guidotti, E., Ardia, D., (2020), \"COVID-19 Data Hub\", Journal of Open Source Software 5(51):2376, doi: 10.21105/joss.02376.\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Class for policy measure analysis\n",
      "We will `PolicyMeasures` class to find relationship of policy measures and parameter values of SIR-derived ODE models."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Create analyser with tau value 360 [min] (can be changed)\n",
      "analyser = cs.PolicyMeasures(jhu_data, population_data, oxcgrt_data, tau=360)\n",
      "# The number of registerd countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "196"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# We can get Scenario instance for detailed scenario analysis\n",
      "type(analyser.scenario(\"Japan\"))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "covsirphy.analysis.scenario.Scenario"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Set phases with S-R trend analysis\n",
      "We will perform S-R trend analysis to set phases in all countries. Countries which do not have **16th phases** will be un-registered for the next analysis. This number will be adjusted for your analysis."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show the number of phases of all countries\n",
      "analyser.trend()\n",
      "pprint(analyser.phase_len(), compact=True)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{2: ['Holy See', 'Solomon Islands'],\n",
        " 3: ['Saint Kitts and Nevis', 'Tanzania', 'Laos', 'Timor-Leste'],\n",
        " 4: ['Dominica', 'Saint Lucia', 'Brunei'],\n",
        " 5: ['Equatorial Guinea', 'Grenada', 'Fiji'],\n",
        " 6: ['Antigua and Barbuda', 'Mauritius', 'Saint Vincent and the Grenadines'],\n",
        " 7: ['Cambodia', 'Gambia'],\n",
        " 8: ['Liechtenstein', 'Madagascar', 'Bahamas', 'Seychelles', 'Kyrgyzstan',\n",
        "     'Vietnam', 'Northern Mariana Islands', 'Trinidad and Tobago', 'Monaco'],\n",
        " 9: ['Zimbabwe', 'Lesotho', 'Oman', 'Barbados', 'Australia', 'Ghana',\n",
        "     'Kazakhstan', 'Djibouti', 'Zambia', 'Virgin Islands, U.S.', 'Bolivia',\n",
        "     'Bermuda', 'Suriname', 'Swaziland', 'Uzbekistan', 'Malawi', 'Burundi',\n",
        "     'South Africa', 'Republic of the Congo', 'Sao Tome and Principe'],\n",
        " 10: ['Guyana', 'Mozambique', 'Botswana', 'Liberia', 'Ethiopia', 'Libya',\n",
        "      'Philippines', 'Maldives', 'Chile', 'Guatemala', 'Saudi Arabia', 'Benin',\n",
        "      'Jamaica', \"Cote d'Ivoire\", 'Central African Republic', 'Israel',\n",
        "      'Bahrain', 'Kuwait', 'Namibia', 'Mongolia', 'Senegal', 'Singapore',\n",
        "      'Syria', 'Honduras', 'Papua New Guinea', 'Venezuela', 'New Zealand',\n",
        "      'Eritrea', 'Belize', 'Rwanda', 'Bhutan', 'Dominican Republic', 'Angola',\n",
        "      'Comoros'],\n",
        " 11: ['Kenya', 'Colombia', 'Mexico', 'Sierra Leone', 'Nicaragua', 'Togo',\n",
        "      'Argentina', 'Cape Verde', 'Iraq', 'Cameroon', 'Yemen', 'Ecuador',\n",
        "      'Puerto Rico', 'India', 'Costa Rica', 'Bangladesh', 'Panama', 'Nepal',\n",
        "      'Egypt', 'Nigeria', 'Paraguay', 'Jordan', 'Gabon', 'El Salvador',\n",
        "      'Iceland', 'Brazil', 'Guinea-Bissau', 'Guam', 'Peru', 'Algeria'],\n",
        " 12: ['Kosovo', 'Georgia', 'Chad', 'Somalia', 'Taiwan', 'Japan', 'Guinea',\n",
        "      'Pakistan', 'Democratic Republic of the Congo', 'Sudan', 'Qatar',\n",
        "      'South Sudan', 'Slovakia', 'Niger', 'Montenegro', 'Slovenia',\n",
        "      'Tajikistan', 'Indonesia'],\n",
        " 13: ['Malta', 'Cuba', 'Tunisia', 'Croatia', 'United Arab Emirates', 'Hungary',\n",
        "      'Latvia', 'Lithuania', 'Andorra', 'Mauritania', 'Palestine', 'Cyprus',\n",
        "      'Burkina Faso', 'Serbia', 'Mali', 'Belarus', 'Haiti', 'San Marino',\n",
        "      'Russia', 'Azerbaijan', 'Moldova', 'Uganda', 'China', 'Bulgaria',\n",
        "      'Luxembourg'],\n",
        " 14: ['Thailand', 'Greece', 'Austria', 'Uruguay', 'Afghanistan', 'Turkey',\n",
        "      'Iran', 'Norway', 'Ireland', 'Sri Lanka', 'Poland', 'Myanmar', 'Malaysia',\n",
        "      'Armenia', 'Czech Republic', 'Morocco', 'United States', 'Albania',\n",
        "      'Spain'],\n",
        " 15: ['Bosnia and Herzegovina', 'North Macedonia', 'Portugal', 'Estonia',\n",
        "      'Sweden', 'Switzerland', 'Lebanon', 'Germany'],\n",
        " 16: ['Belgium', 'Finland', 'Denmark', 'Netherlands', 'Romania', 'Ukraine',\n",
        "      'Italy', 'Canada', 'France'],\n",
        " 17: ['United Kingdom']}\n"
       ]
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Set phases with S-R trend analysis\n",
      "analyser.trend(min_len=16)\n",
      "# The number of countries\n",
      "len(analyser.countries)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "10"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "phase_len_dict = analyser.phase_len()\n",
      "pprint(phase_len_dict, compact=True)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "{16: ['Belgium', 'Finland', 'Denmark', 'Netherlands', 'Romania', 'Ukraine',\n",
        "      'Italy', 'Canada', 'France'],\n",
        " 17: ['United Kingdom']}\n"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Here, only show the countries which have the most phases\n",
      "countries_show = max(phase_len_dict.items(), key=lambda x: x[0])[1]\n",
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">United Kingdom</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Feb2020</td>\n",
        "      <td>06Apr2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Apr2020</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Apr2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>11Jun2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jun2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Sep2020</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Oct2020</td>\n",
        "      <td>11Oct2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Oct2020</td>\n",
        "      <td>19Oct2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Oct2020</td>\n",
        "      <td>25Oct2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Oct2020</td>\n",
        "      <td>05Nov2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Nov2020</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Nov2020</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>01Dec2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Dec2020</td>\n",
        "      <td>08Dec2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Dec2020</td>\n",
        "      <td>15Dec2020</td>\n",
        "      <td>66460344</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 10,
       "text": [
        "                      Type      Start        End  Population\n",
        "Country        Phase                                        \n",
        "United Kingdom 0th    Past  18Feb2020  06Apr2020    66460344\n",
        "               1st    Past  07Apr2020  23Apr2020    66460344\n",
        "               2nd    Past  24Apr2020  11May2020    66460344\n",
        "               3rd    Past  12May2020  11Jun2020    66460344\n",
        "               4th    Past  12Jun2020  17Aug2020    66460344\n",
        "               5th    Past  18Aug2020  17Sep2020    66460344\n",
        "               6th    Past  18Sep2020  02Oct2020    66460344\n",
        "               7th    Past  03Oct2020  11Oct2020    66460344\n",
        "               8th    Past  12Oct2020  19Oct2020    66460344\n",
        "               9th    Past  20Oct2020  25Oct2020    66460344\n",
        "               10th   Past  26Oct2020  05Nov2020    66460344\n",
        "               11th   Past  06Nov2020  11Nov2020    66460344\n",
        "               12th   Past  12Nov2020  17Nov2020    66460344\n",
        "               13th   Past  18Nov2020  24Nov2020    66460344\n",
        "               14th   Past  25Nov2020  01Dec2020    66460344\n",
        "               15th   Past  02Dec2020  08Dec2020    66460344\n",
        "               16th   Past  09Dec2020  15Dec2020    66460344"
       ]
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Parameter estimation\n",
      "we will estimate the parameter values with SIR-derived ODE models in each country."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Parameter estimation with SIR-F model\n",
      "analyser.estimate(cs.SIRF, timeout=10)"
     ],
     "language": "python",
     "metadata": {
      "tags": []
     },
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n",
        "<SIR-F model: parameter estimation>\n",
        "Running optimization with 4 CPUs...\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  8th phase (12Oct2020 - 24Oct2020): finished  290 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  0th phase (05Mar2020 - 01May2020): finished  265 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 12th phase (09Nov2020 - 15Nov2020): finished  275 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  5th phase (23Aug2020 - 14Sep2020): finished  269 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  8th phase (06Oct2020 - 11Oct2020): finished  277 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  1st phase (07Apr2020 - 23Apr2020): finished  265 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  4th phase (10Aug2020 - 08Sep2020): finished  257 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  1st phase (31Mar2020 - 13Apr2020): finished  272 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  0th phase (07Feb2020 - 30Mar2020): finished  261 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  5th phase (18Aug2020 - 17Sep2020): finished  277 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  6th phase (21Sep2020 - 04Oct2020): finished  273 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 12th phase (12Nov2020 - 17Nov2020): finished  278 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  9th phase (16Oct2020 - 25Oct2020): finished  286 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  4th phase (03Jun2020 - 22Jul2020): finished  255 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  9th phase (17Oct2020 - 22Oct2020): finished  276 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  6th phase (20Sep2020 - 28Sep2020): finished  299 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  0th phase (11Mar2020 - 31Mar2020): finished  285 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  2nd phase (26Apr2020 - 27Jul2020): finished  250 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 10th phase (06Nov2020 - 12Nov2020): finished  293 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  7th phase (01Oct2020 - 08Oct2020): finished  269 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  9th phase (29Oct2020 - 04Nov2020): finished  257 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  8th phase (08Oct2020 - 16Oct2020): finished  253 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  2nd phase (25Apr2020 - 11May2020): finished  264 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  3rd phase (31Jul2020 - 19Aug2020): finished  258 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 13th phase (17Nov2020 - 24Nov2020): finished  273 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  6th phase (15Sep2020 - 27Sep2020): finished  261 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 14th phase (02Dec2020 - 07Dec2020): finished  287 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 11th phase (13Nov2020 - 18Nov2020): finished  297 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  0th phase (13Mar2020 - 30Mar2020): finished  264 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  5th phase (10Sep2020 - 29Sep2020): finished  284 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 12th phase (11Nov2020 - 16Nov2020): finished  274 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  1st phase (18Mar2020 - 27Mar2020): finished  275 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  5th phase (10Sep2020 - 21Sep2020): finished  269 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA, 12th phase (12Nov2020 - 21Nov2020): finished  262 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  3rd phase (23May2020 - 08Aug2020): finished  252 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  4th phase (12Jun2020 - 17Aug2020): finished  259 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  4th phase (20Aug2020 - 09Sep2020): finished  214 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN, 13th phase (26Nov2020 - 01Dec2020): finished  205 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  4th phase (27May2020 - 18Aug2020): finished  197 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 10th phase (26Oct2020 - 04Nov2020): finished  199 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 14th phase (25Nov2020 - 04Dec2020): finished  219 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  7th phase (03Oct2020 - 11Oct2020): finished  227 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN, 11th phase (12Nov2020 - 19Nov2020): finished  227 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  4th phase (01Sep2020 - 16Sep2020): finished  214 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  3rd phase (07May2020 - 27Jul2020): finished  210 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 10th phase (05Nov2020 - 12Nov2020): finished  224 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  6th phase (22Sep2020 - 30Sep2020): finished  222 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 14th phase (25Nov2020 - 01Dec2020): finished  232 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  4th phase (09Aug2020 - 05Sep2020): finished  214 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  5th phase (19May2020 - 23Aug2020): finished  196 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 13th phase (27Nov2020 - 02Dec2020): finished  225 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  1st phase (13Apr2020 - 02May2020): finished  217 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  3rd phase (12Aug2020 - 31Aug2020): finished  221 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  9th phase (23Oct2020 - 29Oct2020): finished  237 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  6th phase (01Oct2020 - 11Oct2020): finished  227 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  2nd phase (03May2020 - 12Jun2020): finished  226 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  3rd phase (12May2020 - 02Jun2020): finished  220 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  2nd phase (08Jul2020 - 30Jul2020): finished  228 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 13th phase (18Nov2020 - 28Nov2020): finished  227 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  4th phase (26Aug2020 - 09Sep2020): finished  235 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  1st phase (31May2020 - 08Jul2020): finished  191 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  1st phase (05Apr2020 - 19Apr2020): finished  196 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  5th phase (19Aug2020 - 20Sep2020): finished  180 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  3rd phase (13Jun2020 - 09Aug2020): finished  174 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 10th phase (26Oct2020 - 05Nov2020): finished  209 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 14th phase (25Nov2020 - 05Dec2020): finished  209 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 11th phase (06Nov2020 - 11Nov2020): finished  197 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 11th phase (01Nov2020 - 10Nov2020): finished  204 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  2nd phase (20Apr2020 - 04May2020): finished  222 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  0th phase (21Mar2020 - 30May2020): finished  215 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  5th phase (06Sep2020 - 19Sep2020): finished  223 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  6th phase (30Sep2020 - 11Oct2020): finished  226 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  9th phase (25Oct2020 - 04Nov2020): finished  216 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  3rd phase (09Apr2020 - 22Apr2020): finished  214 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  7th phase (05Oct2020 - 13Oct2020): finished  213 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  9th phase (20Oct2020 - 25Oct2020): finished  222 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 10th phase (22Oct2020 - 01Nov2020): finished  198 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  3rd phase (12May2020 - 11Jun2020): finished  190 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 14th phase (24Nov2020 - 29Nov2020): finished  198 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 13th phase (16Nov2020 - 24Nov2020): finished  203 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  6th phase (18Sep2020 - 02Oct2020): finished  228 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  6th phase (07Sep2020 - 28Sep2020): finished  215 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  3rd phase (05May2020 - 26May2020): finished  235 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  5th phase (23Jul2020 - 06Sep2020): finished  231 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  7th phase (01Oct2020 - 12Oct2020): finished  227 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  8th phase (21Oct2020 - 28Oct2020): finished  238 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  0th phase (24Feb2020 - 17Mar2020): finished  230 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA, 11th phase (02Nov2020 - 11Nov2020): finished  226 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA, 10th phase (22Oct2020 - 31Oct2020): finished  206 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  1st phase (01Apr2020 - 16Apr2020): finished  210 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  9th phase (30Oct2020 - 05Nov2020): finished  219 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  4th phase (28Jul2020 - 22Aug2020): finished  204 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 13th phase (18Nov2020 - 23Nov2020): finished  223 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR, 13th phase (18Nov2020 - 24Nov2020): finished  224 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  0th phase (18Feb2020 - 06Apr2020): finished  192 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  7th phase (12Oct2020 - 20Oct2020): finished  204 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  9th phase (12Oct2020 - 21Oct2020): finished  241 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 11th phase (05Nov2020 - 11Nov2020): finished  222 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  8th phase (14Oct2020 - 23Oct2020): finished  220 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA, 13th phase (22Nov2020 - 02Dec2020): finished  251 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  9th phase (16Oct2020 - 21Oct2020): finished  255 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  7th phase (18Sep2020 - 07Oct2020): finished  269 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  0th phase (02Mar2020 - 08Apr2020): finished  239 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  8th phase (13Oct2020 - 22Oct2020): finished  280 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  0th phase (19Mar2020 - 12Apr2020): finished  289 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 14th phase (29Nov2020 - 04Dec2020): finished  261 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN, 15th phase (09Dec2020 - 15Dec2020): finished  247 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA, 14th phase (03Dec2020 - 08Dec2020): finished  275 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 12th phase (20Nov2020 - 26Nov2020): finished  217 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  6th phase (21Sep2020 - 30Sep2020): finished  278 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU,  1st phase (02May2020 - 07Jul2020): finished  238 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 15th phase (06Dec2020 - 15Dec2020): finished  275 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  3rd phase (28Jul2020 - 25Aug2020): finished  289 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tROU, 15th phase (08Dec2020 - 15Dec2020): finished  284 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  8th phase (09Oct2020 - 15Oct2020): finished  266 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  9th phase (24Oct2020 - 02Nov2020): finished  252 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 10th phase (30Oct2020 - 04Nov2020): finished  271 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  1st phase (09Apr2020 - 24Apr2020): finished  249 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  7th phase (29Sep2020 - 05Oct2020): finished  269 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN,  7th phase (29Sep2020 - 11Oct2020): finished  255 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK, 15th phase (30Nov2020 - 15Dec2020): finished  267 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL, 11th phase (02Nov2020 - 08Nov2020): finished  282 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN, 14th phase (02Dec2020 - 08Dec2020): finished  283 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD, 15th phase (05Dec2020 - 15Dec2020): finished  246 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  5th phase (17Sep2020 - 30Sep2020): finished  262 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  2nd phase (28Mar2020 - 08Apr2020): finished  251 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tDNK,  5th phase (09Sep2020 - 20Sep2020): finished  287 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  2nd phase (17Apr2020 - 22May2020): finished  291 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tNLD,  8th phase (06Oct2020 - 15Oct2020): finished  291 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA, 10th phase (23Oct2020 - 01Nov2020): finished  266 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  2nd phase (14Apr2020 - 06May2020): finished  305 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN,  0th phase (16Mar2020 - 04Apr2020): finished  264 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR, 12th phase (19Nov2020 - 25Nov2020): finished  280 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "/home/runner/.local/share/virtualenvs/covid19-sir-kT3BL-HO/lib/python3.8/site-packages/scipy/interpolate/fitpack2.py:253: UserWarning: \n",
        "The maximal number of iterations maxit (set to 20 by the program)\n",
        "allowed for finding a smoothing spline with fp=s has been reached: s\n",
        "too small.\n",
        "There is an approximation returned but the corresponding weighted sum\n",
        "of squared residuals does not satisfy the condition abs(fp-s)/s < tol.\n",
        "  warnings.warn(message)\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  2nd phase (09Jul2020 - 11Aug2020): finished  272 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN, 10th phase (03Nov2020 - 11Nov2020): finished  299 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  6th phase (24Aug2020 - 17Sep2020): finished  287 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFRA,  1st phase (31Mar2020 - 25Apr2020): finished  227 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tITA,  4th phase (23Apr2020 - 18May2020): finished  229 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  2nd phase (24Apr2020 - 11May2020): finished  204 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tUKR,  8th phase (22Oct2020 - 29Oct2020): finished  224 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tFIN, 12th phase (20Nov2020 - 25Nov2020): finished  225 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tGBR,  8th phase (12Oct2020 - 19Oct2020): finished  250 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tBEL,  7th phase (28Sep2020 - 05Oct2020): finished  254 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\tCAN, 11th phase (13Nov2020 - 19Nov2020): finished  240 trials in 0 min 10 sec"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Completed optimization. Total: 6 min 40 sec\n"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Show summary\n",
      "analyser.summary(countries=countries_show)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th>Type</th>\n",
        "      <th>Start</th>\n",
        "      <th>End</th>\n",
        "      <th>Population</th>\n",
        "      <th>ODE</th>\n",
        "      <th>Rt</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>tau</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>RMSLE</th>\n",
        "      <th>Trials</th>\n",
        "      <th>Runtime</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Country</th>\n",
        "      <th>Phase</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th rowspan=\"17\" valign=\"top\">United Kingdom</th>\n",
        "      <th>0th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Feb2020</td>\n",
        "      <td>06Apr2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>11.25</td>\n",
        "      <td>0.0210812</td>\n",
        "      <td>0.000399765</td>\n",
        "      <td>0.054825</td>\n",
        "      <td>0.004369</td>\n",
        "      <td>360</td>\n",
        "      <td>0.021</td>\n",
        "      <td>625</td>\n",
        "      <td>57</td>\n",
        "      <td>4</td>\n",
        "      <td>0.769991</td>\n",
        "      <td>192</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1st</th>\n",
        "      <td>Past</td>\n",
        "      <td>07Apr2020</td>\n",
        "      <td>23Apr2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.28</td>\n",
        "      <td>0.168805</td>\n",
        "      <td>0.00110787</td>\n",
        "      <td>0.0283194</td>\n",
        "      <td>0.017304</td>\n",
        "      <td>360</td>\n",
        "      <td>0.169</td>\n",
        "      <td>225</td>\n",
        "      <td>14</td>\n",
        "      <td>8</td>\n",
        "      <td>0.0533782</td>\n",
        "      <td>265</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2nd</th>\n",
        "      <td>Past</td>\n",
        "      <td>24Apr2020</td>\n",
        "      <td>11May2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.06</td>\n",
        "      <td>0.0823181</td>\n",
        "      <td>0.00170542</td>\n",
        "      <td>0.0244724</td>\n",
        "      <td>0.0194029</td>\n",
        "      <td>360</td>\n",
        "      <td>0.082</td>\n",
        "      <td>146</td>\n",
        "      <td>12</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0228226</td>\n",
        "      <td>204</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3rd</th>\n",
        "      <td>Past</td>\n",
        "      <td>12May2020</td>\n",
        "      <td>11Jun2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.66</td>\n",
        "      <td>0.0839197</td>\n",
        "      <td>0.000880026</td>\n",
        "      <td>0.0187519</td>\n",
        "      <td>0.025014</td>\n",
        "      <td>360</td>\n",
        "      <td>0.084</td>\n",
        "      <td>284</td>\n",
        "      <td>9</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0202585</td>\n",
        "      <td>190</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Jun2020</td>\n",
        "      <td>17Aug2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.9</td>\n",
        "      <td>0.029822</td>\n",
        "      <td>0.000980975</td>\n",
        "      <td>0.0229482</td>\n",
        "      <td>0.0238862</td>\n",
        "      <td>360</td>\n",
        "      <td>0.03</td>\n",
        "      <td>254</td>\n",
        "      <td>10</td>\n",
        "      <td>10</td>\n",
        "      <td>0.145246</td>\n",
        "      <td>259</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>5th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Aug2020</td>\n",
        "      <td>17Sep2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.48</td>\n",
        "      <td>0.0361273</td>\n",
        "      <td>0.00149635</td>\n",
        "      <td>0.0253273</td>\n",
        "      <td>0.0149908</td>\n",
        "      <td>360</td>\n",
        "      <td>0.036</td>\n",
        "      <td>167</td>\n",
        "      <td>16</td>\n",
        "      <td>9</td>\n",
        "      <td>0.0986445</td>\n",
        "      <td>277</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>6th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Sep2020</td>\n",
        "      <td>02Oct2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.8</td>\n",
        "      <td>0.00238171</td>\n",
        "      <td>1.85651e-06</td>\n",
        "      <td>0.0264582</td>\n",
        "      <td>0.0146234</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>134661</td>\n",
        "      <td>17</td>\n",
        "      <td>9</td>\n",
        "      <td>0.0118807</td>\n",
        "      <td>228</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>7th</th>\n",
        "      <td>Past</td>\n",
        "      <td>03Oct2020</td>\n",
        "      <td>11Oct2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>2.43</td>\n",
        "      <td>0.0012119</td>\n",
        "      <td>0.000530169</td>\n",
        "      <td>0.0308227</td>\n",
        "      <td>0.0121554</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>471</td>\n",
        "      <td>20</td>\n",
        "      <td>8</td>\n",
        "      <td>0.0665743</td>\n",
        "      <td>227</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>8th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Oct2020</td>\n",
        "      <td>19Oct2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.45</td>\n",
        "      <td>0.00107241</td>\n",
        "      <td>0.000191072</td>\n",
        "      <td>0.0246769</td>\n",
        "      <td>0.0167727</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1308</td>\n",
        "      <td>14</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0242427</td>\n",
        "      <td>250</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>9th</th>\n",
        "      <td>Past</td>\n",
        "      <td>20Oct2020</td>\n",
        "      <td>25Oct2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.57</td>\n",
        "      <td>0.00141836</td>\n",
        "      <td>5.43243e-05</td>\n",
        "      <td>0.0245026</td>\n",
        "      <td>0.0154902</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>4601</td>\n",
        "      <td>16</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0121932</td>\n",
        "      <td>222</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>10th</th>\n",
        "      <td>Past</td>\n",
        "      <td>26Oct2020</td>\n",
        "      <td>05Nov2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.31</td>\n",
        "      <td>0.00256538</td>\n",
        "      <td>0.000462695</td>\n",
        "      <td>0.023305</td>\n",
        "      <td>0.017223</td>\n",
        "      <td>360</td>\n",
        "      <td>0.003</td>\n",
        "      <td>540</td>\n",
        "      <td>14</td>\n",
        "      <td>10</td>\n",
        "      <td>0.0333716</td>\n",
        "      <td>209</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>11th</th>\n",
        "      <td>Past</td>\n",
        "      <td>06Nov2020</td>\n",
        "      <td>11Nov2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.98</td>\n",
        "      <td>0.00148556</td>\n",
        "      <td>0.000191072</td>\n",
        "      <td>0.0218597</td>\n",
        "      <td>0.0221068</td>\n",
        "      <td>360</td>\n",
        "      <td>0.001</td>\n",
        "      <td>1308</td>\n",
        "      <td>11</td>\n",
        "      <td>11</td>\n",
        "      <td>0.00696735</td>\n",
        "      <td>197</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>12th</th>\n",
        "      <td>Past</td>\n",
        "      <td>12Nov2020</td>\n",
        "      <td>17Nov2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>1.09</td>\n",
        "      <td>0.00227184</td>\n",
        "      <td>0.000381158</td>\n",
        "      <td>0.0206594</td>\n",
        "      <td>0.0186033</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>655</td>\n",
        "      <td>13</td>\n",
        "      <td>12</td>\n",
        "      <td>0.0152413</td>\n",
        "      <td>278</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>13th</th>\n",
        "      <td>Past</td>\n",
        "      <td>18Nov2020</td>\n",
        "      <td>24Nov2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.83</td>\n",
        "      <td>0.000191261</td>\n",
        "      <td>0.000228665</td>\n",
        "      <td>0.0179749</td>\n",
        "      <td>0.0212999</td>\n",
        "      <td>360</td>\n",
        "      <td>0</td>\n",
        "      <td>1093</td>\n",
        "      <td>11</td>\n",
        "      <td>13</td>\n",
        "      <td>0.0180798</td>\n",
        "      <td>224</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>14th</th>\n",
        "      <td>Past</td>\n",
        "      <td>25Nov2020</td>\n",
        "      <td>01Dec2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>SIR-F</td>\n",
        "      <td>0.65</td>\n",
        "      <td>0.00215352</td>\n",
        "      <td>0.000530831</td>\n",
        "      <td>0.0183823</td>\n",
        "      <td>0.0277883</td>\n",
        "      <td>360</td>\n",
        "      <td>0.002</td>\n",
        "      <td>470</td>\n",
        "      <td>8</td>\n",
        "      <td>13</td>\n",
        "      <td>0.00695897</td>\n",
        "      <td>232</td>\n",
        "      <td>0 min 10 sec</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>15th</th>\n",
        "      <td>Past</td>\n",
        "      <td>02Dec2020</td>\n",
        "      <td>08Dec2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>16th</th>\n",
        "      <td>Past</td>\n",
        "      <td>09Dec2020</td>\n",
        "      <td>15Dec2020</td>\n",
        "      <td>66460344</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "      <td>-</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "                      Type      Start        End  Population    ODE     Rt  \\\n",
        "Country        Phase                                                         \n",
        "United Kingdom 0th    Past  18Feb2020  06Apr2020    66460344  SIR-F  11.25   \n",
        "               1st    Past  07Apr2020  23Apr2020    66460344  SIR-F   1.28   \n",
        "               2nd    Past  24Apr2020  11May2020    66460344  SIR-F   1.06   \n",
        "               3rd    Past  12May2020  11Jun2020    66460344  SIR-F   0.66   \n",
        "               4th    Past  12Jun2020  17Aug2020    66460344  SIR-F    0.9   \n",
        "               5th    Past  18Aug2020  17Sep2020    66460344  SIR-F   1.48   \n",
        "               6th    Past  18Sep2020  02Oct2020    66460344  SIR-F    1.8   \n",
        "               7th    Past  03Oct2020  11Oct2020    66460344  SIR-F   2.43   \n",
        "               8th    Past  12Oct2020  19Oct2020    66460344  SIR-F   1.45   \n",
        "               9th    Past  20Oct2020  25Oct2020    66460344  SIR-F   1.57   \n",
        "               10th   Past  26Oct2020  05Nov2020    66460344  SIR-F   1.31   \n",
        "               11th   Past  06Nov2020  11Nov2020    66460344  SIR-F   0.98   \n",
        "               12th   Past  12Nov2020  17Nov2020    66460344  SIR-F   1.09   \n",
        "               13th   Past  18Nov2020  24Nov2020    66460344  SIR-F   0.83   \n",
        "               14th   Past  25Nov2020  01Dec2020    66460344  SIR-F   0.65   \n",
        "               15th   Past  02Dec2020  08Dec2020    66460344      -      -   \n",
        "               16th   Past  09Dec2020  15Dec2020    66460344      -      -   \n",
        "\n",
        "                            theta        kappa        rho      sigma  tau  \\\n",
        "Country        Phase                                                        \n",
        "United Kingdom 0th      0.0210812  0.000399765   0.054825   0.004369  360   \n",
        "               1st       0.168805   0.00110787  0.0283194   0.017304  360   \n",
        "               2nd      0.0823181   0.00170542  0.0244724  0.0194029  360   \n",
        "               3rd      0.0839197  0.000880026  0.0187519   0.025014  360   \n",
        "               4th       0.029822  0.000980975  0.0229482  0.0238862  360   \n",
        "               5th      0.0361273   0.00149635  0.0253273  0.0149908  360   \n",
        "               6th     0.00238171  1.85651e-06  0.0264582  0.0146234  360   \n",
        "               7th      0.0012119  0.000530169  0.0308227  0.0121554  360   \n",
        "               8th     0.00107241  0.000191072  0.0246769  0.0167727  360   \n",
        "               9th     0.00141836  5.43243e-05  0.0245026  0.0154902  360   \n",
        "               10th    0.00256538  0.000462695   0.023305   0.017223  360   \n",
        "               11th    0.00148556  0.000191072  0.0218597  0.0221068  360   \n",
        "               12th    0.00227184  0.000381158  0.0206594  0.0186033  360   \n",
        "               13th   0.000191261  0.000228665  0.0179749  0.0212999  360   \n",
        "               14th    0.00215352  0.000530831  0.0183823  0.0277883  360   \n",
        "               15th             -            -          -          -    -   \n",
        "               16th             -            -          -          -    -   \n",
        "\n",
        "                     alpha1 [-] 1/alpha2 [day] 1/gamma [day] 1/beta [day]  \\\n",
        "Country        Phase                                                        \n",
        "United Kingdom 0th        0.021            625            57            4   \n",
        "               1st        0.169            225            14            8   \n",
        "               2nd        0.082            146            12           10   \n",
        "               3rd        0.084            284             9           13   \n",
        "               4th         0.03            254            10           10   \n",
        "               5th        0.036            167            16            9   \n",
        "               6th        0.002         134661            17            9   \n",
        "               7th        0.001            471            20            8   \n",
        "               8th        0.001           1308            14           10   \n",
        "               9th        0.001           4601            16           10   \n",
        "               10th       0.003            540            14           10   \n",
        "               11th       0.001           1308            11           11   \n",
        "               12th       0.002            655            13           12   \n",
        "               13th           0           1093            11           13   \n",
        "               14th       0.002            470             8           13   \n",
        "               15th           -              -             -            -   \n",
        "               16th           -              -             -            -   \n",
        "\n",
        "                           RMSLE Trials       Runtime  \n",
        "Country        Phase                                   \n",
        "United Kingdom 0th      0.769991    192  0 min 10 sec  \n",
        "               1st     0.0533782    265  0 min 10 sec  \n",
        "               2nd     0.0228226    204  0 min 10 sec  \n",
        "               3rd     0.0202585    190  0 min 10 sec  \n",
        "               4th      0.145246    259  0 min 10 sec  \n",
        "               5th     0.0986445    277  0 min 10 sec  \n",
        "               6th     0.0118807    228  0 min 10 sec  \n",
        "               7th     0.0665743    227  0 min 10 sec  \n",
        "               8th     0.0242427    250  0 min 10 sec  \n",
        "               9th     0.0121932    222  0 min 10 sec  \n",
        "               10th    0.0333716    209  0 min 10 sec  \n",
        "               11th   0.00696735    197  0 min 10 sec  \n",
        "               12th    0.0152413    278  0 min 10 sec  \n",
        "               13th    0.0180798    224  0 min 10 sec  \n",
        "               14th   0.00695897    232  0 min 10 sec  \n",
        "               15th            -      -             -  \n",
        "               16th            -      -             -  "
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## Compare the history of parameters\n",
      "Here, compare the history of parameter values if countries."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# All parameter/day parameter/Rt/OxCGRT\n",
      "analyser.track().head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Date</th>\n",
        "      <th>Country</th>\n",
        "      <th>theta</th>\n",
        "      <th>kappa</th>\n",
        "      <th>rho</th>\n",
        "      <th>sigma</th>\n",
        "      <th>alpha1 [-]</th>\n",
        "      <th>1/alpha2 [day]</th>\n",
        "      <th>1/beta [day]</th>\n",
        "      <th>1/gamma [day]</th>\n",
        "      <th>...</th>\n",
        "      <th>Cancel_events</th>\n",
        "      <th>Gatherings_restrictions</th>\n",
        "      <th>Transport_closing</th>\n",
        "      <th>Stay_home_restrictions</th>\n",
        "      <th>Internal_movement_restrictions</th>\n",
        "      <th>International_movement_restrictions</th>\n",
        "      <th>Information_campaigns</th>\n",
        "      <th>Testing_policy</th>\n",
        "      <th>Contact_tracing</th>\n",
        "      <th>Stringency_index</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2020-03-13</td>\n",
        "      <td>Belgium</td>\n",
        "      <td>0.0493257</td>\n",
        "      <td>0.000867256</td>\n",
        "      <td>0.0370804</td>\n",
        "      <td>0.00677782</td>\n",
        "      <td>0.049</td>\n",
        "      <td>288</td>\n",
        "      <td>6</td>\n",
        "      <td>36</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>23.15</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2020-03-13</td>\n",
        "      <td>Belgium</td>\n",
        "      <td>0.0493257</td>\n",
        "      <td>0.000867256</td>\n",
        "      <td>0.0370804</td>\n",
        "      <td>0.00677782</td>\n",
        "      <td>0.049</td>\n",
        "      <td>288</td>\n",
        "      <td>6</td>\n",
        "      <td>36</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>23.15</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>2020-03-13</td>\n",
        "      <td>Belgium</td>\n",
        "      <td>0.0493257</td>\n",
        "      <td>0.000867256</td>\n",
        "      <td>0.0370804</td>\n",
        "      <td>0.00677782</td>\n",
        "      <td>0.049</td>\n",
        "      <td>288</td>\n",
        "      <td>6</td>\n",
        "      <td>36</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>23.15</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>2020-03-13</td>\n",
        "      <td>Belgium</td>\n",
        "      <td>0.0493257</td>\n",
        "      <td>0.000867256</td>\n",
        "      <td>0.0370804</td>\n",
        "      <td>0.00677782</td>\n",
        "      <td>0.049</td>\n",
        "      <td>288</td>\n",
        "      <td>6</td>\n",
        "      <td>36</td>\n",
        "      <td>...</td>\n",
        "      <td>1</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>23.15</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>2020-03-14</td>\n",
        "      <td>Belgium</td>\n",
        "      <td>0.0493257</td>\n",
        "      <td>0.000867256</td>\n",
        "      <td>0.0370804</td>\n",
        "      <td>0.00677782</td>\n",
        "      <td>0.049</td>\n",
        "      <td>288</td>\n",
        "      <td>6</td>\n",
        "      <td>36</td>\n",
        "      <td>...</td>\n",
        "      <td>2</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>0</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>2</td>\n",
        "      <td>1</td>\n",
        "      <td>1</td>\n",
        "      <td>50.93</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>5 rows \u00d7 23 columns</p>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "        Date  Country      theta        kappa        rho       sigma  \\\n",
        "0 2020-03-13  Belgium  0.0493257  0.000867256  0.0370804  0.00677782   \n",
        "1 2020-03-13  Belgium  0.0493257  0.000867256  0.0370804  0.00677782   \n",
        "2 2020-03-13  Belgium  0.0493257  0.000867256  0.0370804  0.00677782   \n",
        "3 2020-03-13  Belgium  0.0493257  0.000867256  0.0370804  0.00677782   \n",
        "4 2020-03-14  Belgium  0.0493257  0.000867256  0.0370804  0.00677782   \n",
        "\n",
        "  alpha1 [-] 1/alpha2 [day] 1/beta [day] 1/gamma [day]  ... Cancel_events  \\\n",
        "0      0.049            288            6            36  ...             1   \n",
        "1      0.049            288            6            36  ...             1   \n",
        "2      0.049            288            6            36  ...             1   \n",
        "3      0.049            288            6            36  ...             1   \n",
        "4      0.049            288            6            36  ...             2   \n",
        "\n",
        "   Gatherings_restrictions  Transport_closing  Stay_home_restrictions  \\\n",
        "0                        0                  0                       0   \n",
        "1                        0                  0                       0   \n",
        "2                        0                  0                       0   \n",
        "3                        0                  0                       0   \n",
        "4                        0                  0                       0   \n",
        "\n",
        "   Internal_movement_restrictions  International_movement_restrictions  \\\n",
        "0                               0                                    1   \n",
        "1                               0                                    1   \n",
        "2                               0                                    1   \n",
        "3                               0                                    1   \n",
        "4                               2                                    1   \n",
        "\n",
        "   Information_campaigns  Testing_policy  Contact_tracing  Stringency_index  \n",
        "0                      2               1                1             23.15  \n",
        "1                      2               1                1             23.15  \n",
        "2                      2               1                1             23.15  \n",
        "3                      2               1                1             23.15  \n",
        "4                      2               1                1             50.93  \n",
        "\n",
        "[5 rows x 23 columns]"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$Rt$: Reprodcution number $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"Rt\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Finland</th>\n",
        "      <th>France</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>1.06</td>\n",
        "      <td>1.31</td>\n",
        "      <td>1.77</td>\n",
        "      <td>1.27</td>\n",
        "      <td>0.44</td>\n",
        "      <td>0.84</td>\n",
        "      <td>1.65</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.67</td>\n",
        "      <td>0.65</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>1.06</td>\n",
        "      <td>1.31</td>\n",
        "      <td>1.77</td>\n",
        "      <td>1.27</td>\n",
        "      <td>0.44</td>\n",
        "      <td>0.84</td>\n",
        "      <td>1.65</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.67</td>\n",
        "      <td>0.65</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>1.06</td>\n",
        "      <td>1.31</td>\n",
        "      <td>1.77</td>\n",
        "      <td>1.27</td>\n",
        "      <td>0.44</td>\n",
        "      <td>0.84</td>\n",
        "      <td>1.65</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.67</td>\n",
        "      <td>0.65</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-14</th>\n",
        "      <td>1.06</td>\n",
        "      <td>1.31</td>\n",
        "      <td>1.77</td>\n",
        "      <td>1.27</td>\n",
        "      <td>0.44</td>\n",
        "      <td>0.84</td>\n",
        "      <td>1.65</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.67</td>\n",
        "      <td>0.65</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-15</th>\n",
        "      <td>1.06</td>\n",
        "      <td>1.31</td>\n",
        "      <td>1.77</td>\n",
        "      <td>1.27</td>\n",
        "      <td>0.44</td>\n",
        "      <td>0.84</td>\n",
        "      <td>1.65</td>\n",
        "      <td>0.77</td>\n",
        "      <td>1.67</td>\n",
        "      <td>0.65</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "Country     Belgium  Canada  Denmark  Finland  France  Italy  Netherlands  \\\n",
        "Date                                                                        \n",
        "2020-12-11     1.06    1.31     1.77     1.27    0.44   0.84         1.65   \n",
        "2020-12-12     1.06    1.31     1.77     1.27    0.44   0.84         1.65   \n",
        "2020-12-13     1.06    1.31     1.77     1.27    0.44   0.84         1.65   \n",
        "2020-12-14     1.06    1.31     1.77     1.27    0.44   0.84         1.65   \n",
        "2020-12-15     1.06    1.31     1.77     1.27    0.44   0.84         1.65   \n",
        "\n",
        "Country     Romania  Ukraine  United Kingdom  \n",
        "Date                                          \n",
        "2020-12-11     0.77     1.67            0.65  \n",
        "2020-12-12     0.77     1.67            0.65  \n",
        "2020-12-13     0.77     1.67            0.65  \n",
        "2020-12-14     0.77     1.67            0.65  \n",
        "2020-12-15     0.77     1.67            0.65  "
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\rho$: Effective contact rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"rho\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Finland</th>\n",
        "      <th>France</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.028307</td>\n",
        "      <td>0.024122</td>\n",
        "      <td>0.028699</td>\n",
        "      <td>0.00938</td>\n",
        "      <td>0.016386</td>\n",
        "      <td>0.006618</td>\n",
        "      <td>0.026406</td>\n",
        "      <td>0.018115</td>\n",
        "      <td>0.010411</td>\n",
        "      <td>0.018382</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.028307</td>\n",
        "      <td>0.024122</td>\n",
        "      <td>0.028699</td>\n",
        "      <td>0.00938</td>\n",
        "      <td>0.016386</td>\n",
        "      <td>0.006618</td>\n",
        "      <td>0.026406</td>\n",
        "      <td>0.018115</td>\n",
        "      <td>0.010411</td>\n",
        "      <td>0.018382</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.028307</td>\n",
        "      <td>0.024122</td>\n",
        "      <td>0.028699</td>\n",
        "      <td>0.00938</td>\n",
        "      <td>0.016386</td>\n",
        "      <td>0.006618</td>\n",
        "      <td>0.026406</td>\n",
        "      <td>0.018115</td>\n",
        "      <td>0.010411</td>\n",
        "      <td>0.018382</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-14</th>\n",
        "      <td>0.028307</td>\n",
        "      <td>0.024122</td>\n",
        "      <td>0.028699</td>\n",
        "      <td>0.00938</td>\n",
        "      <td>0.016386</td>\n",
        "      <td>0.006618</td>\n",
        "      <td>0.026406</td>\n",
        "      <td>0.018115</td>\n",
        "      <td>0.010411</td>\n",
        "      <td>0.018382</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-15</th>\n",
        "      <td>0.028307</td>\n",
        "      <td>0.024122</td>\n",
        "      <td>0.028699</td>\n",
        "      <td>0.00938</td>\n",
        "      <td>0.016386</td>\n",
        "      <td>0.006618</td>\n",
        "      <td>0.026406</td>\n",
        "      <td>0.018115</td>\n",
        "      <td>0.010411</td>\n",
        "      <td>0.018382</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "Country      Belgium    Canada   Denmark  Finland    France     Italy  \\\n",
        "Date                                                                    \n",
        "2020-12-11  0.028307  0.024122  0.028699  0.00938  0.016386  0.006618   \n",
        "2020-12-12  0.028307  0.024122  0.028699  0.00938  0.016386  0.006618   \n",
        "2020-12-13  0.028307  0.024122  0.028699  0.00938  0.016386  0.006618   \n",
        "2020-12-14  0.028307  0.024122  0.028699  0.00938  0.016386  0.006618   \n",
        "2020-12-15  0.028307  0.024122  0.028699  0.00938  0.016386  0.006618   \n",
        "\n",
        "Country     Netherlands   Romania   Ukraine  United Kingdom  \n",
        "Date                                                         \n",
        "2020-12-11     0.026406  0.018115  0.010411        0.018382  \n",
        "2020-12-12     0.026406  0.018115  0.010411        0.018382  \n",
        "2020-12-13     0.026406  0.018115  0.010411        0.018382  \n",
        "2020-12-14     0.026406  0.018115  0.010411        0.018382  \n",
        "2020-12-15     0.026406  0.018115  0.010411        0.018382  "
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\sigma$: Recovery rate $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"sigma\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Finland</th>\n",
        "      <th>France</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.026582</td>\n",
        "      <td>0.018018</td>\n",
        "      <td>0.016121</td>\n",
        "      <td>0.007303</td>\n",
        "      <td>0.035316</td>\n",
        "      <td>0.007681</td>\n",
        "      <td>0.015952</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.006062</td>\n",
        "      <td>0.027788</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.026582</td>\n",
        "      <td>0.018018</td>\n",
        "      <td>0.016121</td>\n",
        "      <td>0.007303</td>\n",
        "      <td>0.035316</td>\n",
        "      <td>0.007681</td>\n",
        "      <td>0.015952</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.006062</td>\n",
        "      <td>0.027788</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.026582</td>\n",
        "      <td>0.018018</td>\n",
        "      <td>0.016121</td>\n",
        "      <td>0.007303</td>\n",
        "      <td>0.035316</td>\n",
        "      <td>0.007681</td>\n",
        "      <td>0.015952</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.006062</td>\n",
        "      <td>0.027788</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-14</th>\n",
        "      <td>0.026582</td>\n",
        "      <td>0.018018</td>\n",
        "      <td>0.016121</td>\n",
        "      <td>0.007303</td>\n",
        "      <td>0.035316</td>\n",
        "      <td>0.007681</td>\n",
        "      <td>0.015952</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.006062</td>\n",
        "      <td>0.027788</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-15</th>\n",
        "      <td>0.026582</td>\n",
        "      <td>0.018018</td>\n",
        "      <td>0.016121</td>\n",
        "      <td>0.007303</td>\n",
        "      <td>0.035316</td>\n",
        "      <td>0.007681</td>\n",
        "      <td>0.015952</td>\n",
        "      <td>0.022989</td>\n",
        "      <td>0.006062</td>\n",
        "      <td>0.027788</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "Country      Belgium    Canada   Denmark   Finland    France     Italy  \\\n",
        "Date                                                                     \n",
        "2020-12-11  0.026582  0.018018  0.016121  0.007303  0.035316  0.007681   \n",
        "2020-12-12  0.026582  0.018018  0.016121  0.007303  0.035316  0.007681   \n",
        "2020-12-13  0.026582  0.018018  0.016121  0.007303  0.035316  0.007681   \n",
        "2020-12-14  0.026582  0.018018  0.016121  0.007303  0.035316  0.007681   \n",
        "2020-12-15  0.026582  0.018018  0.016121  0.007303  0.035316  0.007681   \n",
        "\n",
        "Country     Netherlands   Romania   Ukraine  United Kingdom  \n",
        "Date                                                         \n",
        "2020-12-11     0.015952  0.022989  0.006062        0.027788  \n",
        "2020-12-12     0.015952  0.022989  0.006062        0.027788  \n",
        "2020-12-13     0.015952  0.022989  0.006062        0.027788  \n",
        "2020-12-14     0.015952  0.022989  0.006062        0.027788  \n",
        "2020-12-15     0.015952  0.022989  0.006062        0.027788  "
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\kappa$: Mortality rate of infected cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"kappa\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Finland</th>\n",
        "      <th>France</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000093</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000235</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.00004</td>\n",
        "      <td>0.000159</td>\n",
        "      <td>0.000531</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000093</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000235</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.00004</td>\n",
        "      <td>0.000159</td>\n",
        "      <td>0.000531</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000093</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000235</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.00004</td>\n",
        "      <td>0.000159</td>\n",
        "      <td>0.000531</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-14</th>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000093</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000235</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.00004</td>\n",
        "      <td>0.000159</td>\n",
        "      <td>0.000531</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-15</th>\n",
        "      <td>0.000192</td>\n",
        "      <td>0.000301</td>\n",
        "      <td>0.000059</td>\n",
        "      <td>0.000093</td>\n",
        "      <td>0.000002</td>\n",
        "      <td>0.000235</td>\n",
        "      <td>0.000071</td>\n",
        "      <td>0.00004</td>\n",
        "      <td>0.000159</td>\n",
        "      <td>0.000531</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "Country      Belgium    Canada   Denmark   Finland    France     Italy  \\\n",
        "Date                                                                     \n",
        "2020-12-11  0.000192  0.000301  0.000059  0.000093  0.000002  0.000235   \n",
        "2020-12-12  0.000192  0.000301  0.000059  0.000093  0.000002  0.000235   \n",
        "2020-12-13  0.000192  0.000301  0.000059  0.000093  0.000002  0.000235   \n",
        "2020-12-14  0.000192  0.000301  0.000059  0.000093  0.000002  0.000235   \n",
        "2020-12-15  0.000192  0.000301  0.000059  0.000093  0.000002  0.000235   \n",
        "\n",
        "Country     Netherlands  Romania   Ukraine  United Kingdom  \n",
        "Date                                                        \n",
        "2020-12-11     0.000071  0.00004  0.000159        0.000531  \n",
        "2020-12-12     0.000071  0.00004  0.000159        0.000531  \n",
        "2020-12-13     0.000071  0.00004  0.000159        0.000531  \n",
        "2020-12-14     0.000071  0.00004  0.000159        0.000531  \n",
        "2020-12-15     0.000071  0.00004  0.000159        0.000531  "
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "$\\theta$: Mortality rate of S$^\\ast$ cases $\\mathrm{[-]}$"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "analyser.history(\"theta\", roll_window=None).tail()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 648x432 with 1 Axes>"
       ]
      },
      {
       "html": [
        "<div>\n",
        "<style scoped>\n",
        "    .dataframe tbody tr th:only-of-type {\n",
        "        vertical-align: middle;\n",
        "    }\n",
        "\n",
        "    .dataframe tbody tr th {\n",
        "        vertical-align: top;\n",
        "    }\n",
        "\n",
        "    .dataframe thead th {\n",
        "        text-align: right;\n",
        "    }\n",
        "</style>\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th>Country</th>\n",
        "      <th>Belgium</th>\n",
        "      <th>Canada</th>\n",
        "      <th>Denmark</th>\n",
        "      <th>Finland</th>\n",
        "      <th>France</th>\n",
        "      <th>Italy</th>\n",
        "      <th>Netherlands</th>\n",
        "      <th>Romania</th>\n",
        "      <th>Ukraine</th>\n",
        "      <th>United Kingdom</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2020-12-11</th>\n",
        "      <td>0.001385</td>\n",
        "      <td>0.003317</td>\n",
        "      <td>0.002191</td>\n",
        "      <td>0.002473</td>\n",
        "      <td>0.04263</td>\n",
        "      <td>0.001268</td>\n",
        "      <td>0.001263</td>\n",
        "      <td>0.017924</td>\n",
        "      <td>0.000355</td>\n",
        "      <td>0.002154</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-12</th>\n",
        "      <td>0.001385</td>\n",
        "      <td>0.003317</td>\n",
        "      <td>0.002191</td>\n",
        "      <td>0.002473</td>\n",
        "      <td>0.04263</td>\n",
        "      <td>0.001268</td>\n",
        "      <td>0.001263</td>\n",
        "      <td>0.017924</td>\n",
        "      <td>0.000355</td>\n",
        "      <td>0.002154</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-13</th>\n",
        "      <td>0.001385</td>\n",
        "      <td>0.003317</td>\n",
        "      <td>0.002191</td>\n",
        "      <td>0.002473</td>\n",
        "      <td>0.04263</td>\n",
        "      <td>0.001268</td>\n",
        "      <td>0.001263</td>\n",
        "      <td>0.017924</td>\n",
        "      <td>0.000355</td>\n",
        "      <td>0.002154</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-14</th>\n",
        "      <td>0.001385</td>\n",
        "      <td>0.003317</td>\n",
        "      <td>0.002191</td>\n",
        "      <td>0.002473</td>\n",
        "      <td>0.04263</td>\n",
        "      <td>0.001268</td>\n",
        "      <td>0.001263</td>\n",
        "      <td>0.017924</td>\n",
        "      <td>0.000355</td>\n",
        "      <td>0.002154</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2020-12-15</th>\n",
        "      <td>0.001385</td>\n",
        "      <td>0.003317</td>\n",
        "      <td>0.002191</td>\n",
        "      <td>0.002473</td>\n",
        "      <td>0.04263</td>\n",
        "      <td>0.001268</td>\n",
        "      <td>0.001263</td>\n",
        "      <td>0.017924</td>\n",
        "      <td>0.000355</td>\n",
        "      <td>0.002154</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "Country      Belgium    Canada   Denmark   Finland   France     Italy  \\\n",
        "Date                                                                    \n",
        "2020-12-11  0.001385  0.003317  0.002191  0.002473  0.04263  0.001268   \n",
        "2020-12-12  0.001385  0.003317  0.002191  0.002473  0.04263  0.001268   \n",
        "2020-12-13  0.001385  0.003317  0.002191  0.002473  0.04263  0.001268   \n",
        "2020-12-14  0.001385  0.003317  0.002191  0.002473  0.04263  0.001268   \n",
        "2020-12-15  0.001385  0.003317  0.002191  0.002473  0.04263  0.001268   \n",
        "\n",
        "Country     Netherlands   Romania   Ukraine  United Kingdom  \n",
        "Date                                                         \n",
        "2020-12-11     0.001263  0.017924  0.000355        0.002154  \n",
        "2020-12-12     0.001263  0.017924  0.000355        0.002154  \n",
        "2020-12-13     0.001263  0.017924  0.000355        0.002154  \n",
        "2020-12-14     0.001263  0.017924  0.000355        0.002154  \n",
        "2020-12-15     0.001263  0.017924  0.000355        0.002154  "
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "## (Experimental): Relationship of OxCGRT index and parameter values\n",
      "Government responses will impact on parameter values of ODE models about 14 days later. Here, we will investigate on the relationship of [stringency index (from OxCGRT)](https://github.com/OxCGRT/covid-policy-tracker/blob/master/documentation/index_methodology.md) and reproduction number/model parameters.\n"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%matplotlib inline\n",
      "from matplotlib import pyplot as plt\n",
      "import seaborn as sns\n",
      "import pandas as pd"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df = analyser.track()\n",
      "param_cols = [\"Rt\", *cs.SIRF.PARAMETERS]\n",
      "oxcgrt_cols = oxcgrt_data.OXCGRT_VARS[:]\n",
      "cols = param_cols + oxcgrt_cols\n",
      "delay = 14\n",
      "\n",
      "for col in param_cols:\n",
      "    df[col] = pd.to_numeric(df[col], errors=\"coerce\")\n",
      "    df[col] = df.groupby(\"Country\")[col].shift(0 - delay)\n",
      "\n",
      "df = df.dropna(how=\"any\")\n",
      "df = df.loc[:, [\"Date\", \"Country\", *cols]]\n",
      "track_df = df.copy()\n",
      "track_df.info()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<class 'pandas.core.frame.DataFrame'>\n",
        "Int64Index: 31890 entries, 0 to 32015\n",
        "Data columns (total 19 columns):\n",
        " #   Column                               Non-Null Count  Dtype         \n",
        "---  ------                               --------------  -----         \n",
        " 0   Date                                 31890 non-null  datetime64[ns]\n",
        " 1   Country                              31890 non-null  object        \n",
        " 2   Rt                                   31890 non-null  float64       \n",
        " 3   theta                                31890 non-null  float64       \n",
        " 4   kappa                                31890 non-null  float64       \n",
        " 5   rho                                  31890 non-null  float64       \n",
        " 6   sigma                                31890 non-null  float64       \n",
        " 7   School_closing                       31890 non-null  int64         \n",
        " 8   Workplace_closing                    31890 non-null  int64         \n",
        " 9   Cancel_events                        31890 non-null  int64         \n",
        " 10  Gatherings_restrictions              31890 non-null  int64         \n",
        " 11  Transport_closing                    31890 non-null  int64         \n",
        " 12  Stay_home_restrictions               31890 non-null  int64         \n",
        " 13  Internal_movement_restrictions       31890 non-null  int64         \n",
        " 14  International_movement_restrictions  31890 non-null  int64         \n",
        " 15  Information_campaigns                31890 non-null  int64         \n",
        " 16  Testing_policy                       31890 non-null  int64         \n",
        " 17  Contact_tracing                      31890 non-null  int64         \n",
        " 18  Stringency_index                     31890 non-null  float64       \n",
        "dtypes: datetime64[ns](1), float64(6), int64(11), object(1)\n",
        "memory usage: 4.9+ MB\n"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Correlation\n",
      "df = track_df.copy()\n",
      "df.corr().style.background_gradient(axis=None)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<style  type=\"text/css\" >\n",
        "#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col0,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col1,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col2,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col3,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col6,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col16{\n",
        "            background-color:  #023858;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col1,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col0,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col3{\n",
        "            background-color:  #e6e2ef;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col2,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col0{\n",
        "            background-color:  #bfc9e1;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col3,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col0{\n",
        "            background-color:  #056dab;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col0{\n",
        "            background-color:  #fff7fb;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col0,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col3{\n",
        "            background-color:  #e7e3f0;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col6,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col0,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col0{\n",
        "            background-color:  #f3edf5;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col0{\n",
        "            background-color:  #ede8f3;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col0{\n",
        "            background-color:  #faf3f9;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col0{\n",
        "            background-color:  #eee8f3;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col0{\n",
        "            background-color:  #e5e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col6,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col3,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col0,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col0{\n",
        "            background-color:  #ede7f2;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col0,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col0{\n",
        "            background-color:  #ebe6f2;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col3,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col0{\n",
        "            background-color:  #efe9f3;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col2,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col1{\n",
        "            background-color:  #cacee5;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col3,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col1{\n",
        "            background-color:  #f2ecf5;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col1,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col11{\n",
        "            background-color:  #cccfe5;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col6,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col1,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col1{\n",
        "            background-color:  #6ba5cd;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col6,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col1,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col14{\n",
        "            background-color:  #a4bcda;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col1,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col5{\n",
        "            background-color:  #b0c2de;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col1{\n",
        "            background-color:  #4295c3;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col1{\n",
        "            background-color:  #9ab8d8;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col1{\n",
        "            background-color:  #5c9fc9;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col1{\n",
        "            background-color:  #a8bedc;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col1,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col4{\n",
        "            background-color:  #9cb9d9;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col1{\n",
        "            background-color:  #d3d4e7;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col2,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col1{\n",
        "            background-color:  #8bb2d4;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col1{\n",
        "            background-color:  #9ebad9;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col3,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col2{\n",
        "            background-color:  #8eb3d5;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col2,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col2{\n",
        "            background-color:  #bdc8e1;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col6,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col2{\n",
        "            background-color:  #a9bfdc;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col2{\n",
        "            background-color:  #93b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col2,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col9{\n",
        "            background-color:  #c4cbe3;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col2{\n",
        "            background-color:  #b8c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col2{\n",
        "            background-color:  #b9c6e0;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col3,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col2{\n",
        "            background-color:  #c2cbe2;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col2{\n",
        "            background-color:  #a7bddb;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col2,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col10{\n",
        "            background-color:  #c6cce3;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col2{\n",
        "            background-color:  #acc0dd;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col2{\n",
        "            background-color:  #b5c4df;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col3{\n",
        "            background-color:  #f6eff7;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col3{\n",
        "            background-color:  #e0dded;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col3{\n",
        "            background-color:  #e9e5f1;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col3{\n",
        "            background-color:  #fdf5fa;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col3{\n",
        "            background-color:  #dddbec;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col3{\n",
        "            background-color:  #e1dfed;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col3{\n",
        "            background-color:  #f5eff6;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col3{\n",
        "            background-color:  #e4e1ef;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col6{\n",
        "            background-color:  #6fa7ce;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col13{\n",
        "            background-color:  #348ebf;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col4,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col9{\n",
        "            background-color:  #7bacd1;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col4{\n",
        "            background-color:  #88b1d4;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col4{\n",
        "            background-color:  #abbfdc;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col4{\n",
        "            background-color:  #7dacd1;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col4{\n",
        "            background-color:  #73a9cf;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col6,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col7{\n",
        "            background-color:  #0872b1;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col5{\n",
        "            background-color:  #589ec8;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col5{\n",
        "            background-color:  #2685bb;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col5{\n",
        "            background-color:  #7eadd1;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col6,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col5{\n",
        "            background-color:  #83afd3;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col5,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col7{\n",
        "            background-color:  #569dc8;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col5{\n",
        "            background-color:  #a2bcda;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col5{\n",
        "            background-color:  #056aa6;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col7,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col6{\n",
        "            background-color:  #3b92c1;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col6{\n",
        "            background-color:  #1077b4;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col6{\n",
        "            background-color:  #04649d;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col6{\n",
        "            background-color:  #529bc7;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col6{\n",
        "            background-color:  #3f93c2;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col6,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col15{\n",
        "            background-color:  #bbc7e0;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col6{\n",
        "            background-color:  #d0d1e6;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col6{\n",
        "            background-color:  #045b8f;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col7{\n",
        "            background-color:  #308cbe;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col7{\n",
        "            background-color:  #04639b;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col7{\n",
        "            background-color:  #bcc7e1;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col7{\n",
        "            background-color:  #a5bddb;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col7{\n",
        "            background-color:  #2d8abd;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col8{\n",
        "            background-color:  #0d75b3;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col8{\n",
        "            background-color:  #187cb6;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col8{\n",
        "            background-color:  #62a2cb;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col8{\n",
        "            background-color:  #2c89bd;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col10,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col9,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col8,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col9{\n",
        "            background-color:  #76aad0;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col8{\n",
        "            background-color:  #91b5d6;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col8{\n",
        "            background-color:  #0569a5;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col9{\n",
        "            background-color:  #056caa;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col12,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col9{\n",
        "            background-color:  #b7c5df;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col11,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col10{\n",
        "            background-color:  #1b7eb7;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col10{\n",
        "            background-color:  #5a9ec9;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col10{\n",
        "            background-color:  #c0c9e2;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col10{\n",
        "            background-color:  #046097;\n",
        "            color:  #f1f1f1;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col11{\n",
        "            background-color:  #67a4cc;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col11{\n",
        "            background-color:  #97b7d7;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col11{\n",
        "            background-color:  #358fc0;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col13,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col12{\n",
        "            background-color:  #4496c3;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col14,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col12{\n",
        "            background-color:  #2182b9;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col12{\n",
        "            background-color:  #4094c3;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col12{\n",
        "            background-color:  #4897c4;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col13{\n",
        "            background-color:  #4697c4;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col16,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col13{\n",
        "            background-color:  #167bb6;\n",
        "            color:  #000000;\n",
        "        }#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col15,#T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col14{\n",
        "            background-color:  #157ab5;\n",
        "            color:  #000000;\n",
        "        }</style><table id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eb\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Rt</th>        <th class=\"col_heading level0 col1\" >theta</th>        <th class=\"col_heading level0 col2\" >kappa</th>        <th class=\"col_heading level0 col3\" >rho</th>        <th class=\"col_heading level0 col4\" >sigma</th>        <th class=\"col_heading level0 col5\" >School_closing</th>        <th class=\"col_heading level0 col6\" >Workplace_closing</th>        <th class=\"col_heading level0 col7\" >Cancel_events</th>        <th class=\"col_heading level0 col8\" >Gatherings_restrictions</th>        <th class=\"col_heading level0 col9\" >Transport_closing</th>        <th class=\"col_heading level0 col10\" >Stay_home_restrictions</th>        <th class=\"col_heading level0 col11\" >Internal_movement_restrictions</th>        <th class=\"col_heading level0 col12\" >International_movement_restrictions</th>        <th class=\"col_heading level0 col13\" >Information_campaigns</th>        <th class=\"col_heading level0 col14\" >Testing_policy</th>        <th class=\"col_heading level0 col15\" >Contact_tracing</th>        <th class=\"col_heading level0 col16\" >Stringency_index</th>    </tr></thead><tbody>\n",
        "                <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row0\" class=\"row_heading level0 row0\" >Rt</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col1\" class=\"data row0 col1\" >-0.272131</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col2\" class=\"data row0 col2\" >-0.049009</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col3\" class=\"data row0 col3\" >0.649960</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col4\" class=\"data row0 col4\" >-0.504879</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col5\" class=\"data row0 col5\" >-0.280209</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col6\" class=\"data row0 col6\" >-0.382824</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col7\" class=\"data row0 col7\" >-0.325683</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col8\" class=\"data row0 col8\" >-0.455668</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col9\" class=\"data row0 col9\" >-0.330753</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col10\" class=\"data row0 col10\" >-0.269644</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col11\" class=\"data row0 col11\" >-0.317266</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col12\" class=\"data row0 col12\" >-0.306404</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col13\" class=\"data row0 col13\" >-0.382028</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col14\" class=\"data row0 col14\" >-0.307777</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col15\" class=\"data row0 col15\" >-0.320149</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow0_col16\" class=\"data row0 col16\" >-0.340835</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row1\" class=\"row_heading level0 row1\" >theta</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col0\" class=\"data row1 col0\" >-0.272131</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col2\" class=\"data row1 col2\" >-0.101193</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col3\" class=\"data row1 col3\" >-0.371480</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col4\" class=\"data row1 col4\" >-0.107123</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col5\" class=\"data row1 col5\" >0.275477</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col6\" class=\"data row1 col6\" >0.068680</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col7\" class=\"data row1 col7\" >0.276556</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col8\" class=\"data row1 col8\" >0.016363</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col9\" class=\"data row1 col9\" >0.396650</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col10\" class=\"data row1 col10\" >0.106004</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col11\" class=\"data row1 col11\" >0.322890</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col12\" class=\"data row1 col12\" >0.049284</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col13\" class=\"data row1 col13\" >0.100071</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col14\" class=\"data row1 col14\" >-0.147953</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col15\" class=\"data row1 col15\" >0.163127</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow1_col16\" class=\"data row1 col16\" >0.090985</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row2\" class=\"row_heading level0 row2\" >kappa</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col0\" class=\"data row2 col0\" >-0.049009</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col1\" class=\"data row2 col1\" >-0.101193</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col3\" class=\"data row2 col3\" >0.153041</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col4\" class=\"data row2 col4\" >0.162181</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col5\" class=\"data row2 col5\" >-0.042368</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col6\" class=\"data row2 col6\" >0.043697</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col7\" class=\"data row2 col7\" >0.132488</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col8\" class=\"data row2 col8\" >-0.071148</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col9\" class=\"data row2 col9\" >-0.020612</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col10\" class=\"data row2 col10\" >-0.026963</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col11\" class=\"data row2 col11\" >-0.065815</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col12\" class=\"data row2 col12\" >-0.046010</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col13\" class=\"data row2 col13\" >0.058999</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col14\" class=\"data row2 col14\" >-0.086979</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col15\" class=\"data row2 col15\" >0.030621</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow2_col16\" class=\"data row2 col16\" >-0.008077</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row3\" class=\"row_heading level0 row3\" >rho</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col0\" class=\"data row3 col0\" >0.649960</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col1\" class=\"data row3 col1\" >-0.371480</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col2\" class=\"data row3 col2\" >0.153041</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col4\" class=\"data row3 col4\" >-0.066787</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col5\" class=\"data row3 col5\" >-0.411705</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col6\" class=\"data row3 col6\" >-0.316857</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col7\" class=\"data row3 col7\" >-0.230422</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col8\" class=\"data row3 col8\" >-0.295047</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col9\" class=\"data row3 col9\" >-0.476764</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col10\" class=\"data row3 col10\" >-0.211894</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col11\" class=\"data row3 col11\" >-0.244171</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col12\" class=\"data row3 col12\" >-0.405587</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col13\" class=\"data row3 col13\" >-0.272693</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col14\" class=\"data row3 col14\" >-0.342060</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col15\" class=\"data row3 col15\" >-0.258573</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow3_col16\" class=\"data row3 col16\" >-0.279804</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row4\" class=\"row_heading level0 row4\" >sigma</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col0\" class=\"data row4 col0\" >-0.504879</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col1\" class=\"data row4 col1\" >-0.107123</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col2\" class=\"data row4 col2\" >0.162181</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col3\" class=\"data row4 col3\" >-0.066787</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col5\" class=\"data row4 col5\" >0.054760</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col6\" class=\"data row4 col6\" >0.271349</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col7\" class=\"data row4 col7\" >0.260937</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col8\" class=\"data row4 col8\" >0.446988</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col9\" class=\"data row4 col9\" >-0.005935</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col10\" class=\"data row4 col10\" >0.222797</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col11\" class=\"data row4 col11\" >0.171490</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col12\" class=\"data row4 col12\" >0.036264</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col13\" class=\"data row4 col13\" >0.213928</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col14\" class=\"data row4 col14\" >0.095350</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col15\" class=\"data row4 col15\" >0.092818</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow4_col16\" class=\"data row4 col16\" >0.248649</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row5\" class=\"row_heading level0 row5\" >School_closing</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col0\" class=\"data row5 col0\" >-0.280209</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col1\" class=\"data row5 col1\" >0.275477</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col2\" class=\"data row5 col2\" >-0.042368</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col3\" class=\"data row5 col3\" >-0.411705</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col4\" class=\"data row5 col4\" >0.054760</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col6\" class=\"data row5 col6\" >0.611583</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col7\" class=\"data row5 col7\" >0.172351</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col8\" class=\"data row5 col8\" >0.331883</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col9\" class=\"data row5 col9\" >0.218588</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col10\" class=\"data row5 col10\" >0.496418</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col11\" class=\"data row5 col11\" >0.208182</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col12\" class=\"data row5 col12\" >0.193098</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col13\" class=\"data row5 col13\" >0.336049</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col14\" class=\"data row5 col14\" >0.072198</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col15\" class=\"data row5 col15\" >0.014925</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow5_col16\" class=\"data row5 col16\" >0.671611</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row6\" class=\"row_heading level0 row6\" >Workplace_closing</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col0\" class=\"data row6 col0\" >-0.382824</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col1\" class=\"data row6 col1\" >0.068680</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col2\" class=\"data row6 col2\" >0.043697</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col3\" class=\"data row6 col3\" >-0.316857</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col4\" class=\"data row6 col4\" >0.271349</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col5\" class=\"data row6 col5\" >0.611583</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col7\" class=\"data row6 col7\" >0.419556</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col8\" class=\"data row6 col8\" >0.577794</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col9\" class=\"data row6 col9\" >0.191062</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col10\" class=\"data row6 col10\" >0.727203</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col11\" class=\"data row6 col11\" >0.349866</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col12\" class=\"data row6 col12\" >0.263181</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col13\" class=\"data row6 col13\" >0.411169</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col14\" class=\"data row6 col14\" >-0.030021</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col15\" class=\"data row6 col15\" >-0.123318</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow6_col16\" class=\"data row6 col16\" >0.794793</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row7\" class=\"row_heading level0 row7\" >Cancel_events</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col0\" class=\"data row7 col0\" >-0.325683</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col1\" class=\"data row7 col1\" >0.276556</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col2\" class=\"data row7 col2\" >0.132488</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col3\" class=\"data row7 col3\" >-0.230422</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col4\" class=\"data row7 col4\" >0.260937</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col5\" class=\"data row7 col5\" >0.172351</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col6\" class=\"data row7 col6\" >0.419556</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col8\" class=\"data row7 col8\" >0.456668</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col9\" class=\"data row7 col9\" >0.609170</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col10\" class=\"data row7 col10\" >0.445067</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col11\" class=\"data row7 col11\" >0.734123</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col12\" class=\"data row7 col12\" >-0.040259</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col13\" class=\"data row7 col13\" >0.339048</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col14\" class=\"data row7 col14\" >-0.279111</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col15\" class=\"data row7 col15\" >0.060119</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow7_col16\" class=\"data row7 col16\" >0.467786</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row8\" class=\"row_heading level0 row8\" >Gatherings_restrictions</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col0\" class=\"data row8 col0\" >-0.455668</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col1\" class=\"data row8 col1\" >0.016363</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col2\" class=\"data row8 col2\" >-0.071148</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col3\" class=\"data row8 col3\" >-0.295047</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col4\" class=\"data row8 col4\" >0.446988</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col5\" class=\"data row8 col5\" >0.331883</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col6\" class=\"data row8 col6\" >0.577794</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col7\" class=\"data row8 col7\" >0.456668</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col9\" class=\"data row8 col9\" >0.260186</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col10\" class=\"data row8 col10\" >0.592292</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col11\" class=\"data row8 col11\" >0.550257</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col12\" class=\"data row8 col12\" >0.300961</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col13\" class=\"data row8 col13\" >0.475133</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col14\" class=\"data row8 col14\" >0.240436</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col15\" class=\"data row8 col15\" >0.136318</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow8_col16\" class=\"data row8 col16\" >0.678615</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row9\" class=\"row_heading level0 row9\" >Transport_closing</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col0\" class=\"data row9 col0\" >-0.330753</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col1\" class=\"data row9 col1\" >0.396650</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col2\" class=\"data row9 col2\" >-0.020612</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col3\" class=\"data row9 col3\" >-0.476764</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col4\" class=\"data row9 col4\" >-0.005935</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col5\" class=\"data row9 col5\" >0.218588</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col6\" class=\"data row9 col6\" >0.191062</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col7\" class=\"data row9 col7\" >0.609170</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col8\" class=\"data row9 col8\" >0.260186</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col10\" class=\"data row9 col10\" >0.236337</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col11\" class=\"data row9 col11\" >0.656774</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col12\" class=\"data row9 col12\" >-0.013156</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col13\" class=\"data row9 col13\" >0.236505</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col14\" class=\"data row9 col14\" >-0.075543</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col15\" class=\"data row9 col15\" >0.236967</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow9_col16\" class=\"data row9 col16\" >0.219280</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row10\" class=\"row_heading level0 row10\" >Stay_home_restrictions</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col0\" class=\"data row10 col0\" >-0.269644</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col1\" class=\"data row10 col1\" >0.106004</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col2\" class=\"data row10 col2\" >-0.026963</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col3\" class=\"data row10 col3\" >-0.211894</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col4\" class=\"data row10 col4\" >0.222797</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col5\" class=\"data row10 col5\" >0.496418</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col6\" class=\"data row10 col6\" >0.727203</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col7\" class=\"data row10 col7\" >0.445067</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col8\" class=\"data row10 col8\" >0.592292</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col9\" class=\"data row10 col9\" >0.236337</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col11\" class=\"data row10 col11\" >0.539251</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col12\" class=\"data row10 col12\" >0.238676</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col13\" class=\"data row10 col13\" >0.329360</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col14\" class=\"data row10 col14\" >-0.086081</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col15\" class=\"data row10 col15\" >-0.057968</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow10_col16\" class=\"data row10 col16\" >0.755912</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row11\" class=\"row_heading level0 row11\" >Internal_movement_restrictions</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col0\" class=\"data row11 col0\" >-0.317266</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col1\" class=\"data row11 col1\" >0.322890</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col2\" class=\"data row11 col2\" >-0.065815</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col3\" class=\"data row11 col3\" >-0.244171</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col4\" class=\"data row11 col4\" >0.171490</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col5\" class=\"data row11 col5\" >0.208182</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col6\" class=\"data row11 col6\" >0.349866</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col7\" class=\"data row11 col7\" >0.734123</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col8\" class=\"data row11 col8\" >0.550257</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col9\" class=\"data row11 col9\" >0.656774</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col10\" class=\"data row11 col10\" >0.539251</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col12\" class=\"data row11 col12\" >-0.007765</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col13\" class=\"data row11 col13\" >0.284148</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col14\" class=\"data row11 col14\" >-0.109269</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col15\" class=\"data row11 col15\" >0.117696</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow11_col16\" class=\"data row11 col16\" >0.436397</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row12\" class=\"row_heading level0 row12\" >International_movement_restrictions</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col0\" class=\"data row12 col0\" >-0.306404</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col1\" class=\"data row12 col1\" >0.049284</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col2\" class=\"data row12 col2\" >-0.046010</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col3\" class=\"data row12 col3\" >-0.405587</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col4\" class=\"data row12 col4\" >0.036264</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col5\" class=\"data row12 col5\" >0.193098</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col6\" class=\"data row12 col6\" >0.263181</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col7\" class=\"data row12 col7\" >-0.040259</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col8\" class=\"data row12 col8\" >0.300961</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col9\" class=\"data row12 col9\" >-0.013156</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col10\" class=\"data row12 col10\" >0.238676</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col11\" class=\"data row12 col11\" >-0.007765</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col13\" class=\"data row12 col13\" >0.390334</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col14\" class=\"data row12 col14\" >0.516335</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col15\" class=\"data row12 col15\" >0.406149</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow12_col16\" class=\"data row12 col16\" >0.379908</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row13\" class=\"row_heading level0 row13\" >Information_campaigns</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col0\" class=\"data row13 col0\" >-0.382028</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col1\" class=\"data row13 col1\" >0.100071</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col2\" class=\"data row13 col2\" >0.058999</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col3\" class=\"data row13 col3\" >-0.272693</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col4\" class=\"data row13 col4\" >0.213928</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col5\" class=\"data row13 col5\" >0.336049</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col6\" class=\"data row13 col6\" >0.411169</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col7\" class=\"data row13 col7\" >0.339048</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col8\" class=\"data row13 col8\" >0.475133</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col9\" class=\"data row13 col9\" >0.236505</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col10\" class=\"data row13 col10\" >0.329360</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col11\" class=\"data row13 col11\" >0.284148</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col12\" class=\"data row13 col12\" >0.390334</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col14\" class=\"data row13 col14\" >0.443396</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col15\" class=\"data row13 col15\" >0.385973</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow13_col16\" class=\"data row13 col16\" >0.557577</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row14\" class=\"row_heading level0 row14\" >Testing_policy</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col0\" class=\"data row14 col0\" >-0.307777</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col1\" class=\"data row14 col1\" >-0.147953</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col2\" class=\"data row14 col2\" >-0.086979</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col3\" class=\"data row14 col3\" >-0.342060</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col4\" class=\"data row14 col4\" >0.095350</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col5\" class=\"data row14 col5\" >0.072198</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col6\" class=\"data row14 col6\" >-0.030021</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col7\" class=\"data row14 col7\" >-0.279111</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col8\" class=\"data row14 col8\" >0.240436</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col9\" class=\"data row14 col9\" >-0.075543</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col10\" class=\"data row14 col10\" >-0.086081</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col11\" class=\"data row14 col11\" >-0.109269</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col12\" class=\"data row14 col12\" >0.516335</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col13\" class=\"data row14 col13\" >0.443396</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col14\" class=\"data row14 col14\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col15\" class=\"data row14 col15\" >0.563855</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow14_col16\" class=\"data row14 col16\" >0.068015</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row15\" class=\"row_heading level0 row15\" >Contact_tracing</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col0\" class=\"data row15 col0\" >-0.320149</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col1\" class=\"data row15 col1\" >0.163127</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col2\" class=\"data row15 col2\" >0.030621</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col3\" class=\"data row15 col3\" >-0.258573</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col4\" class=\"data row15 col4\" >0.092818</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col5\" class=\"data row15 col5\" >0.014925</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col6\" class=\"data row15 col6\" >-0.123318</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col7\" class=\"data row15 col7\" >0.060119</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col8\" class=\"data row15 col8\" >0.136318</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col9\" class=\"data row15 col9\" >0.236967</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col10\" class=\"data row15 col10\" >-0.057968</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col11\" class=\"data row15 col11\" >0.117696</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col12\" class=\"data row15 col12\" >0.406149</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col13\" class=\"data row15 col13\" >0.385973</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col14\" class=\"data row15 col14\" >0.563855</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col15\" class=\"data row15 col15\" >1.000000</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow15_col16\" class=\"data row15 col16\" >-0.029903</td>\n",
        "            </tr>\n",
        "            <tr>\n",
        "                        <th id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8eblevel0_row16\" class=\"row_heading level0 row16\" >Stringency_index</th>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col0\" class=\"data row16 col0\" >-0.340835</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col1\" class=\"data row16 col1\" >0.090985</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col2\" class=\"data row16 col2\" >-0.008077</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col3\" class=\"data row16 col3\" >-0.279804</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col4\" class=\"data row16 col4\" >0.248649</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col5\" class=\"data row16 col5\" >0.671611</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col6\" class=\"data row16 col6\" >0.794793</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col7\" class=\"data row16 col7\" >0.467786</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col8\" class=\"data row16 col8\" >0.678615</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col9\" class=\"data row16 col9\" >0.219280</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col10\" class=\"data row16 col10\" >0.755912</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col11\" class=\"data row16 col11\" >0.436397</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col12\" class=\"data row16 col12\" >0.379908</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col13\" class=\"data row16 col13\" >0.557577</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col14\" class=\"data row16 col14\" >0.068015</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col15\" class=\"data row16 col15\" >-0.029903</td>\n",
        "                        <td id=\"T_32dcf1bc_3eda_11eb_9fc8_5254003fc8ebrow16_col16\" class=\"data row16 col16\" >1.000000</td>\n",
        "            </tr>\n",
        "    </tbody></table>"
       ],
       "output_type": "pyout",
       "prompt_number": 21,
       "text": [
        "<pandas.io.formats.style.Styler at 0x7f3e5af5a2b0>"
       ]
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "# Scatter plot of Stringency index and Rt\n",
      "df = track_df.copy()\n",
      "sns.scatterplot(data=df, x=\"Stringency_index\", y=\"Rt\", hue=\"Country\", legend=\"brief\", marker=\"+\")\n",
      "bbox_to_anchor=(1.02, 0)\n",
      "bbox_loc=\"lower left\"\n",
      "plt.legend(bbox_to_anchor=bbox_to_anchor, loc=bbox_loc, borderaxespad=0)\n",
      "plt.title(\"Relationship of Stringency index and reproduction number\")\n",
      "plt.ylabel(\"Reproduction number\")\n",
      "plt.xlabel(\"Stringency index\")\n",
      "plt.show()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "display_data",
       "png": "\n",
       "text": [
        "<Figure size 432x288 with 1 Axes>"
       ]
      }
     ],
     "prompt_number": 22
    }
   ],
   "metadata": {}
  }
 ]
}
